
13SVCOperation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001550  08001550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001608  08001608  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001608  08001608  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001608  08001608  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001608  08001608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800160c  0800160c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800166c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800166c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b07  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ae  00000000  00000000  00020bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00020f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e3  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c89  00000000  00000000  000211ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012c1  00000000  00000000  00023e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097f1  00000000  00000000  000250f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c1c  00000000  00000000  0002e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0002f504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001538 	.word	0x08001538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001538 	.word	0x08001538

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <add_numbers>:
#include<stdio.h>

void SVC_Handle_c(uint32_t *pBaseStackFrame);

int32_t add_numbers(int32_t x , int32_t y )
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
    int32_t result;
    __asm volatile("SVC #36");
 80002ba:	df24      	svc	36	; 0x24
    __asm volatile ("MOV %0,R0": "=r"(result) ::);
 80002bc:	4603      	mov	r3, r0
 80002be:	60fb      	str	r3, [r7, #12]
    return result;
 80002c0:	68fb      	ldr	r3, [r7, #12]

}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <sub_numbers>:

int32_t sub_numbers(int32_t x , int32_t y )
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	int32_t result;
	__asm volatile("SVC #37");
 80002d6:	df25      	svc	37	; 0x25
	__asm volatile("MOV %0,R0": "=r"(result)::);
 80002d8:	4603      	mov	r3, r0
 80002da:	60fb      	str	r3, [r7, #12]
	return result;
 80002dc:	68fb      	ldr	r3, [r7, #12]

}
 80002de:	4618      	mov	r0, r3
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <mul_numbers>:

int32_t mul_numbers(int32_t x , int32_t y )
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	uint32_t result;
	__asm volatile("SVC #38");
 80002f2:	df26      	svc	38	; 0x26
	__asm volatile("MOV %0,R0": "=r"(result)::);
 80002f4:	4603      	mov	r3, r0
 80002f6:	60fb      	str	r3, [r7, #12]
	return result;
 80002f8:	68fb      	ldr	r3, [r7, #12]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <div_numbers>:

int32_t div_numbers(int32_t x , int32_t y )
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	uint32_t result;
	__asm volatile("SVC #39");
 800030e:	df27      	svc	39	; 0x27
	__asm volatile("MOV %0,R0": "=r"(result)::);
 8000310:	4603      	mov	r3, r0
 8000312:	60fb      	str	r3, [r7, #12]
	return result;
 8000314:	68fb      	ldr	r3, [r7, #12]

}
 8000316:	4618      	mov	r0, r3
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <main>:


int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
    int32_t result;

    result = add_numbers(40, -90);
 8000326:	f06f 0159 	mvn.w	r1, #89	; 0x59
 800032a:	2028      	movs	r0, #40	; 0x28
 800032c:	f7ff ffc0 	bl	80002b0 <add_numbers>
 8000330:	6078      	str	r0, [r7, #4]
    printf("Add result = %ld\n",result);
 8000332:	6879      	ldr	r1, [r7, #4]
 8000334:	4810      	ldr	r0, [pc, #64]	; (8000378 <main+0x58>)
 8000336:	f000 fa37 	bl	80007a8 <iprintf>

    result = sub_numbers(25,150);
 800033a:	2196      	movs	r1, #150	; 0x96
 800033c:	2019      	movs	r0, #25
 800033e:	f7ff ffc5 	bl	80002cc <sub_numbers>
 8000342:	6078      	str	r0, [r7, #4]
    printf("Sub result = %ld\n",result);
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <main+0x5c>)
 8000348:	f000 fa2e 	bl	80007a8 <iprintf>

    result = mul_numbers(374,890);
 800034c:	f240 317a 	movw	r1, #890	; 0x37a
 8000350:	f44f 70bb 	mov.w	r0, #374	; 0x176
 8000354:	f7ff ffc8 	bl	80002e8 <mul_numbers>
 8000358:	6078      	str	r0, [r7, #4]
    printf("mul result = %ld\n", result);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <main+0x60>)
 800035e:	f000 fa23 	bl	80007a8 <iprintf>

    result = div_numbers(67,-3);
 8000362:	f06f 0102 	mvn.w	r1, #2
 8000366:	2043      	movs	r0, #67	; 0x43
 8000368:	f7ff ffcc 	bl	8000304 <div_numbers>
 800036c:	6078      	str	r0, [r7, #4]
    printf("div result = %ld\n",result);
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <main+0x64>)
 8000372:	f000 fa19 	bl	80007a8 <iprintf>

    for(;;);
 8000376:	e7fe      	b.n	8000376 <main+0x56>
 8000378:	08001550 	.word	0x08001550
 800037c:	08001564 	.word	0x08001564
 8000380:	08001578 	.word	0x08001578
 8000384:	0800158c 	.word	0x0800158c

08000388 <SVC_Handler>:
}


__attribute__( ( naked ) ) void SVC_Handler( void )
{
    __asm ("MRS r0,MSP");
 8000388:	f3ef 8008 	mrs	r0, MSP
    __asm( "B SVC_Handler_c");
 800038c:	f000 b802 	b.w	8000394 <SVC_Handler_c>
}
 8000390:	bf00      	nop
	...

08000394 <SVC_Handler_c>:


void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
    printf("in SVC handler\n");
 800039c:	4826      	ldr	r0, [pc, #152]	; (8000438 <SVC_Handler_c+0xa4>)
 800039e:	f000 fa69 	bl	8000874 <puts>

    uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3318      	adds	r3, #24
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	613b      	str	r3, [r7, #16]

    //2. decrement the return address by 2 to point to
    //opcode of the SVC instruction in the program memory
    pReturn_addr-=2;
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	3b02      	subs	r3, #2
 80003ae:	613b      	str	r3, [r7, #16]


    //3. extract the SVC number (LSByte of the opcode)
    uint8_t svc_number = *pReturn_addr;
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	73fb      	strb	r3, [r7, #15]

    printf("Svc number is : %d\n",svc_number);
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
 80003b8:	4619      	mov	r1, r3
 80003ba:	4820      	ldr	r0, [pc, #128]	; (800043c <SVC_Handler_c+0xa8>)
 80003bc:	f000 f9f4 	bl	80007a8 <iprintf>

    int16_t argX, argY, result;
    argX = pBaseOfStackFrame[0];
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	81bb      	strh	r3, [r7, #12]
    argY = pBaseOfStackFrame[1];
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3304      	adds	r3, #4
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	817b      	strh	r3, [r7, #10]

/*SVC number signifies the type of operation , decode it */
    switch(svc_number)
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	3b24      	subs	r3, #36	; 0x24
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d825      	bhi.n	8000422 <SVC_Handler_c+0x8e>
 80003d6:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <SVC_Handler_c+0x48>)
 80003d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003dc:	080003ed 	.word	0x080003ed
 80003e0:	080003f9 	.word	0x080003f9
 80003e4:	08000405 	.word	0x08000405
 80003e8:	08000413 	.word	0x08000413
    {
    case 36:
        /* Addition */
    	result = argX + argY;
 80003ec:	89ba      	ldrh	r2, [r7, #12]
 80003ee:	897b      	ldrh	r3, [r7, #10]
 80003f0:	4413      	add	r3, r2
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	82fb      	strh	r3, [r7, #22]
        break;
 80003f6:	e017      	b.n	8000428 <SVC_Handler_c+0x94>
    case 37:
        /* Subtraction*/
    	result = argX - argY;
 80003f8:	89ba      	ldrh	r2, [r7, #12]
 80003fa:	897b      	ldrh	r3, [r7, #10]
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	b29b      	uxth	r3, r3
 8000400:	82fb      	strh	r3, [r7, #22]
        break;
 8000402:	e011      	b.n	8000428 <SVC_Handler_c+0x94>
    case 38:
        /* Multiplication*/
    	result = argX * argY;
 8000404:	89ba      	ldrh	r2, [r7, #12]
 8000406:	897b      	ldrh	r3, [r7, #10]
 8000408:	fb12 f303 	smulbb	r3, r2, r3
 800040c:	b29b      	uxth	r3, r3
 800040e:	82fb      	strh	r3, [r7, #22]
        break;
 8000410:	e00a      	b.n	8000428 <SVC_Handler_c+0x94>
    case 39:
        /* Division*/
    	result = argX / argY;
 8000412:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000416:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800041a:	fb92 f3f3 	sdiv	r3, r2, r3
 800041e:	82fb      	strh	r3, [r7, #22]
        break;
 8000420:	e002      	b.n	8000428 <SVC_Handler_c+0x94>
    default:
        printf("invalid svc code\n");
 8000422:	4807      	ldr	r0, [pc, #28]	; (8000440 <SVC_Handler_c+0xac>)
 8000424:	f000 fa26 	bl	8000874 <puts>

    }

/*store the result back to stack frame at R0's position */
    pBaseOfStackFrame[0] = result;
 8000428:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]

}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	080015a0 	.word	0x080015a0
 800043c:	080015b0 	.word	0x080015b0
 8000440:	080015c4 	.word	0x080015c4

08000444 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <ITM_SendChar+0x44>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <ITM_SendChar+0x44>)
 8000454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000458:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <ITM_SendChar+0x48>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <ITM_SendChar+0x48>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000466:	bf00      	nop
 8000468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f8      	beq.n	8000468 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000476:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	e000edfc 	.word	0xe000edfc
 800048c:	e0000e00 	.word	0xe0000e00

08000490 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e00a      	b.n	80004b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004a2:	f3af 8000 	nop.w
 80004a6:	4601      	mov	r1, r0
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	60ba      	str	r2, [r7, #8]
 80004ae:	b2ca      	uxtb	r2, r1
 80004b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dbf0      	blt.n	80004a2 <_read+0x12>
  }

  return len;
 80004c0:	687b      	ldr	r3, [r7, #4]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	e009      	b.n	80004f0 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	60ba      	str	r2, [r7, #8]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffad 	bl	8000444 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbf1      	blt.n	80004dc <_write+0x12>
  }
  return len;
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_close>:

int _close(int file)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800050a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000528:	605a      	str	r2, [r3, #4]
  return 0;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <_isatty>:

int _isatty(int file)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800053e:	2301      	movs	r3, #1
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800054a:	b480      	push	{r7}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	60b9      	str	r1, [r7, #8]
 8000554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
	...

08000564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <_sbrk+0x5c>)
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <_sbrk+0x60>)
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <_sbrk+0x64>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <_sbrk+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	429a      	cmp	r2, r3
 8000592:	d207      	bcs.n	80005a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000594:	f000 fa9c 	bl	8000ad0 <__errno>
 8000598:	4603      	mov	r3, r0
 800059a:	220c      	movs	r2, #12
 800059c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a2:	e009      	b.n	80005b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <_sbrk+0x64>)
 80005b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20020000 	.word	0x20020000
 80005c4:	00000400 	.word	0x00000400
 80005c8:	20000078 	.word	0x20000078
 80005cc:	200001c8 	.word	0x200001c8

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 fa6d 	bl	8000adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe8d 	bl	8000320 <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000614:	08001610 	.word	0x08001610
  ldr r2, =_sbss
 8000618:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800061c:	200001c8 	.word	0x200001c8

08000620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC_IRQHandler>
	...

08000624 <std>:
 8000624:	2300      	movs	r3, #0
 8000626:	b510      	push	{r4, lr}
 8000628:	4604      	mov	r4, r0
 800062a:	e9c0 3300 	strd	r3, r3, [r0]
 800062e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000632:	6083      	str	r3, [r0, #8]
 8000634:	8181      	strh	r1, [r0, #12]
 8000636:	6643      	str	r3, [r0, #100]	; 0x64
 8000638:	81c2      	strh	r2, [r0, #14]
 800063a:	6183      	str	r3, [r0, #24]
 800063c:	4619      	mov	r1, r3
 800063e:	2208      	movs	r2, #8
 8000640:	305c      	adds	r0, #92	; 0x5c
 8000642:	f000 f9f7 	bl	8000a34 <memset>
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <std+0x58>)
 8000648:	6263      	str	r3, [r4, #36]	; 0x24
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <std+0x5c>)
 800064c:	62a3      	str	r3, [r4, #40]	; 0x28
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <std+0x60>)
 8000650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <std+0x64>)
 8000654:	6323      	str	r3, [r4, #48]	; 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <std+0x68>)
 8000658:	6224      	str	r4, [r4, #32]
 800065a:	429c      	cmp	r4, r3
 800065c:	d006      	beq.n	800066c <std+0x48>
 800065e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000662:	4294      	cmp	r4, r2
 8000664:	d002      	beq.n	800066c <std+0x48>
 8000666:	33d0      	adds	r3, #208	; 0xd0
 8000668:	429c      	cmp	r4, r3
 800066a:	d105      	bne.n	8000678 <std+0x54>
 800066c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000674:	f000 ba56 	b.w	8000b24 <__retarget_lock_init_recursive>
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	08000885 	.word	0x08000885
 8000680:	080008a7 	.word	0x080008a7
 8000684:	080008df 	.word	0x080008df
 8000688:	08000903 	.word	0x08000903
 800068c:	2000007c 	.word	0x2000007c

08000690 <stdio_exit_handler>:
 8000690:	4a02      	ldr	r2, [pc, #8]	; (800069c <stdio_exit_handler+0xc>)
 8000692:	4903      	ldr	r1, [pc, #12]	; (80006a0 <stdio_exit_handler+0x10>)
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <stdio_exit_handler+0x14>)
 8000696:	f000 b869 	b.w	800076c <_fwalk_sglue>
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	080013c1 	.word	0x080013c1
 80006a4:	2000000c 	.word	0x2000000c

080006a8 <cleanup_stdio>:
 80006a8:	6841      	ldr	r1, [r0, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <cleanup_stdio+0x34>)
 80006ac:	4299      	cmp	r1, r3
 80006ae:	b510      	push	{r4, lr}
 80006b0:	4604      	mov	r4, r0
 80006b2:	d001      	beq.n	80006b8 <cleanup_stdio+0x10>
 80006b4:	f000 fe84 	bl	80013c0 <_fflush_r>
 80006b8:	68a1      	ldr	r1, [r4, #8]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <cleanup_stdio+0x38>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	d002      	beq.n	80006c6 <cleanup_stdio+0x1e>
 80006c0:	4620      	mov	r0, r4
 80006c2:	f000 fe7d 	bl	80013c0 <_fflush_r>
 80006c6:	68e1      	ldr	r1, [r4, #12]
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <cleanup_stdio+0x3c>)
 80006ca:	4299      	cmp	r1, r3
 80006cc:	d004      	beq.n	80006d8 <cleanup_stdio+0x30>
 80006ce:	4620      	mov	r0, r4
 80006d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d4:	f000 be74 	b.w	80013c0 <_fflush_r>
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	2000007c 	.word	0x2000007c
 80006e0:	200000e4 	.word	0x200000e4
 80006e4:	2000014c 	.word	0x2000014c

080006e8 <global_stdio_init.part.0>:
 80006e8:	b510      	push	{r4, lr}
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <global_stdio_init.part.0+0x30>)
 80006ec:	4c0b      	ldr	r4, [pc, #44]	; (800071c <global_stdio_init.part.0+0x34>)
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <global_stdio_init.part.0+0x38>)
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4620      	mov	r0, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	f7ff ff94 	bl	8000624 <std>
 80006fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000700:	2201      	movs	r2, #1
 8000702:	2109      	movs	r1, #9
 8000704:	f7ff ff8e 	bl	8000624 <std>
 8000708:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800070c:	2202      	movs	r2, #2
 800070e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000712:	2112      	movs	r1, #18
 8000714:	f7ff bf86 	b.w	8000624 <std>
 8000718:	200001b4 	.word	0x200001b4
 800071c:	2000007c 	.word	0x2000007c
 8000720:	08000691 	.word	0x08000691

08000724 <__sfp_lock_acquire>:
 8000724:	4801      	ldr	r0, [pc, #4]	; (800072c <__sfp_lock_acquire+0x8>)
 8000726:	f000 b9fe 	b.w	8000b26 <__retarget_lock_acquire_recursive>
 800072a:	bf00      	nop
 800072c:	200001bd 	.word	0x200001bd

08000730 <__sfp_lock_release>:
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <__sfp_lock_release+0x8>)
 8000732:	f000 b9f9 	b.w	8000b28 <__retarget_lock_release_recursive>
 8000736:	bf00      	nop
 8000738:	200001bd 	.word	0x200001bd

0800073c <__sinit>:
 800073c:	b510      	push	{r4, lr}
 800073e:	4604      	mov	r4, r0
 8000740:	f7ff fff0 	bl	8000724 <__sfp_lock_acquire>
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	b11b      	cbz	r3, 8000750 <__sinit+0x14>
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f7ff bff0 	b.w	8000730 <__sfp_lock_release>
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__sinit+0x28>)
 8000752:	6223      	str	r3, [r4, #32]
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__sinit+0x2c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f5      	bne.n	8000748 <__sinit+0xc>
 800075c:	f7ff ffc4 	bl	80006e8 <global_stdio_init.part.0>
 8000760:	e7f2      	b.n	8000748 <__sinit+0xc>
 8000762:	bf00      	nop
 8000764:	080006a9 	.word	0x080006a9
 8000768:	200001b4 	.word	0x200001b4

0800076c <_fwalk_sglue>:
 800076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000770:	4607      	mov	r7, r0
 8000772:	4688      	mov	r8, r1
 8000774:	4614      	mov	r4, r2
 8000776:	2600      	movs	r6, #0
 8000778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800077c:	f1b9 0901 	subs.w	r9, r9, #1
 8000780:	d505      	bpl.n	800078e <_fwalk_sglue+0x22>
 8000782:	6824      	ldr	r4, [r4, #0]
 8000784:	2c00      	cmp	r4, #0
 8000786:	d1f7      	bne.n	8000778 <_fwalk_sglue+0xc>
 8000788:	4630      	mov	r0, r6
 800078a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800078e:	89ab      	ldrh	r3, [r5, #12]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d907      	bls.n	80007a4 <_fwalk_sglue+0x38>
 8000794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000798:	3301      	adds	r3, #1
 800079a:	d003      	beq.n	80007a4 <_fwalk_sglue+0x38>
 800079c:	4629      	mov	r1, r5
 800079e:	4638      	mov	r0, r7
 80007a0:	47c0      	blx	r8
 80007a2:	4306      	orrs	r6, r0
 80007a4:	3568      	adds	r5, #104	; 0x68
 80007a6:	e7e9      	b.n	800077c <_fwalk_sglue+0x10>

080007a8 <iprintf>:
 80007a8:	b40f      	push	{r0, r1, r2, r3}
 80007aa:	b507      	push	{r0, r1, r2, lr}
 80007ac:	4906      	ldr	r1, [pc, #24]	; (80007c8 <iprintf+0x20>)
 80007ae:	ab04      	add	r3, sp, #16
 80007b0:	6808      	ldr	r0, [r1, #0]
 80007b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b6:	6881      	ldr	r1, [r0, #8]
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f000 fad5 	bl	8000d68 <_vfiprintf_r>
 80007be:	b003      	add	sp, #12
 80007c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr
 80007c8:	20000058 	.word	0x20000058

080007cc <_puts_r>:
 80007cc:	6a03      	ldr	r3, [r0, #32]
 80007ce:	b570      	push	{r4, r5, r6, lr}
 80007d0:	6884      	ldr	r4, [r0, #8]
 80007d2:	4605      	mov	r5, r0
 80007d4:	460e      	mov	r6, r1
 80007d6:	b90b      	cbnz	r3, 80007dc <_puts_r+0x10>
 80007d8:	f7ff ffb0 	bl	800073c <__sinit>
 80007dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007de:	07db      	lsls	r3, r3, #31
 80007e0:	d405      	bmi.n	80007ee <_puts_r+0x22>
 80007e2:	89a3      	ldrh	r3, [r4, #12]
 80007e4:	0598      	lsls	r0, r3, #22
 80007e6:	d402      	bmi.n	80007ee <_puts_r+0x22>
 80007e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007ea:	f000 f99c 	bl	8000b26 <__retarget_lock_acquire_recursive>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	0719      	lsls	r1, r3, #28
 80007f2:	d513      	bpl.n	800081c <_puts_r+0x50>
 80007f4:	6923      	ldr	r3, [r4, #16]
 80007f6:	b18b      	cbz	r3, 800081c <_puts_r+0x50>
 80007f8:	3e01      	subs	r6, #1
 80007fa:	68a3      	ldr	r3, [r4, #8]
 80007fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000800:	3b01      	subs	r3, #1
 8000802:	60a3      	str	r3, [r4, #8]
 8000804:	b9e9      	cbnz	r1, 8000842 <_puts_r+0x76>
 8000806:	2b00      	cmp	r3, #0
 8000808:	da2e      	bge.n	8000868 <_puts_r+0x9c>
 800080a:	4622      	mov	r2, r4
 800080c:	210a      	movs	r1, #10
 800080e:	4628      	mov	r0, r5
 8000810:	f000 f87b 	bl	800090a <__swbuf_r>
 8000814:	3001      	adds	r0, #1
 8000816:	d007      	beq.n	8000828 <_puts_r+0x5c>
 8000818:	250a      	movs	r5, #10
 800081a:	e007      	b.n	800082c <_puts_r+0x60>
 800081c:	4621      	mov	r1, r4
 800081e:	4628      	mov	r0, r5
 8000820:	f000 f8b0 	bl	8000984 <__swsetup_r>
 8000824:	2800      	cmp	r0, #0
 8000826:	d0e7      	beq.n	80007f8 <_puts_r+0x2c>
 8000828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800082c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800082e:	07da      	lsls	r2, r3, #31
 8000830:	d405      	bmi.n	800083e <_puts_r+0x72>
 8000832:	89a3      	ldrh	r3, [r4, #12]
 8000834:	059b      	lsls	r3, r3, #22
 8000836:	d402      	bmi.n	800083e <_puts_r+0x72>
 8000838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800083a:	f000 f975 	bl	8000b28 <__retarget_lock_release_recursive>
 800083e:	4628      	mov	r0, r5
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	2b00      	cmp	r3, #0
 8000844:	da04      	bge.n	8000850 <_puts_r+0x84>
 8000846:	69a2      	ldr	r2, [r4, #24]
 8000848:	429a      	cmp	r2, r3
 800084a:	dc06      	bgt.n	800085a <_puts_r+0x8e>
 800084c:	290a      	cmp	r1, #10
 800084e:	d004      	beq.n	800085a <_puts_r+0x8e>
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	6022      	str	r2, [r4, #0]
 8000856:	7019      	strb	r1, [r3, #0]
 8000858:	e7cf      	b.n	80007fa <_puts_r+0x2e>
 800085a:	4622      	mov	r2, r4
 800085c:	4628      	mov	r0, r5
 800085e:	f000 f854 	bl	800090a <__swbuf_r>
 8000862:	3001      	adds	r0, #1
 8000864:	d1c9      	bne.n	80007fa <_puts_r+0x2e>
 8000866:	e7df      	b.n	8000828 <_puts_r+0x5c>
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	250a      	movs	r5, #10
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	6022      	str	r2, [r4, #0]
 8000870:	701d      	strb	r5, [r3, #0]
 8000872:	e7db      	b.n	800082c <_puts_r+0x60>

08000874 <puts>:
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <puts+0xc>)
 8000876:	4601      	mov	r1, r0
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	f7ff bfa7 	b.w	80007cc <_puts_r>
 800087e:	bf00      	nop
 8000880:	20000058 	.word	0x20000058

08000884 <__sread>:
 8000884:	b510      	push	{r4, lr}
 8000886:	460c      	mov	r4, r1
 8000888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800088c:	f000 f8fc 	bl	8000a88 <_read_r>
 8000890:	2800      	cmp	r0, #0
 8000892:	bfab      	itete	ge
 8000894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000896:	89a3      	ldrhlt	r3, [r4, #12]
 8000898:	181b      	addge	r3, r3, r0
 800089a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800089e:	bfac      	ite	ge
 80008a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80008a2:	81a3      	strhlt	r3, [r4, #12]
 80008a4:	bd10      	pop	{r4, pc}

080008a6 <__swrite>:
 80008a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008aa:	461f      	mov	r7, r3
 80008ac:	898b      	ldrh	r3, [r1, #12]
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	4605      	mov	r5, r0
 80008b2:	460c      	mov	r4, r1
 80008b4:	4616      	mov	r6, r2
 80008b6:	d505      	bpl.n	80008c4 <__swrite+0x1e>
 80008b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008bc:	2302      	movs	r3, #2
 80008be:	2200      	movs	r2, #0
 80008c0:	f000 f8d0 	bl	8000a64 <_lseek_r>
 80008c4:	89a3      	ldrh	r3, [r4, #12]
 80008c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ce:	81a3      	strh	r3, [r4, #12]
 80008d0:	4632      	mov	r2, r6
 80008d2:	463b      	mov	r3, r7
 80008d4:	4628      	mov	r0, r5
 80008d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008da:	f000 b8e7 	b.w	8000aac <_write_r>

080008de <__sseek>:
 80008de:	b510      	push	{r4, lr}
 80008e0:	460c      	mov	r4, r1
 80008e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e6:	f000 f8bd 	bl	8000a64 <_lseek_r>
 80008ea:	1c43      	adds	r3, r0, #1
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	bf15      	itete	ne
 80008f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80008f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008fa:	81a3      	strheq	r3, [r4, #12]
 80008fc:	bf18      	it	ne
 80008fe:	81a3      	strhne	r3, [r4, #12]
 8000900:	bd10      	pop	{r4, pc}

08000902 <__sclose>:
 8000902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000906:	f000 b89d 	b.w	8000a44 <_close_r>

0800090a <__swbuf_r>:
 800090a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090c:	460e      	mov	r6, r1
 800090e:	4614      	mov	r4, r2
 8000910:	4605      	mov	r5, r0
 8000912:	b118      	cbz	r0, 800091c <__swbuf_r+0x12>
 8000914:	6a03      	ldr	r3, [r0, #32]
 8000916:	b90b      	cbnz	r3, 800091c <__swbuf_r+0x12>
 8000918:	f7ff ff10 	bl	800073c <__sinit>
 800091c:	69a3      	ldr	r3, [r4, #24]
 800091e:	60a3      	str	r3, [r4, #8]
 8000920:	89a3      	ldrh	r3, [r4, #12]
 8000922:	071a      	lsls	r2, r3, #28
 8000924:	d525      	bpl.n	8000972 <__swbuf_r+0x68>
 8000926:	6923      	ldr	r3, [r4, #16]
 8000928:	b31b      	cbz	r3, 8000972 <__swbuf_r+0x68>
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	6922      	ldr	r2, [r4, #16]
 800092e:	1a98      	subs	r0, r3, r2
 8000930:	6963      	ldr	r3, [r4, #20]
 8000932:	b2f6      	uxtb	r6, r6
 8000934:	4283      	cmp	r3, r0
 8000936:	4637      	mov	r7, r6
 8000938:	dc04      	bgt.n	8000944 <__swbuf_r+0x3a>
 800093a:	4621      	mov	r1, r4
 800093c:	4628      	mov	r0, r5
 800093e:	f000 fd3f 	bl	80013c0 <_fflush_r>
 8000942:	b9e0      	cbnz	r0, 800097e <__swbuf_r+0x74>
 8000944:	68a3      	ldr	r3, [r4, #8]
 8000946:	3b01      	subs	r3, #1
 8000948:	60a3      	str	r3, [r4, #8]
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	6022      	str	r2, [r4, #0]
 8000950:	701e      	strb	r6, [r3, #0]
 8000952:	6962      	ldr	r2, [r4, #20]
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	429a      	cmp	r2, r3
 8000958:	d004      	beq.n	8000964 <__swbuf_r+0x5a>
 800095a:	89a3      	ldrh	r3, [r4, #12]
 800095c:	07db      	lsls	r3, r3, #31
 800095e:	d506      	bpl.n	800096e <__swbuf_r+0x64>
 8000960:	2e0a      	cmp	r6, #10
 8000962:	d104      	bne.n	800096e <__swbuf_r+0x64>
 8000964:	4621      	mov	r1, r4
 8000966:	4628      	mov	r0, r5
 8000968:	f000 fd2a 	bl	80013c0 <_fflush_r>
 800096c:	b938      	cbnz	r0, 800097e <__swbuf_r+0x74>
 800096e:	4638      	mov	r0, r7
 8000970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000972:	4621      	mov	r1, r4
 8000974:	4628      	mov	r0, r5
 8000976:	f000 f805 	bl	8000984 <__swsetup_r>
 800097a:	2800      	cmp	r0, #0
 800097c:	d0d5      	beq.n	800092a <__swbuf_r+0x20>
 800097e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000982:	e7f4      	b.n	800096e <__swbuf_r+0x64>

08000984 <__swsetup_r>:
 8000984:	b538      	push	{r3, r4, r5, lr}
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <__swsetup_r+0xac>)
 8000988:	4605      	mov	r5, r0
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	460c      	mov	r4, r1
 800098e:	b118      	cbz	r0, 8000998 <__swsetup_r+0x14>
 8000990:	6a03      	ldr	r3, [r0, #32]
 8000992:	b90b      	cbnz	r3, 8000998 <__swsetup_r+0x14>
 8000994:	f7ff fed2 	bl	800073c <__sinit>
 8000998:	89a3      	ldrh	r3, [r4, #12]
 800099a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800099e:	0718      	lsls	r0, r3, #28
 80009a0:	d422      	bmi.n	80009e8 <__swsetup_r+0x64>
 80009a2:	06d9      	lsls	r1, r3, #27
 80009a4:	d407      	bmi.n	80009b6 <__swsetup_r+0x32>
 80009a6:	2309      	movs	r3, #9
 80009a8:	602b      	str	r3, [r5, #0]
 80009aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009ae:	81a3      	strh	r3, [r4, #12]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b4:	e034      	b.n	8000a20 <__swsetup_r+0x9c>
 80009b6:	0758      	lsls	r0, r3, #29
 80009b8:	d512      	bpl.n	80009e0 <__swsetup_r+0x5c>
 80009ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009bc:	b141      	cbz	r1, 80009d0 <__swsetup_r+0x4c>
 80009be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009c2:	4299      	cmp	r1, r3
 80009c4:	d002      	beq.n	80009cc <__swsetup_r+0x48>
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 f8b0 	bl	8000b2c <_free_r>
 80009cc:	2300      	movs	r3, #0
 80009ce:	6363      	str	r3, [r4, #52]	; 0x34
 80009d0:	89a3      	ldrh	r3, [r4, #12]
 80009d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009d6:	81a3      	strh	r3, [r4, #12]
 80009d8:	2300      	movs	r3, #0
 80009da:	6063      	str	r3, [r4, #4]
 80009dc:	6923      	ldr	r3, [r4, #16]
 80009de:	6023      	str	r3, [r4, #0]
 80009e0:	89a3      	ldrh	r3, [r4, #12]
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	81a3      	strh	r3, [r4, #12]
 80009e8:	6923      	ldr	r3, [r4, #16]
 80009ea:	b94b      	cbnz	r3, 8000a00 <__swsetup_r+0x7c>
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009f6:	d003      	beq.n	8000a00 <__swsetup_r+0x7c>
 80009f8:	4621      	mov	r1, r4
 80009fa:	4628      	mov	r0, r5
 80009fc:	f000 fd2e 	bl	800145c <__smakebuf_r>
 8000a00:	89a0      	ldrh	r0, [r4, #12]
 8000a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a06:	f010 0301 	ands.w	r3, r0, #1
 8000a0a:	d00a      	beq.n	8000a22 <__swsetup_r+0x9e>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60a3      	str	r3, [r4, #8]
 8000a10:	6963      	ldr	r3, [r4, #20]
 8000a12:	425b      	negs	r3, r3
 8000a14:	61a3      	str	r3, [r4, #24]
 8000a16:	6923      	ldr	r3, [r4, #16]
 8000a18:	b943      	cbnz	r3, 8000a2c <__swsetup_r+0xa8>
 8000a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a1e:	d1c4      	bne.n	80009aa <__swsetup_r+0x26>
 8000a20:	bd38      	pop	{r3, r4, r5, pc}
 8000a22:	0781      	lsls	r1, r0, #30
 8000a24:	bf58      	it	pl
 8000a26:	6963      	ldrpl	r3, [r4, #20]
 8000a28:	60a3      	str	r3, [r4, #8]
 8000a2a:	e7f4      	b.n	8000a16 <__swsetup_r+0x92>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	e7f7      	b.n	8000a20 <__swsetup_r+0x9c>
 8000a30:	20000058 	.word	0x20000058

08000a34 <memset>:
 8000a34:	4402      	add	r2, r0
 8000a36:	4603      	mov	r3, r0
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d100      	bne.n	8000a3e <memset+0xa>
 8000a3c:	4770      	bx	lr
 8000a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a42:	e7f9      	b.n	8000a38 <memset+0x4>

08000a44 <_close_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4d06      	ldr	r5, [pc, #24]	; (8000a60 <_close_r+0x1c>)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	602b      	str	r3, [r5, #0]
 8000a50:	f7ff fd57 	bl	8000502 <_close>
 8000a54:	1c43      	adds	r3, r0, #1
 8000a56:	d102      	bne.n	8000a5e <_close_r+0x1a>
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	b103      	cbz	r3, 8000a5e <_close_r+0x1a>
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	200001b8 	.word	0x200001b8

08000a64 <_lseek_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4d07      	ldr	r5, [pc, #28]	; (8000a84 <_lseek_r+0x20>)
 8000a68:	4604      	mov	r4, r0
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	602a      	str	r2, [r5, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	f7ff fd69 	bl	800054a <_lseek>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d102      	bne.n	8000a82 <_lseek_r+0x1e>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	b103      	cbz	r3, 8000a82 <_lseek_r+0x1e>
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001b8 	.word	0x200001b8

08000a88 <_read_r>:
 8000a88:	b538      	push	{r3, r4, r5, lr}
 8000a8a:	4d07      	ldr	r5, [pc, #28]	; (8000aa8 <_read_r+0x20>)
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	602a      	str	r2, [r5, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff fcfa 	bl	8000490 <_read>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d102      	bne.n	8000aa6 <_read_r+0x1e>
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	b103      	cbz	r3, 8000aa6 <_read_r+0x1e>
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	200001b8 	.word	0x200001b8

08000aac <_write_r>:
 8000aac:	b538      	push	{r3, r4, r5, lr}
 8000aae:	4d07      	ldr	r5, [pc, #28]	; (8000acc <_write_r+0x20>)
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	602a      	str	r2, [r5, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	f7ff fd05 	bl	80004ca <_write>
 8000ac0:	1c43      	adds	r3, r0, #1
 8000ac2:	d102      	bne.n	8000aca <_write_r+0x1e>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	b103      	cbz	r3, 8000aca <_write_r+0x1e>
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	200001b8 	.word	0x200001b8

08000ad0 <__errno>:
 8000ad0:	4b01      	ldr	r3, [pc, #4]	; (8000ad8 <__errno+0x8>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000058 	.word	0x20000058

08000adc <__libc_init_array>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4d0d      	ldr	r5, [pc, #52]	; (8000b14 <__libc_init_array+0x38>)
 8000ae0:	4c0d      	ldr	r4, [pc, #52]	; (8000b18 <__libc_init_array+0x3c>)
 8000ae2:	1b64      	subs	r4, r4, r5
 8000ae4:	10a4      	asrs	r4, r4, #2
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	42a6      	cmp	r6, r4
 8000aea:	d109      	bne.n	8000b00 <__libc_init_array+0x24>
 8000aec:	4d0b      	ldr	r5, [pc, #44]	; (8000b1c <__libc_init_array+0x40>)
 8000aee:	4c0c      	ldr	r4, [pc, #48]	; (8000b20 <__libc_init_array+0x44>)
 8000af0:	f000 fd22 	bl	8001538 <_init>
 8000af4:	1b64      	subs	r4, r4, r5
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	2600      	movs	r6, #0
 8000afa:	42a6      	cmp	r6, r4
 8000afc:	d105      	bne.n	8000b0a <__libc_init_array+0x2e>
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b04:	4798      	blx	r3
 8000b06:	3601      	adds	r6, #1
 8000b08:	e7ee      	b.n	8000ae8 <__libc_init_array+0xc>
 8000b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0e:	4798      	blx	r3
 8000b10:	3601      	adds	r6, #1
 8000b12:	e7f2      	b.n	8000afa <__libc_init_array+0x1e>
 8000b14:	08001608 	.word	0x08001608
 8000b18:	08001608 	.word	0x08001608
 8000b1c:	08001608 	.word	0x08001608
 8000b20:	0800160c 	.word	0x0800160c

08000b24 <__retarget_lock_init_recursive>:
 8000b24:	4770      	bx	lr

08000b26 <__retarget_lock_acquire_recursive>:
 8000b26:	4770      	bx	lr

08000b28 <__retarget_lock_release_recursive>:
 8000b28:	4770      	bx	lr
	...

08000b2c <_free_r>:
 8000b2c:	b538      	push	{r3, r4, r5, lr}
 8000b2e:	4605      	mov	r5, r0
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d041      	beq.n	8000bb8 <_free_r+0x8c>
 8000b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b38:	1f0c      	subs	r4, r1, #4
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bfb8      	it	lt
 8000b3e:	18e4      	addlt	r4, r4, r3
 8000b40:	f000 f8de 	bl	8000d00 <__malloc_lock>
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <_free_r+0x90>)
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	b933      	cbnz	r3, 8000b58 <_free_r+0x2c>
 8000b4a:	6063      	str	r3, [r4, #4]
 8000b4c:	6014      	str	r4, [r2, #0]
 8000b4e:	4628      	mov	r0, r5
 8000b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b54:	f000 b8da 	b.w	8000d0c <__malloc_unlock>
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d908      	bls.n	8000b6e <_free_r+0x42>
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	1821      	adds	r1, r4, r0
 8000b60:	428b      	cmp	r3, r1
 8000b62:	bf01      	itttt	eq
 8000b64:	6819      	ldreq	r1, [r3, #0]
 8000b66:	685b      	ldreq	r3, [r3, #4]
 8000b68:	1809      	addeq	r1, r1, r0
 8000b6a:	6021      	streq	r1, [r4, #0]
 8000b6c:	e7ed      	b.n	8000b4a <_free_r+0x1e>
 8000b6e:	461a      	mov	r2, r3
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	b10b      	cbz	r3, 8000b78 <_free_r+0x4c>
 8000b74:	42a3      	cmp	r3, r4
 8000b76:	d9fa      	bls.n	8000b6e <_free_r+0x42>
 8000b78:	6811      	ldr	r1, [r2, #0]
 8000b7a:	1850      	adds	r0, r2, r1
 8000b7c:	42a0      	cmp	r0, r4
 8000b7e:	d10b      	bne.n	8000b98 <_free_r+0x6c>
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	4401      	add	r1, r0
 8000b84:	1850      	adds	r0, r2, r1
 8000b86:	4283      	cmp	r3, r0
 8000b88:	6011      	str	r1, [r2, #0]
 8000b8a:	d1e0      	bne.n	8000b4e <_free_r+0x22>
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	6053      	str	r3, [r2, #4]
 8000b92:	4408      	add	r0, r1
 8000b94:	6010      	str	r0, [r2, #0]
 8000b96:	e7da      	b.n	8000b4e <_free_r+0x22>
 8000b98:	d902      	bls.n	8000ba0 <_free_r+0x74>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	602b      	str	r3, [r5, #0]
 8000b9e:	e7d6      	b.n	8000b4e <_free_r+0x22>
 8000ba0:	6820      	ldr	r0, [r4, #0]
 8000ba2:	1821      	adds	r1, r4, r0
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	bf04      	itt	eq
 8000ba8:	6819      	ldreq	r1, [r3, #0]
 8000baa:	685b      	ldreq	r3, [r3, #4]
 8000bac:	6063      	str	r3, [r4, #4]
 8000bae:	bf04      	itt	eq
 8000bb0:	1809      	addeq	r1, r1, r0
 8000bb2:	6021      	streq	r1, [r4, #0]
 8000bb4:	6054      	str	r4, [r2, #4]
 8000bb6:	e7ca      	b.n	8000b4e <_free_r+0x22>
 8000bb8:	bd38      	pop	{r3, r4, r5, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001c0 	.word	0x200001c0

08000bc0 <sbrk_aligned>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4e0e      	ldr	r6, [pc, #56]	; (8000bfc <sbrk_aligned+0x3c>)
 8000bc4:	460c      	mov	r4, r1
 8000bc6:	6831      	ldr	r1, [r6, #0]
 8000bc8:	4605      	mov	r5, r0
 8000bca:	b911      	cbnz	r1, 8000bd2 <sbrk_aligned+0x12>
 8000bcc:	f000 fca4 	bl	8001518 <_sbrk_r>
 8000bd0:	6030      	str	r0, [r6, #0]
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f000 fc9f 	bl	8001518 <_sbrk_r>
 8000bda:	1c43      	adds	r3, r0, #1
 8000bdc:	d00a      	beq.n	8000bf4 <sbrk_aligned+0x34>
 8000bde:	1cc4      	adds	r4, r0, #3
 8000be0:	f024 0403 	bic.w	r4, r4, #3
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	d007      	beq.n	8000bf8 <sbrk_aligned+0x38>
 8000be8:	1a21      	subs	r1, r4, r0
 8000bea:	4628      	mov	r0, r5
 8000bec:	f000 fc94 	bl	8001518 <_sbrk_r>
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	d101      	bne.n	8000bf8 <sbrk_aligned+0x38>
 8000bf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	200001c4 	.word	0x200001c4

08000c00 <_malloc_r>:
 8000c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c04:	1ccd      	adds	r5, r1, #3
 8000c06:	f025 0503 	bic.w	r5, r5, #3
 8000c0a:	3508      	adds	r5, #8
 8000c0c:	2d0c      	cmp	r5, #12
 8000c0e:	bf38      	it	cc
 8000c10:	250c      	movcc	r5, #12
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	4607      	mov	r7, r0
 8000c16:	db01      	blt.n	8000c1c <_malloc_r+0x1c>
 8000c18:	42a9      	cmp	r1, r5
 8000c1a:	d905      	bls.n	8000c28 <_malloc_r+0x28>
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	2600      	movs	r6, #0
 8000c22:	4630      	mov	r0, r6
 8000c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cfc <_malloc_r+0xfc>
 8000c2c:	f000 f868 	bl	8000d00 <__malloc_lock>
 8000c30:	f8d8 3000 	ldr.w	r3, [r8]
 8000c34:	461c      	mov	r4, r3
 8000c36:	bb5c      	cbnz	r4, 8000c90 <_malloc_r+0x90>
 8000c38:	4629      	mov	r1, r5
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	f7ff ffc0 	bl	8000bc0 <sbrk_aligned>
 8000c40:	1c43      	adds	r3, r0, #1
 8000c42:	4604      	mov	r4, r0
 8000c44:	d155      	bne.n	8000cf2 <_malloc_r+0xf2>
 8000c46:	f8d8 4000 	ldr.w	r4, [r8]
 8000c4a:	4626      	mov	r6, r4
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d145      	bne.n	8000cdc <_malloc_r+0xdc>
 8000c50:	2c00      	cmp	r4, #0
 8000c52:	d048      	beq.n	8000ce6 <_malloc_r+0xe6>
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	4631      	mov	r1, r6
 8000c58:	4638      	mov	r0, r7
 8000c5a:	eb04 0903 	add.w	r9, r4, r3
 8000c5e:	f000 fc5b 	bl	8001518 <_sbrk_r>
 8000c62:	4581      	cmp	r9, r0
 8000c64:	d13f      	bne.n	8000ce6 <_malloc_r+0xe6>
 8000c66:	6821      	ldr	r1, [r4, #0]
 8000c68:	1a6d      	subs	r5, r5, r1
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	4638      	mov	r0, r7
 8000c6e:	f7ff ffa7 	bl	8000bc0 <sbrk_aligned>
 8000c72:	3001      	adds	r0, #1
 8000c74:	d037      	beq.n	8000ce6 <_malloc_r+0xe6>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	442b      	add	r3, r5
 8000c7a:	6023      	str	r3, [r4, #0]
 8000c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d038      	beq.n	8000cf6 <_malloc_r+0xf6>
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	42a2      	cmp	r2, r4
 8000c88:	d12b      	bne.n	8000ce2 <_malloc_r+0xe2>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	e00f      	b.n	8000cb0 <_malloc_r+0xb0>
 8000c90:	6822      	ldr	r2, [r4, #0]
 8000c92:	1b52      	subs	r2, r2, r5
 8000c94:	d41f      	bmi.n	8000cd6 <_malloc_r+0xd6>
 8000c96:	2a0b      	cmp	r2, #11
 8000c98:	d917      	bls.n	8000cca <_malloc_r+0xca>
 8000c9a:	1961      	adds	r1, r4, r5
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	6025      	str	r5, [r4, #0]
 8000ca0:	bf18      	it	ne
 8000ca2:	6059      	strne	r1, [r3, #4]
 8000ca4:	6863      	ldr	r3, [r4, #4]
 8000ca6:	bf08      	it	eq
 8000ca8:	f8c8 1000 	streq.w	r1, [r8]
 8000cac:	5162      	str	r2, [r4, r5]
 8000cae:	604b      	str	r3, [r1, #4]
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	f104 060b 	add.w	r6, r4, #11
 8000cb6:	f000 f829 	bl	8000d0c <__malloc_unlock>
 8000cba:	f026 0607 	bic.w	r6, r6, #7
 8000cbe:	1d23      	adds	r3, r4, #4
 8000cc0:	1af2      	subs	r2, r6, r3
 8000cc2:	d0ae      	beq.n	8000c22 <_malloc_r+0x22>
 8000cc4:	1b9b      	subs	r3, r3, r6
 8000cc6:	50a3      	str	r3, [r4, r2]
 8000cc8:	e7ab      	b.n	8000c22 <_malloc_r+0x22>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	6862      	ldr	r2, [r4, #4]
 8000cce:	d1dd      	bne.n	8000c8c <_malloc_r+0x8c>
 8000cd0:	f8c8 2000 	str.w	r2, [r8]
 8000cd4:	e7ec      	b.n	8000cb0 <_malloc_r+0xb0>
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	6864      	ldr	r4, [r4, #4]
 8000cda:	e7ac      	b.n	8000c36 <_malloc_r+0x36>
 8000cdc:	4634      	mov	r4, r6
 8000cde:	6876      	ldr	r6, [r6, #4]
 8000ce0:	e7b4      	b.n	8000c4c <_malloc_r+0x4c>
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	e7cc      	b.n	8000c80 <_malloc_r+0x80>
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4638      	mov	r0, r7
 8000cec:	f000 f80e 	bl	8000d0c <__malloc_unlock>
 8000cf0:	e797      	b.n	8000c22 <_malloc_r+0x22>
 8000cf2:	6025      	str	r5, [r4, #0]
 8000cf4:	e7dc      	b.n	8000cb0 <_malloc_r+0xb0>
 8000cf6:	605b      	str	r3, [r3, #4]
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	bf00      	nop
 8000cfc:	200001c0 	.word	0x200001c0

08000d00 <__malloc_lock>:
 8000d00:	4801      	ldr	r0, [pc, #4]	; (8000d08 <__malloc_lock+0x8>)
 8000d02:	f7ff bf10 	b.w	8000b26 <__retarget_lock_acquire_recursive>
 8000d06:	bf00      	nop
 8000d08:	200001bc 	.word	0x200001bc

08000d0c <__malloc_unlock>:
 8000d0c:	4801      	ldr	r0, [pc, #4]	; (8000d14 <__malloc_unlock+0x8>)
 8000d0e:	f7ff bf0b 	b.w	8000b28 <__retarget_lock_release_recursive>
 8000d12:	bf00      	nop
 8000d14:	200001bc 	.word	0x200001bc

08000d18 <__sfputc_r>:
 8000d18:	6893      	ldr	r3, [r2, #8]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	b410      	push	{r4}
 8000d20:	6093      	str	r3, [r2, #8]
 8000d22:	da07      	bge.n	8000d34 <__sfputc_r+0x1c>
 8000d24:	6994      	ldr	r4, [r2, #24]
 8000d26:	42a3      	cmp	r3, r4
 8000d28:	db01      	blt.n	8000d2e <__sfputc_r+0x16>
 8000d2a:	290a      	cmp	r1, #10
 8000d2c:	d102      	bne.n	8000d34 <__sfputc_r+0x1c>
 8000d2e:	bc10      	pop	{r4}
 8000d30:	f7ff bdeb 	b.w	800090a <__swbuf_r>
 8000d34:	6813      	ldr	r3, [r2, #0]
 8000d36:	1c58      	adds	r0, r3, #1
 8000d38:	6010      	str	r0, [r2, #0]
 8000d3a:	7019      	strb	r1, [r3, #0]
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	bc10      	pop	{r4}
 8000d40:	4770      	bx	lr

08000d42 <__sfputs_r>:
 8000d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d44:	4606      	mov	r6, r0
 8000d46:	460f      	mov	r7, r1
 8000d48:	4614      	mov	r4, r2
 8000d4a:	18d5      	adds	r5, r2, r3
 8000d4c:	42ac      	cmp	r4, r5
 8000d4e:	d101      	bne.n	8000d54 <__sfputs_r+0x12>
 8000d50:	2000      	movs	r0, #0
 8000d52:	e007      	b.n	8000d64 <__sfputs_r+0x22>
 8000d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d58:	463a      	mov	r2, r7
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f7ff ffdc 	bl	8000d18 <__sfputc_r>
 8000d60:	1c43      	adds	r3, r0, #1
 8000d62:	d1f3      	bne.n	8000d4c <__sfputs_r+0xa>
 8000d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d68 <_vfiprintf_r>:
 8000d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d6c:	460d      	mov	r5, r1
 8000d6e:	b09d      	sub	sp, #116	; 0x74
 8000d70:	4614      	mov	r4, r2
 8000d72:	4698      	mov	r8, r3
 8000d74:	4606      	mov	r6, r0
 8000d76:	b118      	cbz	r0, 8000d80 <_vfiprintf_r+0x18>
 8000d78:	6a03      	ldr	r3, [r0, #32]
 8000d7a:	b90b      	cbnz	r3, 8000d80 <_vfiprintf_r+0x18>
 8000d7c:	f7ff fcde 	bl	800073c <__sinit>
 8000d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d82:	07d9      	lsls	r1, r3, #31
 8000d84:	d405      	bmi.n	8000d92 <_vfiprintf_r+0x2a>
 8000d86:	89ab      	ldrh	r3, [r5, #12]
 8000d88:	059a      	lsls	r2, r3, #22
 8000d8a:	d402      	bmi.n	8000d92 <_vfiprintf_r+0x2a>
 8000d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d8e:	f7ff feca 	bl	8000b26 <__retarget_lock_acquire_recursive>
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	071b      	lsls	r3, r3, #28
 8000d96:	d501      	bpl.n	8000d9c <_vfiprintf_r+0x34>
 8000d98:	692b      	ldr	r3, [r5, #16]
 8000d9a:	b99b      	cbnz	r3, 8000dc4 <_vfiprintf_r+0x5c>
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f7ff fdf0 	bl	8000984 <__swsetup_r>
 8000da4:	b170      	cbz	r0, 8000dc4 <_vfiprintf_r+0x5c>
 8000da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000da8:	07dc      	lsls	r4, r3, #31
 8000daa:	d504      	bpl.n	8000db6 <_vfiprintf_r+0x4e>
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db0:	b01d      	add	sp, #116	; 0x74
 8000db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000db6:	89ab      	ldrh	r3, [r5, #12]
 8000db8:	0598      	lsls	r0, r3, #22
 8000dba:	d4f7      	bmi.n	8000dac <_vfiprintf_r+0x44>
 8000dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dbe:	f7ff feb3 	bl	8000b28 <__retarget_lock_release_recursive>
 8000dc2:	e7f3      	b.n	8000dac <_vfiprintf_r+0x44>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8000dc8:	2320      	movs	r3, #32
 8000dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dd2:	2330      	movs	r3, #48	; 0x30
 8000dd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f88 <_vfiprintf_r+0x220>
 8000dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ddc:	f04f 0901 	mov.w	r9, #1
 8000de0:	4623      	mov	r3, r4
 8000de2:	469a      	mov	sl, r3
 8000de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000de8:	b10a      	cbz	r2, 8000dee <_vfiprintf_r+0x86>
 8000dea:	2a25      	cmp	r2, #37	; 0x25
 8000dec:	d1f9      	bne.n	8000de2 <_vfiprintf_r+0x7a>
 8000dee:	ebba 0b04 	subs.w	fp, sl, r4
 8000df2:	d00b      	beq.n	8000e0c <_vfiprintf_r+0xa4>
 8000df4:	465b      	mov	r3, fp
 8000df6:	4622      	mov	r2, r4
 8000df8:	4629      	mov	r1, r5
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	f7ff ffa1 	bl	8000d42 <__sfputs_r>
 8000e00:	3001      	adds	r0, #1
 8000e02:	f000 80a9 	beq.w	8000f58 <_vfiprintf_r+0x1f0>
 8000e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e08:	445a      	add	r2, fp
 8000e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8000e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80a1 	beq.w	8000f58 <_vfiprintf_r+0x1f0>
 8000e16:	2300      	movs	r3, #0
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e20:	f10a 0a01 	add.w	sl, sl, #1
 8000e24:	9304      	str	r3, [sp, #16]
 8000e26:	9307      	str	r3, [sp, #28]
 8000e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8000e2e:	4654      	mov	r4, sl
 8000e30:	2205      	movs	r2, #5
 8000e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e36:	4854      	ldr	r0, [pc, #336]	; (8000f88 <_vfiprintf_r+0x220>)
 8000e38:	f7ff f9ea 	bl	8000210 <memchr>
 8000e3c:	9a04      	ldr	r2, [sp, #16]
 8000e3e:	b9d8      	cbnz	r0, 8000e78 <_vfiprintf_r+0x110>
 8000e40:	06d1      	lsls	r1, r2, #27
 8000e42:	bf44      	itt	mi
 8000e44:	2320      	movmi	r3, #32
 8000e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e4a:	0713      	lsls	r3, r2, #28
 8000e4c:	bf44      	itt	mi
 8000e4e:	232b      	movmi	r3, #43	; 0x2b
 8000e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e54:	f89a 3000 	ldrb.w	r3, [sl]
 8000e58:	2b2a      	cmp	r3, #42	; 0x2a
 8000e5a:	d015      	beq.n	8000e88 <_vfiprintf_r+0x120>
 8000e5c:	9a07      	ldr	r2, [sp, #28]
 8000e5e:	4654      	mov	r4, sl
 8000e60:	2000      	movs	r0, #0
 8000e62:	f04f 0c0a 	mov.w	ip, #10
 8000e66:	4621      	mov	r1, r4
 8000e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e6c:	3b30      	subs	r3, #48	; 0x30
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	d94d      	bls.n	8000f0e <_vfiprintf_r+0x1a6>
 8000e72:	b1b0      	cbz	r0, 8000ea2 <_vfiprintf_r+0x13a>
 8000e74:	9207      	str	r2, [sp, #28]
 8000e76:	e014      	b.n	8000ea2 <_vfiprintf_r+0x13a>
 8000e78:	eba0 0308 	sub.w	r3, r0, r8
 8000e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	9304      	str	r3, [sp, #16]
 8000e84:	46a2      	mov	sl, r4
 8000e86:	e7d2      	b.n	8000e2e <_vfiprintf_r+0xc6>
 8000e88:	9b03      	ldr	r3, [sp, #12]
 8000e8a:	1d19      	adds	r1, r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	9103      	str	r1, [sp, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bfbb      	ittet	lt
 8000e94:	425b      	neglt	r3, r3
 8000e96:	f042 0202 	orrlt.w	r2, r2, #2
 8000e9a:	9307      	strge	r3, [sp, #28]
 8000e9c:	9307      	strlt	r3, [sp, #28]
 8000e9e:	bfb8      	it	lt
 8000ea0:	9204      	strlt	r2, [sp, #16]
 8000ea2:	7823      	ldrb	r3, [r4, #0]
 8000ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ea6:	d10c      	bne.n	8000ec2 <_vfiprintf_r+0x15a>
 8000ea8:	7863      	ldrb	r3, [r4, #1]
 8000eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8000eac:	d134      	bne.n	8000f18 <_vfiprintf_r+0x1b0>
 8000eae:	9b03      	ldr	r3, [sp, #12]
 8000eb0:	1d1a      	adds	r2, r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	9203      	str	r2, [sp, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bfb8      	it	lt
 8000eba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000ebe:	3402      	adds	r4, #2
 8000ec0:	9305      	str	r3, [sp, #20]
 8000ec2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f8c <_vfiprintf_r+0x224>
 8000ec6:	7821      	ldrb	r1, [r4, #0]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4650      	mov	r0, sl
 8000ecc:	f7ff f9a0 	bl	8000210 <memchr>
 8000ed0:	b138      	cbz	r0, 8000ee2 <_vfiprintf_r+0x17a>
 8000ed2:	9b04      	ldr	r3, [sp, #16]
 8000ed4:	eba0 000a 	sub.w	r0, r0, sl
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	4082      	lsls	r2, r0
 8000edc:	4313      	orrs	r3, r2
 8000ede:	3401      	adds	r4, #1
 8000ee0:	9304      	str	r3, [sp, #16]
 8000ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ee6:	482a      	ldr	r0, [pc, #168]	; (8000f90 <_vfiprintf_r+0x228>)
 8000ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000eec:	2206      	movs	r2, #6
 8000eee:	f7ff f98f 	bl	8000210 <memchr>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	d03f      	beq.n	8000f76 <_vfiprintf_r+0x20e>
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <_vfiprintf_r+0x22c>)
 8000ef8:	bb1b      	cbnz	r3, 8000f42 <_vfiprintf_r+0x1da>
 8000efa:	9b03      	ldr	r3, [sp, #12]
 8000efc:	3307      	adds	r3, #7
 8000efe:	f023 0307 	bic.w	r3, r3, #7
 8000f02:	3308      	adds	r3, #8
 8000f04:	9303      	str	r3, [sp, #12]
 8000f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f08:	443b      	add	r3, r7
 8000f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f0c:	e768      	b.n	8000de0 <_vfiprintf_r+0x78>
 8000f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f12:	460c      	mov	r4, r1
 8000f14:	2001      	movs	r0, #1
 8000f16:	e7a6      	b.n	8000e66 <_vfiprintf_r+0xfe>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	3401      	adds	r4, #1
 8000f1c:	9305      	str	r3, [sp, #20]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 0c0a 	mov.w	ip, #10
 8000f24:	4620      	mov	r0, r4
 8000f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f2a:	3a30      	subs	r2, #48	; 0x30
 8000f2c:	2a09      	cmp	r2, #9
 8000f2e:	d903      	bls.n	8000f38 <_vfiprintf_r+0x1d0>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0c6      	beq.n	8000ec2 <_vfiprintf_r+0x15a>
 8000f34:	9105      	str	r1, [sp, #20]
 8000f36:	e7c4      	b.n	8000ec2 <_vfiprintf_r+0x15a>
 8000f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e7f0      	b.n	8000f24 <_vfiprintf_r+0x1bc>
 8000f42:	ab03      	add	r3, sp, #12
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	462a      	mov	r2, r5
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_vfiprintf_r+0x230>)
 8000f4a:	a904      	add	r1, sp, #16
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4607      	mov	r7, r0
 8000f54:	1c78      	adds	r0, r7, #1
 8000f56:	d1d6      	bne.n	8000f06 <_vfiprintf_r+0x19e>
 8000f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f5a:	07d9      	lsls	r1, r3, #31
 8000f5c:	d405      	bmi.n	8000f6a <_vfiprintf_r+0x202>
 8000f5e:	89ab      	ldrh	r3, [r5, #12]
 8000f60:	059a      	lsls	r2, r3, #22
 8000f62:	d402      	bmi.n	8000f6a <_vfiprintf_r+0x202>
 8000f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f66:	f7ff fddf 	bl	8000b28 <__retarget_lock_release_recursive>
 8000f6a:	89ab      	ldrh	r3, [r5, #12]
 8000f6c:	065b      	lsls	r3, r3, #25
 8000f6e:	f53f af1d 	bmi.w	8000dac <_vfiprintf_r+0x44>
 8000f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f74:	e71c      	b.n	8000db0 <_vfiprintf_r+0x48>
 8000f76:	ab03      	add	r3, sp, #12
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	462a      	mov	r2, r5
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <_vfiprintf_r+0x230>)
 8000f7e:	a904      	add	r1, sp, #16
 8000f80:	4630      	mov	r0, r6
 8000f82:	f000 f879 	bl	8001078 <_printf_i>
 8000f86:	e7e4      	b.n	8000f52 <_vfiprintf_r+0x1ea>
 8000f88:	080015d5 	.word	0x080015d5
 8000f8c:	080015db 	.word	0x080015db
 8000f90:	080015df 	.word	0x080015df
 8000f94:	00000000 	.word	0x00000000
 8000f98:	08000d43 	.word	0x08000d43

08000f9c <_printf_common>:
 8000f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa0:	4616      	mov	r6, r2
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	688a      	ldr	r2, [r1, #8]
 8000fa6:	690b      	ldr	r3, [r1, #16]
 8000fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	bfb8      	it	lt
 8000fb0:	4613      	movlt	r3, r2
 8000fb2:	6033      	str	r3, [r6, #0]
 8000fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fb8:	4607      	mov	r7, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	b10a      	cbz	r2, 8000fc2 <_printf_common+0x26>
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	6033      	str	r3, [r6, #0]
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	0699      	lsls	r1, r3, #26
 8000fc6:	bf42      	ittt	mi
 8000fc8:	6833      	ldrmi	r3, [r6, #0]
 8000fca:	3302      	addmi	r3, #2
 8000fcc:	6033      	strmi	r3, [r6, #0]
 8000fce:	6825      	ldr	r5, [r4, #0]
 8000fd0:	f015 0506 	ands.w	r5, r5, #6
 8000fd4:	d106      	bne.n	8000fe4 <_printf_common+0x48>
 8000fd6:	f104 0a19 	add.w	sl, r4, #25
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	6832      	ldr	r2, [r6, #0]
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	42ab      	cmp	r3, r5
 8000fe2:	dc26      	bgt.n	8001032 <_printf_common+0x96>
 8000fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	bf18      	it	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	0692      	lsls	r2, r2, #26
 8000ff2:	d42b      	bmi.n	800104c <_printf_common+0xb0>
 8000ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	47c0      	blx	r8
 8000ffe:	3001      	adds	r0, #1
 8001000:	d01e      	beq.n	8001040 <_printf_common+0xa4>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	6922      	ldr	r2, [r4, #16]
 8001006:	f003 0306 	and.w	r3, r3, #6
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf02      	ittt	eq
 800100e:	68e5      	ldreq	r5, [r4, #12]
 8001010:	6833      	ldreq	r3, [r6, #0]
 8001012:	1aed      	subeq	r5, r5, r3
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	bf0c      	ite	eq
 8001018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800101c:	2500      	movne	r5, #0
 800101e:	4293      	cmp	r3, r2
 8001020:	bfc4      	itt	gt
 8001022:	1a9b      	subgt	r3, r3, r2
 8001024:	18ed      	addgt	r5, r5, r3
 8001026:	2600      	movs	r6, #0
 8001028:	341a      	adds	r4, #26
 800102a:	42b5      	cmp	r5, r6
 800102c:	d11a      	bne.n	8001064 <_printf_common+0xc8>
 800102e:	2000      	movs	r0, #0
 8001030:	e008      	b.n	8001044 <_printf_common+0xa8>
 8001032:	2301      	movs	r3, #1
 8001034:	4652      	mov	r2, sl
 8001036:	4649      	mov	r1, r9
 8001038:	4638      	mov	r0, r7
 800103a:	47c0      	blx	r8
 800103c:	3001      	adds	r0, #1
 800103e:	d103      	bne.n	8001048 <_printf_common+0xac>
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001048:	3501      	adds	r5, #1
 800104a:	e7c6      	b.n	8000fda <_printf_common+0x3e>
 800104c:	18e1      	adds	r1, r4, r3
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	2030      	movs	r0, #48	; 0x30
 8001052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001056:	4422      	add	r2, r4
 8001058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800105c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001060:	3302      	adds	r3, #2
 8001062:	e7c7      	b.n	8000ff4 <_printf_common+0x58>
 8001064:	2301      	movs	r3, #1
 8001066:	4622      	mov	r2, r4
 8001068:	4649      	mov	r1, r9
 800106a:	4638      	mov	r0, r7
 800106c:	47c0      	blx	r8
 800106e:	3001      	adds	r0, #1
 8001070:	d0e6      	beq.n	8001040 <_printf_common+0xa4>
 8001072:	3601      	adds	r6, #1
 8001074:	e7d9      	b.n	800102a <_printf_common+0x8e>
	...

08001078 <_printf_i>:
 8001078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	7e0f      	ldrb	r7, [r1, #24]
 800107e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001080:	2f78      	cmp	r7, #120	; 0x78
 8001082:	4691      	mov	r9, r2
 8001084:	4680      	mov	r8, r0
 8001086:	460c      	mov	r4, r1
 8001088:	469a      	mov	sl, r3
 800108a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800108e:	d807      	bhi.n	80010a0 <_printf_i+0x28>
 8001090:	2f62      	cmp	r7, #98	; 0x62
 8001092:	d80a      	bhi.n	80010aa <_printf_i+0x32>
 8001094:	2f00      	cmp	r7, #0
 8001096:	f000 80d4 	beq.w	8001242 <_printf_i+0x1ca>
 800109a:	2f58      	cmp	r7, #88	; 0x58
 800109c:	f000 80c0 	beq.w	8001220 <_printf_i+0x1a8>
 80010a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010a8:	e03a      	b.n	8001120 <_printf_i+0xa8>
 80010aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010ae:	2b15      	cmp	r3, #21
 80010b0:	d8f6      	bhi.n	80010a0 <_printf_i+0x28>
 80010b2:	a101      	add	r1, pc, #4	; (adr r1, 80010b8 <_printf_i+0x40>)
 80010b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010b8:	08001111 	.word	0x08001111
 80010bc:	08001125 	.word	0x08001125
 80010c0:	080010a1 	.word	0x080010a1
 80010c4:	080010a1 	.word	0x080010a1
 80010c8:	080010a1 	.word	0x080010a1
 80010cc:	080010a1 	.word	0x080010a1
 80010d0:	08001125 	.word	0x08001125
 80010d4:	080010a1 	.word	0x080010a1
 80010d8:	080010a1 	.word	0x080010a1
 80010dc:	080010a1 	.word	0x080010a1
 80010e0:	080010a1 	.word	0x080010a1
 80010e4:	08001229 	.word	0x08001229
 80010e8:	08001151 	.word	0x08001151
 80010ec:	080011e3 	.word	0x080011e3
 80010f0:	080010a1 	.word	0x080010a1
 80010f4:	080010a1 	.word	0x080010a1
 80010f8:	0800124b 	.word	0x0800124b
 80010fc:	080010a1 	.word	0x080010a1
 8001100:	08001151 	.word	0x08001151
 8001104:	080010a1 	.word	0x080010a1
 8001108:	080010a1 	.word	0x080010a1
 800110c:	080011eb 	.word	0x080011eb
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	602a      	str	r2, [r5, #0]
 8001118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800111c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001120:	2301      	movs	r3, #1
 8001122:	e09f      	b.n	8001264 <_printf_i+0x1ec>
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	0607      	lsls	r7, r0, #24
 800112a:	f103 0104 	add.w	r1, r3, #4
 800112e:	6029      	str	r1, [r5, #0]
 8001130:	d501      	bpl.n	8001136 <_printf_i+0xbe>
 8001132:	681e      	ldr	r6, [r3, #0]
 8001134:	e003      	b.n	800113e <_printf_i+0xc6>
 8001136:	0646      	lsls	r6, r0, #25
 8001138:	d5fb      	bpl.n	8001132 <_printf_i+0xba>
 800113a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800113e:	2e00      	cmp	r6, #0
 8001140:	da03      	bge.n	800114a <_printf_i+0xd2>
 8001142:	232d      	movs	r3, #45	; 0x2d
 8001144:	4276      	negs	r6, r6
 8001146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800114a:	485a      	ldr	r0, [pc, #360]	; (80012b4 <_printf_i+0x23c>)
 800114c:	230a      	movs	r3, #10
 800114e:	e012      	b.n	8001176 <_printf_i+0xfe>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	6820      	ldr	r0, [r4, #0]
 8001154:	1d19      	adds	r1, r3, #4
 8001156:	6029      	str	r1, [r5, #0]
 8001158:	0605      	lsls	r5, r0, #24
 800115a:	d501      	bpl.n	8001160 <_printf_i+0xe8>
 800115c:	681e      	ldr	r6, [r3, #0]
 800115e:	e002      	b.n	8001166 <_printf_i+0xee>
 8001160:	0641      	lsls	r1, r0, #25
 8001162:	d5fb      	bpl.n	800115c <_printf_i+0xe4>
 8001164:	881e      	ldrh	r6, [r3, #0]
 8001166:	4853      	ldr	r0, [pc, #332]	; (80012b4 <_printf_i+0x23c>)
 8001168:	2f6f      	cmp	r7, #111	; 0x6f
 800116a:	bf0c      	ite	eq
 800116c:	2308      	moveq	r3, #8
 800116e:	230a      	movne	r3, #10
 8001170:	2100      	movs	r1, #0
 8001172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001176:	6865      	ldr	r5, [r4, #4]
 8001178:	60a5      	str	r5, [r4, #8]
 800117a:	2d00      	cmp	r5, #0
 800117c:	bfa2      	ittt	ge
 800117e:	6821      	ldrge	r1, [r4, #0]
 8001180:	f021 0104 	bicge.w	r1, r1, #4
 8001184:	6021      	strge	r1, [r4, #0]
 8001186:	b90e      	cbnz	r6, 800118c <_printf_i+0x114>
 8001188:	2d00      	cmp	r5, #0
 800118a:	d04b      	beq.n	8001224 <_printf_i+0x1ac>
 800118c:	4615      	mov	r5, r2
 800118e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001192:	fb03 6711 	mls	r7, r3, r1, r6
 8001196:	5dc7      	ldrb	r7, [r0, r7]
 8001198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800119c:	4637      	mov	r7, r6
 800119e:	42bb      	cmp	r3, r7
 80011a0:	460e      	mov	r6, r1
 80011a2:	d9f4      	bls.n	800118e <_printf_i+0x116>
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d10b      	bne.n	80011c0 <_printf_i+0x148>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	d508      	bpl.n	80011c0 <_printf_i+0x148>
 80011ae:	6923      	ldr	r3, [r4, #16]
 80011b0:	6861      	ldr	r1, [r4, #4]
 80011b2:	4299      	cmp	r1, r3
 80011b4:	bfde      	ittt	le
 80011b6:	2330      	movle	r3, #48	; 0x30
 80011b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80011c0:	1b52      	subs	r2, r2, r5
 80011c2:	6122      	str	r2, [r4, #16]
 80011c4:	f8cd a000 	str.w	sl, [sp]
 80011c8:	464b      	mov	r3, r9
 80011ca:	aa03      	add	r2, sp, #12
 80011cc:	4621      	mov	r1, r4
 80011ce:	4640      	mov	r0, r8
 80011d0:	f7ff fee4 	bl	8000f9c <_printf_common>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d14a      	bne.n	800126e <_printf_i+0x1f6>
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011dc:	b004      	add	sp, #16
 80011de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	4833      	ldr	r0, [pc, #204]	; (80012b8 <_printf_i+0x240>)
 80011ec:	2778      	movs	r7, #120	; 0x78
 80011ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	6829      	ldr	r1, [r5, #0]
 80011f6:	061f      	lsls	r7, r3, #24
 80011f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80011fc:	d402      	bmi.n	8001204 <_printf_i+0x18c>
 80011fe:	065f      	lsls	r7, r3, #25
 8001200:	bf48      	it	mi
 8001202:	b2b6      	uxthmi	r6, r6
 8001204:	07df      	lsls	r7, r3, #31
 8001206:	bf48      	it	mi
 8001208:	f043 0320 	orrmi.w	r3, r3, #32
 800120c:	6029      	str	r1, [r5, #0]
 800120e:	bf48      	it	mi
 8001210:	6023      	strmi	r3, [r4, #0]
 8001212:	b91e      	cbnz	r6, 800121c <_printf_i+0x1a4>
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f023 0320 	bic.w	r3, r3, #32
 800121a:	6023      	str	r3, [r4, #0]
 800121c:	2310      	movs	r3, #16
 800121e:	e7a7      	b.n	8001170 <_printf_i+0xf8>
 8001220:	4824      	ldr	r0, [pc, #144]	; (80012b4 <_printf_i+0x23c>)
 8001222:	e7e4      	b.n	80011ee <_printf_i+0x176>
 8001224:	4615      	mov	r5, r2
 8001226:	e7bd      	b.n	80011a4 <_printf_i+0x12c>
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	6826      	ldr	r6, [r4, #0]
 800122c:	6961      	ldr	r1, [r4, #20]
 800122e:	1d18      	adds	r0, r3, #4
 8001230:	6028      	str	r0, [r5, #0]
 8001232:	0635      	lsls	r5, r6, #24
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	d501      	bpl.n	800123c <_printf_i+0x1c4>
 8001238:	6019      	str	r1, [r3, #0]
 800123a:	e002      	b.n	8001242 <_printf_i+0x1ca>
 800123c:	0670      	lsls	r0, r6, #25
 800123e:	d5fb      	bpl.n	8001238 <_printf_i+0x1c0>
 8001240:	8019      	strh	r1, [r3, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	6123      	str	r3, [r4, #16]
 8001246:	4615      	mov	r5, r2
 8001248:	e7bc      	b.n	80011c4 <_printf_i+0x14c>
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	602a      	str	r2, [r5, #0]
 8001250:	681d      	ldr	r5, [r3, #0]
 8001252:	6862      	ldr	r2, [r4, #4]
 8001254:	2100      	movs	r1, #0
 8001256:	4628      	mov	r0, r5
 8001258:	f7fe ffda 	bl	8000210 <memchr>
 800125c:	b108      	cbz	r0, 8001262 <_printf_i+0x1ea>
 800125e:	1b40      	subs	r0, r0, r5
 8001260:	6060      	str	r0, [r4, #4]
 8001262:	6863      	ldr	r3, [r4, #4]
 8001264:	6123      	str	r3, [r4, #16]
 8001266:	2300      	movs	r3, #0
 8001268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800126c:	e7aa      	b.n	80011c4 <_printf_i+0x14c>
 800126e:	6923      	ldr	r3, [r4, #16]
 8001270:	462a      	mov	r2, r5
 8001272:	4649      	mov	r1, r9
 8001274:	4640      	mov	r0, r8
 8001276:	47d0      	blx	sl
 8001278:	3001      	adds	r0, #1
 800127a:	d0ad      	beq.n	80011d8 <_printf_i+0x160>
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	079b      	lsls	r3, r3, #30
 8001280:	d413      	bmi.n	80012aa <_printf_i+0x232>
 8001282:	68e0      	ldr	r0, [r4, #12]
 8001284:	9b03      	ldr	r3, [sp, #12]
 8001286:	4298      	cmp	r0, r3
 8001288:	bfb8      	it	lt
 800128a:	4618      	movlt	r0, r3
 800128c:	e7a6      	b.n	80011dc <_printf_i+0x164>
 800128e:	2301      	movs	r3, #1
 8001290:	4632      	mov	r2, r6
 8001292:	4649      	mov	r1, r9
 8001294:	4640      	mov	r0, r8
 8001296:	47d0      	blx	sl
 8001298:	3001      	adds	r0, #1
 800129a:	d09d      	beq.n	80011d8 <_printf_i+0x160>
 800129c:	3501      	adds	r5, #1
 800129e:	68e3      	ldr	r3, [r4, #12]
 80012a0:	9903      	ldr	r1, [sp, #12]
 80012a2:	1a5b      	subs	r3, r3, r1
 80012a4:	42ab      	cmp	r3, r5
 80012a6:	dcf2      	bgt.n	800128e <_printf_i+0x216>
 80012a8:	e7eb      	b.n	8001282 <_printf_i+0x20a>
 80012aa:	2500      	movs	r5, #0
 80012ac:	f104 0619 	add.w	r6, r4, #25
 80012b0:	e7f5      	b.n	800129e <_printf_i+0x226>
 80012b2:	bf00      	nop
 80012b4:	080015e6 	.word	0x080015e6
 80012b8:	080015f7 	.word	0x080015f7

080012bc <__sflush_r>:
 80012bc:	898a      	ldrh	r2, [r1, #12]
 80012be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c0:	4605      	mov	r5, r0
 80012c2:	0710      	lsls	r0, r2, #28
 80012c4:	460c      	mov	r4, r1
 80012c6:	d457      	bmi.n	8001378 <__sflush_r+0xbc>
 80012c8:	684b      	ldr	r3, [r1, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dc04      	bgt.n	80012d8 <__sflush_r+0x1c>
 80012ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dc01      	bgt.n	80012d8 <__sflush_r+0x1c>
 80012d4:	2000      	movs	r0, #0
 80012d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012da:	2e00      	cmp	r6, #0
 80012dc:	d0fa      	beq.n	80012d4 <__sflush_r+0x18>
 80012de:	2300      	movs	r3, #0
 80012e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012e4:	682f      	ldr	r7, [r5, #0]
 80012e6:	6a21      	ldr	r1, [r4, #32]
 80012e8:	602b      	str	r3, [r5, #0]
 80012ea:	d032      	beq.n	8001352 <__sflush_r+0x96>
 80012ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ee:	89a3      	ldrh	r3, [r4, #12]
 80012f0:	075a      	lsls	r2, r3, #29
 80012f2:	d505      	bpl.n	8001300 <__sflush_r+0x44>
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	1ac0      	subs	r0, r0, r3
 80012f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012fa:	b10b      	cbz	r3, 8001300 <__sflush_r+0x44>
 80012fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fe:	1ac0      	subs	r0, r0, r3
 8001300:	2300      	movs	r3, #0
 8001302:	4602      	mov	r2, r0
 8001304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001306:	6a21      	ldr	r1, [r4, #32]
 8001308:	4628      	mov	r0, r5
 800130a:	47b0      	blx	r6
 800130c:	1c43      	adds	r3, r0, #1
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	d106      	bne.n	8001320 <__sflush_r+0x64>
 8001312:	6829      	ldr	r1, [r5, #0]
 8001314:	291d      	cmp	r1, #29
 8001316:	d82b      	bhi.n	8001370 <__sflush_r+0xb4>
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <__sflush_r+0x100>)
 800131a:	410a      	asrs	r2, r1
 800131c:	07d6      	lsls	r6, r2, #31
 800131e:	d427      	bmi.n	8001370 <__sflush_r+0xb4>
 8001320:	2200      	movs	r2, #0
 8001322:	6062      	str	r2, [r4, #4]
 8001324:	04d9      	lsls	r1, r3, #19
 8001326:	6922      	ldr	r2, [r4, #16]
 8001328:	6022      	str	r2, [r4, #0]
 800132a:	d504      	bpl.n	8001336 <__sflush_r+0x7a>
 800132c:	1c42      	adds	r2, r0, #1
 800132e:	d101      	bne.n	8001334 <__sflush_r+0x78>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	b903      	cbnz	r3, 8001336 <__sflush_r+0x7a>
 8001334:	6560      	str	r0, [r4, #84]	; 0x54
 8001336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001338:	602f      	str	r7, [r5, #0]
 800133a:	2900      	cmp	r1, #0
 800133c:	d0ca      	beq.n	80012d4 <__sflush_r+0x18>
 800133e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001342:	4299      	cmp	r1, r3
 8001344:	d002      	beq.n	800134c <__sflush_r+0x90>
 8001346:	4628      	mov	r0, r5
 8001348:	f7ff fbf0 	bl	8000b2c <_free_r>
 800134c:	2000      	movs	r0, #0
 800134e:	6360      	str	r0, [r4, #52]	; 0x34
 8001350:	e7c1      	b.n	80012d6 <__sflush_r+0x1a>
 8001352:	2301      	movs	r3, #1
 8001354:	4628      	mov	r0, r5
 8001356:	47b0      	blx	r6
 8001358:	1c41      	adds	r1, r0, #1
 800135a:	d1c8      	bne.n	80012ee <__sflush_r+0x32>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0c5      	beq.n	80012ee <__sflush_r+0x32>
 8001362:	2b1d      	cmp	r3, #29
 8001364:	d001      	beq.n	800136a <__sflush_r+0xae>
 8001366:	2b16      	cmp	r3, #22
 8001368:	d101      	bne.n	800136e <__sflush_r+0xb2>
 800136a:	602f      	str	r7, [r5, #0]
 800136c:	e7b2      	b.n	80012d4 <__sflush_r+0x18>
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001374:	81a3      	strh	r3, [r4, #12]
 8001376:	e7ae      	b.n	80012d6 <__sflush_r+0x1a>
 8001378:	690f      	ldr	r7, [r1, #16]
 800137a:	2f00      	cmp	r7, #0
 800137c:	d0aa      	beq.n	80012d4 <__sflush_r+0x18>
 800137e:	0793      	lsls	r3, r2, #30
 8001380:	680e      	ldr	r6, [r1, #0]
 8001382:	bf08      	it	eq
 8001384:	694b      	ldreq	r3, [r1, #20]
 8001386:	600f      	str	r7, [r1, #0]
 8001388:	bf18      	it	ne
 800138a:	2300      	movne	r3, #0
 800138c:	1bf6      	subs	r6, r6, r7
 800138e:	608b      	str	r3, [r1, #8]
 8001390:	2e00      	cmp	r6, #0
 8001392:	dd9f      	ble.n	80012d4 <__sflush_r+0x18>
 8001394:	6a21      	ldr	r1, [r4, #32]
 8001396:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800139a:	4633      	mov	r3, r6
 800139c:	463a      	mov	r2, r7
 800139e:	4628      	mov	r0, r5
 80013a0:	47e0      	blx	ip
 80013a2:	2800      	cmp	r0, #0
 80013a4:	dc06      	bgt.n	80013b4 <__sflush_r+0xf8>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b2:	e790      	b.n	80012d6 <__sflush_r+0x1a>
 80013b4:	4407      	add	r7, r0
 80013b6:	1a36      	subs	r6, r6, r0
 80013b8:	e7ea      	b.n	8001390 <__sflush_r+0xd4>
 80013ba:	bf00      	nop
 80013bc:	dfbffffe 	.word	0xdfbffffe

080013c0 <_fflush_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	4605      	mov	r5, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	b913      	cbnz	r3, 80013d0 <_fflush_r+0x10>
 80013ca:	2500      	movs	r5, #0
 80013cc:	4628      	mov	r0, r5
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	b118      	cbz	r0, 80013da <_fflush_r+0x1a>
 80013d2:	6a03      	ldr	r3, [r0, #32]
 80013d4:	b90b      	cbnz	r3, 80013da <_fflush_r+0x1a>
 80013d6:	f7ff f9b1 	bl	800073c <__sinit>
 80013da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f3      	beq.n	80013ca <_fflush_r+0xa>
 80013e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013e4:	07d0      	lsls	r0, r2, #31
 80013e6:	d404      	bmi.n	80013f2 <_fflush_r+0x32>
 80013e8:	0599      	lsls	r1, r3, #22
 80013ea:	d402      	bmi.n	80013f2 <_fflush_r+0x32>
 80013ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ee:	f7ff fb9a 	bl	8000b26 <__retarget_lock_acquire_recursive>
 80013f2:	4628      	mov	r0, r5
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff ff61 	bl	80012bc <__sflush_r>
 80013fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013fc:	07da      	lsls	r2, r3, #31
 80013fe:	4605      	mov	r5, r0
 8001400:	d4e4      	bmi.n	80013cc <_fflush_r+0xc>
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	059b      	lsls	r3, r3, #22
 8001406:	d4e1      	bmi.n	80013cc <_fflush_r+0xc>
 8001408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140a:	f7ff fb8d 	bl	8000b28 <__retarget_lock_release_recursive>
 800140e:	e7dd      	b.n	80013cc <_fflush_r+0xc>

08001410 <__swhatbuf_r>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	460c      	mov	r4, r1
 8001414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001418:	2900      	cmp	r1, #0
 800141a:	b096      	sub	sp, #88	; 0x58
 800141c:	4615      	mov	r5, r2
 800141e:	461e      	mov	r6, r3
 8001420:	da0d      	bge.n	800143e <__swhatbuf_r+0x2e>
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	bf0c      	ite	eq
 800142e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001432:	2340      	movne	r3, #64	; 0x40
 8001434:	2000      	movs	r0, #0
 8001436:	6031      	str	r1, [r6, #0]
 8001438:	602b      	str	r3, [r5, #0]
 800143a:	b016      	add	sp, #88	; 0x58
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	466a      	mov	r2, sp
 8001440:	f000 f848 	bl	80014d4 <_fstat_r>
 8001444:	2800      	cmp	r0, #0
 8001446:	dbec      	blt.n	8001422 <__swhatbuf_r+0x12>
 8001448:	9901      	ldr	r1, [sp, #4]
 800144a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800144e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001452:	4259      	negs	r1, r3
 8001454:	4159      	adcs	r1, r3
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	e7eb      	b.n	8001434 <__swhatbuf_r+0x24>

0800145c <__smakebuf_r>:
 800145c:	898b      	ldrh	r3, [r1, #12]
 800145e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001460:	079d      	lsls	r5, r3, #30
 8001462:	4606      	mov	r6, r0
 8001464:	460c      	mov	r4, r1
 8001466:	d507      	bpl.n	8001478 <__smakebuf_r+0x1c>
 8001468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	6123      	str	r3, [r4, #16]
 8001470:	2301      	movs	r3, #1
 8001472:	6163      	str	r3, [r4, #20]
 8001474:	b002      	add	sp, #8
 8001476:	bd70      	pop	{r4, r5, r6, pc}
 8001478:	ab01      	add	r3, sp, #4
 800147a:	466a      	mov	r2, sp
 800147c:	f7ff ffc8 	bl	8001410 <__swhatbuf_r>
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	4605      	mov	r5, r0
 8001484:	4630      	mov	r0, r6
 8001486:	f7ff fbbb 	bl	8000c00 <_malloc_r>
 800148a:	b948      	cbnz	r0, 80014a0 <__smakebuf_r+0x44>
 800148c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001490:	059a      	lsls	r2, r3, #22
 8001492:	d4ef      	bmi.n	8001474 <__smakebuf_r+0x18>
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	81a3      	strh	r3, [r4, #12]
 800149e:	e7e3      	b.n	8001468 <__smakebuf_r+0xc>
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	6020      	str	r0, [r4, #0]
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	81a3      	strh	r3, [r4, #12]
 80014aa:	9b00      	ldr	r3, [sp, #0]
 80014ac:	6163      	str	r3, [r4, #20]
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	6120      	str	r0, [r4, #16]
 80014b2:	b15b      	cbz	r3, 80014cc <__smakebuf_r+0x70>
 80014b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014b8:	4630      	mov	r0, r6
 80014ba:	f000 f81d 	bl	80014f8 <_isatty_r>
 80014be:	b128      	cbz	r0, 80014cc <__smakebuf_r+0x70>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	81a3      	strh	r3, [r4, #12]
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	431d      	orrs	r5, r3
 80014d0:	81a5      	strh	r5, [r4, #12]
 80014d2:	e7cf      	b.n	8001474 <__smakebuf_r+0x18>

080014d4 <_fstat_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d07      	ldr	r5, [pc, #28]	; (80014f4 <_fstat_r+0x20>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	602b      	str	r3, [r5, #0]
 80014e2:	f7ff f819 	bl	8000518 <_fstat>
 80014e6:	1c43      	adds	r3, r0, #1
 80014e8:	d102      	bne.n	80014f0 <_fstat_r+0x1c>
 80014ea:	682b      	ldr	r3, [r5, #0]
 80014ec:	b103      	cbz	r3, 80014f0 <_fstat_r+0x1c>
 80014ee:	6023      	str	r3, [r4, #0]
 80014f0:	bd38      	pop	{r3, r4, r5, pc}
 80014f2:	bf00      	nop
 80014f4:	200001b8 	.word	0x200001b8

080014f8 <_isatty_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	4d06      	ldr	r5, [pc, #24]	; (8001514 <_isatty_r+0x1c>)
 80014fc:	2300      	movs	r3, #0
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	602b      	str	r3, [r5, #0]
 8001504:	f7ff f817 	bl	8000536 <_isatty>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_isatty_r+0x1a>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	b103      	cbz	r3, 8001512 <_isatty_r+0x1a>
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	200001b8 	.word	0x200001b8

08001518 <_sbrk_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d06      	ldr	r5, [pc, #24]	; (8001534 <_sbrk_r+0x1c>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f7ff f81e 	bl	8000564 <_sbrk>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d102      	bne.n	8001532 <_sbrk_r+0x1a>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	b103      	cbz	r3, 8001532 <_sbrk_r+0x1a>
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	200001b8 	.word	0x200001b8

08001538 <_init>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr

08001544 <_fini>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	bf00      	nop
 8001548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154a:	bc08      	pop	{r3}
 800154c:	469e      	mov	lr, r3
 800154e:	4770      	bx	lr
