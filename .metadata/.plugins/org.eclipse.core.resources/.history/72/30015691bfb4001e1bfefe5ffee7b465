/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
 * Create 4 Tasks that are Scheduled in a Round Robin
 * Using the Systick handler / PendSV Handler as the Scheduler.
 * Using 2 Stack Pointers: PSP in Thread Mode for the Tasks, and MSP in Handler Mode for the Scheduler
 * The Scheduler and Each Task will have its own Private Stack on the SRAM
 * Remember that on ARM Cortex-M Processor the Stack utilizes the Full Descending Method
 *
 * During the Context Switches Triggered by the Systick Timer every 1ms:
 * 	The Processor already pushes Registers 0-3, 12, LR, PC, and PSR
 * 	We just have to:
 * 		push R4-R11 (for its context) and the Stack Pointer
 * 		Switch the Stack Pointer
 * 		Pop R4-R11 for the new context
 *
 * Systick Timer Count Value Calculations:
 * 	HSI Processor Clock of STM32F446RE = 16MHz
 * 	Systick timer count clock = 16MHz
 * 	1ms is 1KHz in Frequency Domain
 * 	Using a Divisor (Reload Value) of 16,000 gets us to 1KHz
 */



// Prototype of Task Handlers
void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack);

void init_systick_timer(uint32_t tick_hz);



// Stack Memory Calculations for 1kb each
#define SIZE_TASK_STACK			1024U
#define SIZE_SCHEDULER_STACK	1024U

#define SRAM_START				0x20000000U
#define SIZE_SRAM				((128) * (1024))
#define SRAM_END				((SRAM_START) + (SIZE_SRAM))

#define T1_STACK_START			SRAM_END
#define T2_STACK_START			((T1_STACK_START) - (SIZE_TASK_STACK))
#define T3_STACK_START			((T2_STACK_START) - (SIZE_TASK_STACK))
#define T4_STACK_START			((T3_STACK_START) - (SIZE_TASK_STACK))
#define SCHEDULER_STACK_START	((T4_STACK_START) - (SIZE_SCHEDULER_STACK))

#define TICK_HZ					1000U
#define HSI_CLOCK				16000000U
#define SYSTICK_TIMER_CLOCK		HSI_CLOCK



int main(void)
{

	init_scheduler_stack(SCHEDULER_STACK_START);

	init_systick_timer(TICK_HZ);

    /* Loop forever */
	for(;;);
}



void task1_handler(void){

	while(1){
		printf("Task1\n");
	}
}


void task2_handler(void){

	while(1){
		printf("Task2\n");
	}
}


void task3_handler(void){

	while(1){
		printf("Task3\n");
	}
}


void task4_handler(void){

	while(1){
		printf("Task4\n");
	}
}



void init_systick_timer(uint32_t tick_hz){

	// Count Value Calculation
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
	uint32_t count_value = (SYSTICK_TIMER_CLOCK / tick_hz) - 1;
	*pSRVR &= ~(0x00FFFFFFFF); // Clear the Register, only 24 bits are used
	*pSRVR |= count_value; // Load the Desired Reload Value

	// Configuration
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
	*pSCSR |= (1 << 1); // Enable SysTick Exception Request
	*pSCSR |= (1 << 2); // Use Processor Clock as Source
	*pSCSR |= (1 << 0); // Enables the Counter
}

// To change the Stack Pointer it has to be done in Assembly
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){

	// Changes MSP to scheduler_top_of_stack
	__asm volatile("MSR MSP,%0":: "r"(scheduler_top_of_stack): );
	__asm volatile("BX LR"); // Returns back to main

}


void SysTick_Handler(void){

}



