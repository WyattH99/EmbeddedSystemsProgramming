/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>


#define SRAM_START  0x20000000U
#define SRAM_SIZE   (128 * 1024) //128kb
#define SRAM_END    ((SRAM_START) + (SRAM_SIZE))
#define STACK_START SRAM_END

#define STACK_MSP_START STACK_START
#define STACK_MSP_END   STACK_MSP_START + 512 // Half of the 1024 size of Stack
#define STACK_PSP_START STACK_MSP_END

int fun_add(int a, int b, int c, int d){
	return a+b+c+d;
}

// __attribute__((naked)) tells the compiler that the function will control the Stack Pointer
// and not to clean up the function with the Epiloge and Prologe
__attribute__((naked)) void change_sp_to_psp(void){
	// Initialize the PSP
	__asm volatile("LDR R0,=STACK_PSP_START");
	__asm volatile("MSR PSP,R0");
	// Use the Control Register to change the SP to PSP by setting the SPSEL bit to 1
	__asm volatile("MOV R0,#0X02");
	__asm volatile("MSR CONTROL,R0");
}

void generate_exception(void){
	// SVC exception handler will be called
	__asm volatile("SVC #0X2");
}


int main(void)
{
	// Cut the Stack into two
	// Thread Mode Code Which Should be using PSP (Process Stack Pointer)
	// Handler Code is going to use MSP (Main Stack Pointer)

	change_sp_to_psp();

	int ret;

	ret = fun_add(1, 4, 5, 6);

	printf("result = %d\n", ret);

	generate_exception();

    /* Loop forever */
	for(;;);
}


void SVC_Handler(void){
	printf("In SVC_Handler\n");
}






