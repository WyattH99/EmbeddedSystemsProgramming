/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "main.h"
#include "led.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
 * Create 4 Tasks that are Scheduled in a Round Robin
 * Using the Systick handler / PendSV Handler as the Scheduler.
 * Using 2 Stack Pointers: PSP in Thread Mode for the Tasks, and MSP in Handler Mode for the Scheduler
 * The Scheduler and Each Task will have its own Private Stack on the SRAM
 * Remember that on ARM Cortex-M Processor the Stack utilizes the Full Descending Method
 *
 * During the Context Switches Triggered by the Systick Timer every 1ms:
 * 	The Processor already pushes Registers 0-3, 12, LR, PC, and PSR
 * 	We just have to:
 * 		push R4-R11 (for its context) and the Stack Pointer
 * 		Switch the Stack Pointer
 * 		Pop R4-R11 for the new context
 *
 * Systick Timer Count Value Calculations:
 * 	HSI Processor Clock of STM32F446RE = 16MHz
 * 	Systick timer count clock = 16MHz
 * 	1ms is 1KHz in Frequency Domain
 * 	Using a Divisor (Reload Value) of 16,000 gets us to 1KHz
 */



// Prototype of Task Handlers
void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);


void init_systick_timer(uint32_t tick_hz);
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack);
void init_tasks_stack(void);

void enable_processor_faults(void);
__attribute__ ((naked)) void switch_sp_to_psp(void);

void save_psp_value(uint32_t current_psp_value);
void update_next_task(void);

// Global Variables
// Array of task pointers
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; // 0 means Task 1 is running


int main(void)
{

	enable_processor_faults();

	init_scheduler_stack(SCHEDULER_STACK_START);

	task_handlers[0] = (uint32_t) task1_handler;
	task_handlers[1] = (uint32_t) task2_handler;
	task_handlers[2] = (uint32_t) task3_handler;
	task_handlers[3] = (uint32_t) task4_handler;

	init_tasks_stack();

	init_systick_timer(TICK_HZ);

	// Tasks Should use PSP
	switch_sp_to_psp();

	task1_handler();

	// Should never get here
    /* Loop forever */
	for(;;);
}



void task1_handler(void){

	while(1){
		printf("Task1\n");
	}
}


void task2_handler(void){

	while(1){
		printf("Task2\n");
	}
}


void task3_handler(void){

	while(1){
		printf("Task3\n");
	}
}


void task4_handler(void){

	while(1){
		printf("Task4\n");
	}
}



void init_systick_timer(uint32_t tick_hz){

	// Count Value Calculation
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
	uint32_t count_value = (SYSTICK_TIMER_CLOCK / tick_hz) - 1;
	*pSRVR &= ~(0x00FFFFFFFF); // Clear the Register, only 24 bits are used
	*pSRVR |= count_value; // Load the Desired Reload Value

	// Configuration
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
	*pSCSR |= (1 << 1); // Enable SysTick Exception Request
	*pSCSR |= (1 << 2); // Use Processor Clock as Source
	*pSCSR |= (1 << 0); // Enables the Counter
}


// To change the Stack Pointer it has to be done in Assembly
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){

	// Changes MSP to scheduler_top_of_stack
	__asm volatile("MSR MSP,%0":: "r"(scheduler_top_of_stack): );
	__asm volatile("BX LR"); // Returns back to main

}


// Initialize each Task with 2 Stack Frames and Dummy Variables
void init_tasks_stack(void){

	uint32_t *pPSP; // Pointer used to access the Stack

	for(int i=0; i<MAX_TASKS; i++){
		pPSP = (uint32_t*) psp_of_tasks[i];

		// Stack is Full Descending
		pPSP--; // Store XPSR
		*pPSP = DUMMY_XPSR; // Should be 0x01000000
		pPSP--; // Store PC
		*pPSP = task_handlers[i];
		pPSP--; // Store LR
		*pPSP = 0xFFFFFFFD;
		// Store 0 in each of the Registers
		for(int j=0; j<13; j++){
			pPSP--;
			*pPSP = 0;
		}

		psp_of_tasks[i] = (uint32_t)pPSP;

	}

}


void enable_processor_faults(void){
	// Enable all configurable exceptions like Usage, Memory Management, and Bus Faults

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24; // Address for System Handler Control and State Register
	*pSHCSR |= (1 << 18); // Enable Usage Fault bit 18
	*pSHCSR |= (1 << 17); // Enable Bus Fault bit 17
	*pSHCSR |= (1 << 16); // Enable Memory Management Fault bit 16
}


uint32_t get_psp_value(void){
	return psp_of_tasks[current_task];
}


// CONTROL is a Special register so have to use MSR and naked attribute
__attribute__ ((naked)) void switch_sp_to_psp(void){

	// 1. Initialize the PSP with TASK1 stack start address
	__asm volatile("PUSH {LR}"); // Save LR so we can return to main() after the BL
	__asm volatile("BL get_psp_value"); // Use BL so it returns to this function afterwards and Returns value in R0
	__asm volatile("MSR PSP,R0");
	__asm volatile("POP {LR}"); // So we can return back to main()

	// 2. change SP to PSP using CONTROL register
	// Set SPSEL (the second bit) of the control register to 1 to select PSP
	__asm volatile("MOV R0,#0x02");
	__asm volatile("MSR CONTROL,R0");

	__asm volatile("BX LR"); // Branch back to main

}


void save_psp_value(uint32_t current_psp_value){
	psp_of_tasks[current_task] = current_psp_value;
}

void update_next_task(void){
	// Round Robin: Just increment the Task
	current_task++;
	current_task %= MAX_TASKS;
}

// Used to do Context Switches
__attribute__((naked)) void SysTick_Handler(void){

	/* Save the Context of Current Task */

	// 1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");

	// 2. using that PSP value store SF2 (R4-R11)
	// Can't use PUSH here since PUSH uses MSP and we are using PSP
	// STMDB: Store Multiple Registers, Decrement Before
	// ! updates R0 with the last value stored
	__asm volatile("STMDB R0!,{R4-R11}");

	// 3. Save the current value of PSP (R0)
	// Update the value for the appropriate psp_of_tasks
	__asm volatile("PUSH {LR}"); // Save LR Value
	__asm volatile("BL save_psp_value");


	/* Retrieve the Context of Next Task */


	// 1. Decide Next Task to Run
	__asm volatile("BL update_next_task");

	// 2. Get its past PSP value
	__asm volatile("BL get_psp_value");

	// 3. Using that PSP value Retrieve SF2 (R4-R11)
	// Load from Memory to Registers
	__asm volatile("LDMIA R0!,{R4-R11}"); // Load Multiple Registers, Increment After

	// 4. Update PSP and Exit
	__asm volatile("MSR PSP,R0");
	__asm volatile("POP {LR}");
	__asm volatile("BX LR");


}


void HardFault_Handler(void){
	printf("Exception: HardFault\n");
	while(1);
}


void UsageFault_Handler_(void){

	printf("Exception: UsageFault\n");

	// Check the Usage Fault State Register
	uint32_t *pUSFR = (uint32_t*)0xE000ED2A;
	printf("UFSR: %lx\n", (*pUSFR) & 0xFFFF); // The USFR is 16bits wide

	while(1);
}


void MemManage_Handler(void){
	printf("Exception: MemMangeFault\n");
	while(1);
}


void BusFault_Handler(void){
	printf("Exception: BusFault\n");
	while(1);
}



