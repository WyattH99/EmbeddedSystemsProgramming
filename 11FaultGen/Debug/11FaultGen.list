
11FaultGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000135c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001688  08001688  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001688  08001688  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001688  08001688  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001688  08001688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800168c  0800168c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080016ec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080016ec  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009f0  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ac  00000000  00000000  00020ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00020e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e3  00000000  00000000  00020fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c89  00000000  00000000  00021093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012ae  00000000  00000000  00023d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097e0  00000000  00000000  00024fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bf4  00000000  00000000  0002e7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0002f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001514 	.word	0x08001514

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001514 	.word	0x08001514

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <fun_divide>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int fun_divide(int x, int y){return x/y;}
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	fb92 f3f3 	sdiv	r3, r2, r3
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <main>:


// Enable all configurable fault exceptions, Implement the fault exception handlers, and
// cause the fault
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

	// 1. Enable all configurable exceptions like Usage, Memory Management, and Bus Faults

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24; // Address for System Handler Control and State Register
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <main+0x48>)
 80002d4:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 18); // Enable Usage Fault bit 18
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // Enable Bus Fault bit 17
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 16); // Enable Memory Management Fault bit 16
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]


	// Enable divide by 0 trap on the 4th bit of Address of Configuration and Control Register
	uint32_t *pCCR = (uint32_t*)0xE000ED14; // Address of Configuration and Control Register
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x4c>)
 80002fc:	603b      	str	r3, [r7, #0]
	*pCCR |= (1 << 4);
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0210 	orr.w	r2, r3, #16
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	601a      	str	r2, [r3, #0]

	fun_divide(10,0);
 800030a:	2100      	movs	r1, #0
 800030c:	200a      	movs	r0, #10
 800030e:	f7ff ffcf 	bl	80002b0 <fun_divide>

    /* Loop forever */
	for(;;);
 8000312:	e7fe      	b.n	8000312 <main+0x46>
 8000314:	e000ed24 	.word	0xe000ed24
 8000318:	e000ed14 	.word	0xe000ed14

0800031c <HardFault_Handler>:


// 2. Implement Fault Handlers
// Get the Handler names from the Vector Table ("g_pfnVectors:") in the Startup file

void HardFault_Handler(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000320:	4801      	ldr	r0, [pc, #4]	; (8000328 <HardFault_Handler+0xc>)
 8000322:	f000 fa95 	bl	8000850 <puts>
	while(1);
 8000326:	e7fe      	b.n	8000326 <HardFault_Handler+0xa>
 8000328:	0800152c 	.word	0x0800152c

0800032c <UsageFault_Handler>:
}


// To Analyze the Stack Frame you have to avoid the Epilogue of a normal C Function so naked is used
__attribute__ ((naked)) void UsageFault_Handler(void){
	__asm ("MRS r0,MSP"); // Store the Main Stack Pointer into r0
 800032c:	f3ef 8008 	mrs	r0, MSP
	__asm ("B UsageFault_Handler_c"); // Branch into the UsaageFault_Handler with out changing the MSP
 8000330:	f000 b802 	b.w	8000338 <UsageFault_Handler_c>
}
 8000334:	bf00      	nop
	...

08000338 <UsageFault_Handler_c>:

// The value of r0 from the naked function will be captured into the variable
void UsageFault_Handler_c(uint32_t *pBaseStackFrame){
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	// Don't need this code to analyze the Stack
//	__asm ("MRS r0,MSP"); // Store the Main Stack Pointer into r0
//	register uint32_t msp_value __asm("r0"); // Store r0 into a variable in a register
//	uint32_t *pMSP = (uint32_t*)msp_value; // Initialize a pointer to the

	printf("Exception: UsageFault\n");
 8000340:	4823      	ldr	r0, [pc, #140]	; (80003d0 <UsageFault_Handler_c+0x98>)
 8000342:	f000 fa85 	bl	8000850 <puts>

	// Check the Usage Fault State Register
	uint32_t *pUSFR = (uint32_t*)0xE000ED2A;
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <UsageFault_Handler_c+0x9c>)
 8000348:	60fb      	str	r3, [r7, #12]
	printf("UFSR: %lx\n", (*pUSFR) & 0xFFFF); // The USFR is 16bits wide
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	b29b      	uxth	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <UsageFault_Handler_c+0xa0>)
 8000354:	f000 fa16 	bl	8000784 <iprintf>

	printf("pBaseStackFrame: %p\n", pBaseStackFrame);
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	4820      	ldr	r0, [pc, #128]	; (80003dc <UsageFault_Handler_c+0xa4>)
 800035c:	f000 fa12 	bl	8000784 <iprintf>

	// Now that we have the address of the Stack Frame we can Analyze the Frame by printing them
	printf("Value of R0 = %lx\n", pBaseStackFrame[0]);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4619      	mov	r1, r3
 8000366:	481e      	ldr	r0, [pc, #120]	; (80003e0 <UsageFault_Handler_c+0xa8>)
 8000368:	f000 fa0c 	bl	8000784 <iprintf>
	printf("Value of R1 = %lx\n", pBaseStackFrame[1]);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3304      	adds	r3, #4
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	481b      	ldr	r0, [pc, #108]	; (80003e4 <UsageFault_Handler_c+0xac>)
 8000376:	f000 fa05 	bl	8000784 <iprintf>
	printf("Value of R2 = %lx\n", pBaseStackFrame[2]);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3308      	adds	r3, #8
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	4819      	ldr	r0, [pc, #100]	; (80003e8 <UsageFault_Handler_c+0xb0>)
 8000384:	f000 f9fe 	bl	8000784 <iprintf>
	printf("Value of R3 = %lx\n", pBaseStackFrame[3]);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	330c      	adds	r3, #12
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4619      	mov	r1, r3
 8000390:	4816      	ldr	r0, [pc, #88]	; (80003ec <UsageFault_Handler_c+0xb4>)
 8000392:	f000 f9f7 	bl	8000784 <iprintf>
	printf("Value of R12 = %lx\n", pBaseStackFrame[4]);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3310      	adds	r3, #16
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4619      	mov	r1, r3
 800039e:	4814      	ldr	r0, [pc, #80]	; (80003f0 <UsageFault_Handler_c+0xb8>)
 80003a0:	f000 f9f0 	bl	8000784 <iprintf>
	printf("Value of LR = %lx\n", pBaseStackFrame[5]);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3314      	adds	r3, #20
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4619      	mov	r1, r3
 80003ac:	4811      	ldr	r0, [pc, #68]	; (80003f4 <UsageFault_Handler_c+0xbc>)
 80003ae:	f000 f9e9 	bl	8000784 <iprintf>
	printf("Value of PC = %lx\n", pBaseStackFrame[6]);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3318      	adds	r3, #24
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <UsageFault_Handler_c+0xc0>)
 80003bc:	f000 f9e2 	bl	8000784 <iprintf>
	printf("Value of XPSR = %lx\n", pBaseStackFrame[7]);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	331c      	adds	r3, #28
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4619      	mov	r1, r3
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <UsageFault_Handler_c+0xc4>)
 80003ca:	f000 f9db 	bl	8000784 <iprintf>

	while(1);
 80003ce:	e7fe      	b.n	80003ce <UsageFault_Handler_c+0x96>
 80003d0:	08001544 	.word	0x08001544
 80003d4:	e000ed2a 	.word	0xe000ed2a
 80003d8:	0800155c 	.word	0x0800155c
 80003dc:	08001568 	.word	0x08001568
 80003e0:	08001580 	.word	0x08001580
 80003e4:	08001594 	.word	0x08001594
 80003e8:	080015a8 	.word	0x080015a8
 80003ec:	080015bc 	.word	0x080015bc
 80003f0:	080015d0 	.word	0x080015d0
 80003f4:	080015e4 	.word	0x080015e4
 80003f8:	080015f8 	.word	0x080015f8
 80003fc:	0800160c 	.word	0x0800160c

08000400 <MemManage_Handler>:
}


void MemManage_Handler(void){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	printf("Exception: MemMangeFault\n");
 8000404:	4801      	ldr	r0, [pc, #4]	; (800040c <MemManage_Handler+0xc>)
 8000406:	f000 fa23 	bl	8000850 <puts>
	while(1);
 800040a:	e7fe      	b.n	800040a <MemManage_Handler+0xa>
 800040c:	08001624 	.word	0x08001624

08000410 <BusFault_Handler>:
}


void BusFault_Handler(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000414:	4801      	ldr	r0, [pc, #4]	; (800041c <BusFault_Handler+0xc>)
 8000416:	f000 fa1b 	bl	8000850 <puts>
	while(1);
 800041a:	e7fe      	b.n	800041a <BusFault_Handler+0xa>
 800041c:	08001640 	.word	0x08001640

08000420 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <ITM_SendChar+0x44>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <ITM_SendChar+0x44>)
 8000430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000434:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <ITM_SendChar+0x48>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <ITM_SendChar+0x48>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000442:	bf00      	nop
 8000444:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f8      	beq.n	8000444 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000452:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	6013      	str	r3, [r2, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	e000edfc 	.word	0xe000edfc
 8000468:	e0000e00 	.word	0xe0000e00

0800046c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e00a      	b.n	8000494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800047e:	f3af 8000 	nop.w
 8000482:	4601      	mov	r1, r0
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	b2ca      	uxtb	r2, r1
 800048c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	dbf0      	blt.n	800047e <_read+0x12>
  }

  return len;
 800049c:	687b      	ldr	r3, [r7, #4]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b086      	sub	sp, #24
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	60f8      	str	r0, [r7, #12]
 80004ae:	60b9      	str	r1, [r7, #8]
 80004b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	e009      	b.n	80004cc <_write+0x26>
  {
	  //    __io_putchar(*ptr++);
	  	  ITM_SendChar(*ptr++);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ffad 	bl	8000420 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dbf1      	blt.n	80004b8 <_write+0x12>
  }
  return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_close>:

int _close(int file)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000504:	605a      	str	r2, [r3, #4]
  return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <_isatty>:

int _isatty(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800051a:	2301      	movs	r3, #1
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000526:	b480      	push	{r7}
 8000528:	b085      	sub	sp, #20
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000532:	2300      	movs	r3, #0
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
	...

08000540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <_sbrk+0x5c>)
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <_sbrk+0x60>)
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <_sbrk+0x64>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <_sbrk+0x68>)
 8000560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	d207      	bcs.n	8000580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000570:	f000 fa9c 	bl	8000aac <__errno>
 8000574:	4603      	mov	r3, r0
 8000576:	220c      	movs	r2, #12
 8000578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800057e:	e009      	b.n	8000594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <_sbrk+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <_sbrk+0x64>)
 8000590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20020000 	.word	0x20020000
 80005a0:	00000400 	.word	0x00000400
 80005a4:	20000078 	.word	0x20000078
 80005a8:	200001c8 	.word	0x200001c8

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005da:	f000 fa6d 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff fe75 	bl	80002cc <main>

080005e2 <LoopForever>:

LoopForever:
  b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005f0:	08001690 	.word	0x08001690
  ldr r2, =_sbss
 80005f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005f8:	200001c8 	.word	0x200001c8

080005fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>
	...

08000600 <std>:
 8000600:	2300      	movs	r3, #0
 8000602:	b510      	push	{r4, lr}
 8000604:	4604      	mov	r4, r0
 8000606:	e9c0 3300 	strd	r3, r3, [r0]
 800060a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800060e:	6083      	str	r3, [r0, #8]
 8000610:	8181      	strh	r1, [r0, #12]
 8000612:	6643      	str	r3, [r0, #100]	; 0x64
 8000614:	81c2      	strh	r2, [r0, #14]
 8000616:	6183      	str	r3, [r0, #24]
 8000618:	4619      	mov	r1, r3
 800061a:	2208      	movs	r2, #8
 800061c:	305c      	adds	r0, #92	; 0x5c
 800061e:	f000 f9f7 	bl	8000a10 <memset>
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <std+0x58>)
 8000624:	6263      	str	r3, [r4, #36]	; 0x24
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <std+0x5c>)
 8000628:	62a3      	str	r3, [r4, #40]	; 0x28
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <std+0x60>)
 800062c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <std+0x64>)
 8000630:	6323      	str	r3, [r4, #48]	; 0x30
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <std+0x68>)
 8000634:	6224      	str	r4, [r4, #32]
 8000636:	429c      	cmp	r4, r3
 8000638:	d006      	beq.n	8000648 <std+0x48>
 800063a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800063e:	4294      	cmp	r4, r2
 8000640:	d002      	beq.n	8000648 <std+0x48>
 8000642:	33d0      	adds	r3, #208	; 0xd0
 8000644:	429c      	cmp	r4, r3
 8000646:	d105      	bne.n	8000654 <std+0x54>
 8000648:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800064c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000650:	f000 ba56 	b.w	8000b00 <__retarget_lock_init_recursive>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	08000861 	.word	0x08000861
 800065c:	08000883 	.word	0x08000883
 8000660:	080008bb 	.word	0x080008bb
 8000664:	080008df 	.word	0x080008df
 8000668:	2000007c 	.word	0x2000007c

0800066c <stdio_exit_handler>:
 800066c:	4a02      	ldr	r2, [pc, #8]	; (8000678 <stdio_exit_handler+0xc>)
 800066e:	4903      	ldr	r1, [pc, #12]	; (800067c <stdio_exit_handler+0x10>)
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <stdio_exit_handler+0x14>)
 8000672:	f000 b869 	b.w	8000748 <_fwalk_sglue>
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000
 800067c:	0800139d 	.word	0x0800139d
 8000680:	2000000c 	.word	0x2000000c

08000684 <cleanup_stdio>:
 8000684:	6841      	ldr	r1, [r0, #4]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <cleanup_stdio+0x34>)
 8000688:	4299      	cmp	r1, r3
 800068a:	b510      	push	{r4, lr}
 800068c:	4604      	mov	r4, r0
 800068e:	d001      	beq.n	8000694 <cleanup_stdio+0x10>
 8000690:	f000 fe84 	bl	800139c <_fflush_r>
 8000694:	68a1      	ldr	r1, [r4, #8]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <cleanup_stdio+0x38>)
 8000698:	4299      	cmp	r1, r3
 800069a:	d002      	beq.n	80006a2 <cleanup_stdio+0x1e>
 800069c:	4620      	mov	r0, r4
 800069e:	f000 fe7d 	bl	800139c <_fflush_r>
 80006a2:	68e1      	ldr	r1, [r4, #12]
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <cleanup_stdio+0x3c>)
 80006a6:	4299      	cmp	r1, r3
 80006a8:	d004      	beq.n	80006b4 <cleanup_stdio+0x30>
 80006aa:	4620      	mov	r0, r4
 80006ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b0:	f000 be74 	b.w	800139c <_fflush_r>
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	2000014c 	.word	0x2000014c

080006c4 <global_stdio_init.part.0>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <global_stdio_init.part.0+0x30>)
 80006c8:	4c0b      	ldr	r4, [pc, #44]	; (80006f8 <global_stdio_init.part.0+0x34>)
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <global_stdio_init.part.0+0x38>)
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	4620      	mov	r0, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	2104      	movs	r1, #4
 80006d4:	f7ff ff94 	bl	8000600 <std>
 80006d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006dc:	2201      	movs	r2, #1
 80006de:	2109      	movs	r1, #9
 80006e0:	f7ff ff8e 	bl	8000600 <std>
 80006e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006e8:	2202      	movs	r2, #2
 80006ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ee:	2112      	movs	r1, #18
 80006f0:	f7ff bf86 	b.w	8000600 <std>
 80006f4:	200001b4 	.word	0x200001b4
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	0800066d 	.word	0x0800066d

08000700 <__sfp_lock_acquire>:
 8000700:	4801      	ldr	r0, [pc, #4]	; (8000708 <__sfp_lock_acquire+0x8>)
 8000702:	f000 b9fe 	b.w	8000b02 <__retarget_lock_acquire_recursive>
 8000706:	bf00      	nop
 8000708:	200001bd 	.word	0x200001bd

0800070c <__sfp_lock_release>:
 800070c:	4801      	ldr	r0, [pc, #4]	; (8000714 <__sfp_lock_release+0x8>)
 800070e:	f000 b9f9 	b.w	8000b04 <__retarget_lock_release_recursive>
 8000712:	bf00      	nop
 8000714:	200001bd 	.word	0x200001bd

08000718 <__sinit>:
 8000718:	b510      	push	{r4, lr}
 800071a:	4604      	mov	r4, r0
 800071c:	f7ff fff0 	bl	8000700 <__sfp_lock_acquire>
 8000720:	6a23      	ldr	r3, [r4, #32]
 8000722:	b11b      	cbz	r3, 800072c <__sinit+0x14>
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000728:	f7ff bff0 	b.w	800070c <__sfp_lock_release>
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__sinit+0x28>)
 800072e:	6223      	str	r3, [r4, #32]
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__sinit+0x2c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f5      	bne.n	8000724 <__sinit+0xc>
 8000738:	f7ff ffc4 	bl	80006c4 <global_stdio_init.part.0>
 800073c:	e7f2      	b.n	8000724 <__sinit+0xc>
 800073e:	bf00      	nop
 8000740:	08000685 	.word	0x08000685
 8000744:	200001b4 	.word	0x200001b4

08000748 <_fwalk_sglue>:
 8000748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800074c:	4607      	mov	r7, r0
 800074e:	4688      	mov	r8, r1
 8000750:	4614      	mov	r4, r2
 8000752:	2600      	movs	r6, #0
 8000754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000758:	f1b9 0901 	subs.w	r9, r9, #1
 800075c:	d505      	bpl.n	800076a <_fwalk_sglue+0x22>
 800075e:	6824      	ldr	r4, [r4, #0]
 8000760:	2c00      	cmp	r4, #0
 8000762:	d1f7      	bne.n	8000754 <_fwalk_sglue+0xc>
 8000764:	4630      	mov	r0, r6
 8000766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800076a:	89ab      	ldrh	r3, [r5, #12]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d907      	bls.n	8000780 <_fwalk_sglue+0x38>
 8000770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000774:	3301      	adds	r3, #1
 8000776:	d003      	beq.n	8000780 <_fwalk_sglue+0x38>
 8000778:	4629      	mov	r1, r5
 800077a:	4638      	mov	r0, r7
 800077c:	47c0      	blx	r8
 800077e:	4306      	orrs	r6, r0
 8000780:	3568      	adds	r5, #104	; 0x68
 8000782:	e7e9      	b.n	8000758 <_fwalk_sglue+0x10>

08000784 <iprintf>:
 8000784:	b40f      	push	{r0, r1, r2, r3}
 8000786:	b507      	push	{r0, r1, r2, lr}
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <iprintf+0x20>)
 800078a:	ab04      	add	r3, sp, #16
 800078c:	6808      	ldr	r0, [r1, #0]
 800078e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000792:	6881      	ldr	r1, [r0, #8]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	f000 fad5 	bl	8000d44 <_vfiprintf_r>
 800079a:	b003      	add	sp, #12
 800079c:	f85d eb04 	ldr.w	lr, [sp], #4
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr
 80007a4:	20000058 	.word	0x20000058

080007a8 <_puts_r>:
 80007a8:	6a03      	ldr	r3, [r0, #32]
 80007aa:	b570      	push	{r4, r5, r6, lr}
 80007ac:	6884      	ldr	r4, [r0, #8]
 80007ae:	4605      	mov	r5, r0
 80007b0:	460e      	mov	r6, r1
 80007b2:	b90b      	cbnz	r3, 80007b8 <_puts_r+0x10>
 80007b4:	f7ff ffb0 	bl	8000718 <__sinit>
 80007b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ba:	07db      	lsls	r3, r3, #31
 80007bc:	d405      	bmi.n	80007ca <_puts_r+0x22>
 80007be:	89a3      	ldrh	r3, [r4, #12]
 80007c0:	0598      	lsls	r0, r3, #22
 80007c2:	d402      	bmi.n	80007ca <_puts_r+0x22>
 80007c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007c6:	f000 f99c 	bl	8000b02 <__retarget_lock_acquire_recursive>
 80007ca:	89a3      	ldrh	r3, [r4, #12]
 80007cc:	0719      	lsls	r1, r3, #28
 80007ce:	d513      	bpl.n	80007f8 <_puts_r+0x50>
 80007d0:	6923      	ldr	r3, [r4, #16]
 80007d2:	b18b      	cbz	r3, 80007f8 <_puts_r+0x50>
 80007d4:	3e01      	subs	r6, #1
 80007d6:	68a3      	ldr	r3, [r4, #8]
 80007d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007dc:	3b01      	subs	r3, #1
 80007de:	60a3      	str	r3, [r4, #8]
 80007e0:	b9e9      	cbnz	r1, 800081e <_puts_r+0x76>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da2e      	bge.n	8000844 <_puts_r+0x9c>
 80007e6:	4622      	mov	r2, r4
 80007e8:	210a      	movs	r1, #10
 80007ea:	4628      	mov	r0, r5
 80007ec:	f000 f87b 	bl	80008e6 <__swbuf_r>
 80007f0:	3001      	adds	r0, #1
 80007f2:	d007      	beq.n	8000804 <_puts_r+0x5c>
 80007f4:	250a      	movs	r5, #10
 80007f6:	e007      	b.n	8000808 <_puts_r+0x60>
 80007f8:	4621      	mov	r1, r4
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 f8b0 	bl	8000960 <__swsetup_r>
 8000800:	2800      	cmp	r0, #0
 8000802:	d0e7      	beq.n	80007d4 <_puts_r+0x2c>
 8000804:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800080a:	07da      	lsls	r2, r3, #31
 800080c:	d405      	bmi.n	800081a <_puts_r+0x72>
 800080e:	89a3      	ldrh	r3, [r4, #12]
 8000810:	059b      	lsls	r3, r3, #22
 8000812:	d402      	bmi.n	800081a <_puts_r+0x72>
 8000814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000816:	f000 f975 	bl	8000b04 <__retarget_lock_release_recursive>
 800081a:	4628      	mov	r0, r5
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	2b00      	cmp	r3, #0
 8000820:	da04      	bge.n	800082c <_puts_r+0x84>
 8000822:	69a2      	ldr	r2, [r4, #24]
 8000824:	429a      	cmp	r2, r3
 8000826:	dc06      	bgt.n	8000836 <_puts_r+0x8e>
 8000828:	290a      	cmp	r1, #10
 800082a:	d004      	beq.n	8000836 <_puts_r+0x8e>
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	6022      	str	r2, [r4, #0]
 8000832:	7019      	strb	r1, [r3, #0]
 8000834:	e7cf      	b.n	80007d6 <_puts_r+0x2e>
 8000836:	4622      	mov	r2, r4
 8000838:	4628      	mov	r0, r5
 800083a:	f000 f854 	bl	80008e6 <__swbuf_r>
 800083e:	3001      	adds	r0, #1
 8000840:	d1c9      	bne.n	80007d6 <_puts_r+0x2e>
 8000842:	e7df      	b.n	8000804 <_puts_r+0x5c>
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	250a      	movs	r5, #10
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	6022      	str	r2, [r4, #0]
 800084c:	701d      	strb	r5, [r3, #0]
 800084e:	e7db      	b.n	8000808 <_puts_r+0x60>

08000850 <puts>:
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <puts+0xc>)
 8000852:	4601      	mov	r1, r0
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	f7ff bfa7 	b.w	80007a8 <_puts_r>
 800085a:	bf00      	nop
 800085c:	20000058 	.word	0x20000058

08000860 <__sread>:
 8000860:	b510      	push	{r4, lr}
 8000862:	460c      	mov	r4, r1
 8000864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000868:	f000 f8fc 	bl	8000a64 <_read_r>
 800086c:	2800      	cmp	r0, #0
 800086e:	bfab      	itete	ge
 8000870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000872:	89a3      	ldrhlt	r3, [r4, #12]
 8000874:	181b      	addge	r3, r3, r0
 8000876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800087a:	bfac      	ite	ge
 800087c:	6563      	strge	r3, [r4, #84]	; 0x54
 800087e:	81a3      	strhlt	r3, [r4, #12]
 8000880:	bd10      	pop	{r4, pc}

08000882 <__swrite>:
 8000882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000886:	461f      	mov	r7, r3
 8000888:	898b      	ldrh	r3, [r1, #12]
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	4605      	mov	r5, r0
 800088e:	460c      	mov	r4, r1
 8000890:	4616      	mov	r6, r2
 8000892:	d505      	bpl.n	80008a0 <__swrite+0x1e>
 8000894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000898:	2302      	movs	r3, #2
 800089a:	2200      	movs	r2, #0
 800089c:	f000 f8d0 	bl	8000a40 <_lseek_r>
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008aa:	81a3      	strh	r3, [r4, #12]
 80008ac:	4632      	mov	r2, r6
 80008ae:	463b      	mov	r3, r7
 80008b0:	4628      	mov	r0, r5
 80008b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008b6:	f000 b8e7 	b.w	8000a88 <_write_r>

080008ba <__sseek>:
 80008ba:	b510      	push	{r4, lr}
 80008bc:	460c      	mov	r4, r1
 80008be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c2:	f000 f8bd 	bl	8000a40 <_lseek_r>
 80008c6:	1c43      	adds	r3, r0, #1
 80008c8:	89a3      	ldrh	r3, [r4, #12]
 80008ca:	bf15      	itete	ne
 80008cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80008ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008d6:	81a3      	strheq	r3, [r4, #12]
 80008d8:	bf18      	it	ne
 80008da:	81a3      	strhne	r3, [r4, #12]
 80008dc:	bd10      	pop	{r4, pc}

080008de <__sclose>:
 80008de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e2:	f000 b89d 	b.w	8000a20 <_close_r>

080008e6 <__swbuf_r>:
 80008e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e8:	460e      	mov	r6, r1
 80008ea:	4614      	mov	r4, r2
 80008ec:	4605      	mov	r5, r0
 80008ee:	b118      	cbz	r0, 80008f8 <__swbuf_r+0x12>
 80008f0:	6a03      	ldr	r3, [r0, #32]
 80008f2:	b90b      	cbnz	r3, 80008f8 <__swbuf_r+0x12>
 80008f4:	f7ff ff10 	bl	8000718 <__sinit>
 80008f8:	69a3      	ldr	r3, [r4, #24]
 80008fa:	60a3      	str	r3, [r4, #8]
 80008fc:	89a3      	ldrh	r3, [r4, #12]
 80008fe:	071a      	lsls	r2, r3, #28
 8000900:	d525      	bpl.n	800094e <__swbuf_r+0x68>
 8000902:	6923      	ldr	r3, [r4, #16]
 8000904:	b31b      	cbz	r3, 800094e <__swbuf_r+0x68>
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	6922      	ldr	r2, [r4, #16]
 800090a:	1a98      	subs	r0, r3, r2
 800090c:	6963      	ldr	r3, [r4, #20]
 800090e:	b2f6      	uxtb	r6, r6
 8000910:	4283      	cmp	r3, r0
 8000912:	4637      	mov	r7, r6
 8000914:	dc04      	bgt.n	8000920 <__swbuf_r+0x3a>
 8000916:	4621      	mov	r1, r4
 8000918:	4628      	mov	r0, r5
 800091a:	f000 fd3f 	bl	800139c <_fflush_r>
 800091e:	b9e0      	cbnz	r0, 800095a <__swbuf_r+0x74>
 8000920:	68a3      	ldr	r3, [r4, #8]
 8000922:	3b01      	subs	r3, #1
 8000924:	60a3      	str	r3, [r4, #8]
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	6022      	str	r2, [r4, #0]
 800092c:	701e      	strb	r6, [r3, #0]
 800092e:	6962      	ldr	r2, [r4, #20]
 8000930:	1c43      	adds	r3, r0, #1
 8000932:	429a      	cmp	r2, r3
 8000934:	d004      	beq.n	8000940 <__swbuf_r+0x5a>
 8000936:	89a3      	ldrh	r3, [r4, #12]
 8000938:	07db      	lsls	r3, r3, #31
 800093a:	d506      	bpl.n	800094a <__swbuf_r+0x64>
 800093c:	2e0a      	cmp	r6, #10
 800093e:	d104      	bne.n	800094a <__swbuf_r+0x64>
 8000940:	4621      	mov	r1, r4
 8000942:	4628      	mov	r0, r5
 8000944:	f000 fd2a 	bl	800139c <_fflush_r>
 8000948:	b938      	cbnz	r0, 800095a <__swbuf_r+0x74>
 800094a:	4638      	mov	r0, r7
 800094c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800094e:	4621      	mov	r1, r4
 8000950:	4628      	mov	r0, r5
 8000952:	f000 f805 	bl	8000960 <__swsetup_r>
 8000956:	2800      	cmp	r0, #0
 8000958:	d0d5      	beq.n	8000906 <__swbuf_r+0x20>
 800095a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800095e:	e7f4      	b.n	800094a <__swbuf_r+0x64>

08000960 <__swsetup_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <__swsetup_r+0xac>)
 8000964:	4605      	mov	r5, r0
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	460c      	mov	r4, r1
 800096a:	b118      	cbz	r0, 8000974 <__swsetup_r+0x14>
 800096c:	6a03      	ldr	r3, [r0, #32]
 800096e:	b90b      	cbnz	r3, 8000974 <__swsetup_r+0x14>
 8000970:	f7ff fed2 	bl	8000718 <__sinit>
 8000974:	89a3      	ldrh	r3, [r4, #12]
 8000976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800097a:	0718      	lsls	r0, r3, #28
 800097c:	d422      	bmi.n	80009c4 <__swsetup_r+0x64>
 800097e:	06d9      	lsls	r1, r3, #27
 8000980:	d407      	bmi.n	8000992 <__swsetup_r+0x32>
 8000982:	2309      	movs	r3, #9
 8000984:	602b      	str	r3, [r5, #0]
 8000986:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800098a:	81a3      	strh	r3, [r4, #12]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000990:	e034      	b.n	80009fc <__swsetup_r+0x9c>
 8000992:	0758      	lsls	r0, r3, #29
 8000994:	d512      	bpl.n	80009bc <__swsetup_r+0x5c>
 8000996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000998:	b141      	cbz	r1, 80009ac <__swsetup_r+0x4c>
 800099a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800099e:	4299      	cmp	r1, r3
 80009a0:	d002      	beq.n	80009a8 <__swsetup_r+0x48>
 80009a2:	4628      	mov	r0, r5
 80009a4:	f000 f8b0 	bl	8000b08 <_free_r>
 80009a8:	2300      	movs	r3, #0
 80009aa:	6363      	str	r3, [r4, #52]	; 0x34
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009b2:	81a3      	strh	r3, [r4, #12]
 80009b4:	2300      	movs	r3, #0
 80009b6:	6063      	str	r3, [r4, #4]
 80009b8:	6923      	ldr	r3, [r4, #16]
 80009ba:	6023      	str	r3, [r4, #0]
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	81a3      	strh	r3, [r4, #12]
 80009c4:	6923      	ldr	r3, [r4, #16]
 80009c6:	b94b      	cbnz	r3, 80009dc <__swsetup_r+0x7c>
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009d2:	d003      	beq.n	80009dc <__swsetup_r+0x7c>
 80009d4:	4621      	mov	r1, r4
 80009d6:	4628      	mov	r0, r5
 80009d8:	f000 fd2e 	bl	8001438 <__smakebuf_r>
 80009dc:	89a0      	ldrh	r0, [r4, #12]
 80009de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009e2:	f010 0301 	ands.w	r3, r0, #1
 80009e6:	d00a      	beq.n	80009fe <__swsetup_r+0x9e>
 80009e8:	2300      	movs	r3, #0
 80009ea:	60a3      	str	r3, [r4, #8]
 80009ec:	6963      	ldr	r3, [r4, #20]
 80009ee:	425b      	negs	r3, r3
 80009f0:	61a3      	str	r3, [r4, #24]
 80009f2:	6923      	ldr	r3, [r4, #16]
 80009f4:	b943      	cbnz	r3, 8000a08 <__swsetup_r+0xa8>
 80009f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009fa:	d1c4      	bne.n	8000986 <__swsetup_r+0x26>
 80009fc:	bd38      	pop	{r3, r4, r5, pc}
 80009fe:	0781      	lsls	r1, r0, #30
 8000a00:	bf58      	it	pl
 8000a02:	6963      	ldrpl	r3, [r4, #20]
 8000a04:	60a3      	str	r3, [r4, #8]
 8000a06:	e7f4      	b.n	80009f2 <__swsetup_r+0x92>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7f7      	b.n	80009fc <__swsetup_r+0x9c>
 8000a0c:	20000058 	.word	0x20000058

08000a10 <memset>:
 8000a10:	4402      	add	r2, r0
 8000a12:	4603      	mov	r3, r0
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d100      	bne.n	8000a1a <memset+0xa>
 8000a18:	4770      	bx	lr
 8000a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a1e:	e7f9      	b.n	8000a14 <memset+0x4>

08000a20 <_close_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4d06      	ldr	r5, [pc, #24]	; (8000a3c <_close_r+0x1c>)
 8000a24:	2300      	movs	r3, #0
 8000a26:	4604      	mov	r4, r0
 8000a28:	4608      	mov	r0, r1
 8000a2a:	602b      	str	r3, [r5, #0]
 8000a2c:	f7ff fd57 	bl	80004de <_close>
 8000a30:	1c43      	adds	r3, r0, #1
 8000a32:	d102      	bne.n	8000a3a <_close_r+0x1a>
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	b103      	cbz	r3, 8000a3a <_close_r+0x1a>
 8000a38:	6023      	str	r3, [r4, #0]
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
 8000a3c:	200001b8 	.word	0x200001b8

08000a40 <_lseek_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4d07      	ldr	r5, [pc, #28]	; (8000a60 <_lseek_r+0x20>)
 8000a44:	4604      	mov	r4, r0
 8000a46:	4608      	mov	r0, r1
 8000a48:	4611      	mov	r1, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	602a      	str	r2, [r5, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f7ff fd69 	bl	8000526 <_lseek>
 8000a54:	1c43      	adds	r3, r0, #1
 8000a56:	d102      	bne.n	8000a5e <_lseek_r+0x1e>
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	b103      	cbz	r3, 8000a5e <_lseek_r+0x1e>
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	200001b8 	.word	0x200001b8

08000a64 <_read_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4d07      	ldr	r5, [pc, #28]	; (8000a84 <_read_r+0x20>)
 8000a68:	4604      	mov	r4, r0
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	602a      	str	r2, [r5, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	f7ff fcfa 	bl	800046c <_read>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d102      	bne.n	8000a82 <_read_r+0x1e>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	b103      	cbz	r3, 8000a82 <_read_r+0x1e>
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001b8 	.word	0x200001b8

08000a88 <_write_r>:
 8000a88:	b538      	push	{r3, r4, r5, lr}
 8000a8a:	4d07      	ldr	r5, [pc, #28]	; (8000aa8 <_write_r+0x20>)
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	602a      	str	r2, [r5, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff fd05 	bl	80004a6 <_write>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d102      	bne.n	8000aa6 <_write_r+0x1e>
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	b103      	cbz	r3, 8000aa6 <_write_r+0x1e>
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	200001b8 	.word	0x200001b8

08000aac <__errno>:
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <__errno+0x8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000058 	.word	0x20000058

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	; (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	; (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	; (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	; (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 fd22 	bl	8001514 <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08001688 	.word	0x08001688
 8000af4:	08001688 	.word	0x08001688
 8000af8:	08001688 	.word	0x08001688
 8000afc:	0800168c 	.word	0x0800168c

08000b00 <__retarget_lock_init_recursive>:
 8000b00:	4770      	bx	lr

08000b02 <__retarget_lock_acquire_recursive>:
 8000b02:	4770      	bx	lr

08000b04 <__retarget_lock_release_recursive>:
 8000b04:	4770      	bx	lr
	...

08000b08 <_free_r>:
 8000b08:	b538      	push	{r3, r4, r5, lr}
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d041      	beq.n	8000b94 <_free_r+0x8c>
 8000b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b14:	1f0c      	subs	r4, r1, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bfb8      	it	lt
 8000b1a:	18e4      	addlt	r4, r4, r3
 8000b1c:	f000 f8de 	bl	8000cdc <__malloc_lock>
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <_free_r+0x90>)
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	b933      	cbnz	r3, 8000b34 <_free_r+0x2c>
 8000b26:	6063      	str	r3, [r4, #4]
 8000b28:	6014      	str	r4, [r2, #0]
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b30:	f000 b8da 	b.w	8000ce8 <__malloc_unlock>
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d908      	bls.n	8000b4a <_free_r+0x42>
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	1821      	adds	r1, r4, r0
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf01      	itttt	eq
 8000b40:	6819      	ldreq	r1, [r3, #0]
 8000b42:	685b      	ldreq	r3, [r3, #4]
 8000b44:	1809      	addeq	r1, r1, r0
 8000b46:	6021      	streq	r1, [r4, #0]
 8000b48:	e7ed      	b.n	8000b26 <_free_r+0x1e>
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	b10b      	cbz	r3, 8000b54 <_free_r+0x4c>
 8000b50:	42a3      	cmp	r3, r4
 8000b52:	d9fa      	bls.n	8000b4a <_free_r+0x42>
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	1850      	adds	r0, r2, r1
 8000b58:	42a0      	cmp	r0, r4
 8000b5a:	d10b      	bne.n	8000b74 <_free_r+0x6c>
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	4401      	add	r1, r0
 8000b60:	1850      	adds	r0, r2, r1
 8000b62:	4283      	cmp	r3, r0
 8000b64:	6011      	str	r1, [r2, #0]
 8000b66:	d1e0      	bne.n	8000b2a <_free_r+0x22>
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	6053      	str	r3, [r2, #4]
 8000b6e:	4408      	add	r0, r1
 8000b70:	6010      	str	r0, [r2, #0]
 8000b72:	e7da      	b.n	8000b2a <_free_r+0x22>
 8000b74:	d902      	bls.n	8000b7c <_free_r+0x74>
 8000b76:	230c      	movs	r3, #12
 8000b78:	602b      	str	r3, [r5, #0]
 8000b7a:	e7d6      	b.n	8000b2a <_free_r+0x22>
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	1821      	adds	r1, r4, r0
 8000b80:	428b      	cmp	r3, r1
 8000b82:	bf04      	itt	eq
 8000b84:	6819      	ldreq	r1, [r3, #0]
 8000b86:	685b      	ldreq	r3, [r3, #4]
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	bf04      	itt	eq
 8000b8c:	1809      	addeq	r1, r1, r0
 8000b8e:	6021      	streq	r1, [r4, #0]
 8000b90:	6054      	str	r4, [r2, #4]
 8000b92:	e7ca      	b.n	8000b2a <_free_r+0x22>
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop
 8000b98:	200001c0 	.word	0x200001c0

08000b9c <sbrk_aligned>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4e0e      	ldr	r6, [pc, #56]	; (8000bd8 <sbrk_aligned+0x3c>)
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	6831      	ldr	r1, [r6, #0]
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	b911      	cbnz	r1, 8000bae <sbrk_aligned+0x12>
 8000ba8:	f000 fca4 	bl	80014f4 <_sbrk_r>
 8000bac:	6030      	str	r0, [r6, #0]
 8000bae:	4621      	mov	r1, r4
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	f000 fc9f 	bl	80014f4 <_sbrk_r>
 8000bb6:	1c43      	adds	r3, r0, #1
 8000bb8:	d00a      	beq.n	8000bd0 <sbrk_aligned+0x34>
 8000bba:	1cc4      	adds	r4, r0, #3
 8000bbc:	f024 0403 	bic.w	r4, r4, #3
 8000bc0:	42a0      	cmp	r0, r4
 8000bc2:	d007      	beq.n	8000bd4 <sbrk_aligned+0x38>
 8000bc4:	1a21      	subs	r1, r4, r0
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	f000 fc94 	bl	80014f4 <_sbrk_r>
 8000bcc:	3001      	adds	r0, #1
 8000bce:	d101      	bne.n	8000bd4 <sbrk_aligned+0x38>
 8000bd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	200001c4 	.word	0x200001c4

08000bdc <_malloc_r>:
 8000bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be0:	1ccd      	adds	r5, r1, #3
 8000be2:	f025 0503 	bic.w	r5, r5, #3
 8000be6:	3508      	adds	r5, #8
 8000be8:	2d0c      	cmp	r5, #12
 8000bea:	bf38      	it	cc
 8000bec:	250c      	movcc	r5, #12
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	4607      	mov	r7, r0
 8000bf2:	db01      	blt.n	8000bf8 <_malloc_r+0x1c>
 8000bf4:	42a9      	cmp	r1, r5
 8000bf6:	d905      	bls.n	8000c04 <_malloc_r+0x28>
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	4630      	mov	r0, r6
 8000c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cd8 <_malloc_r+0xfc>
 8000c08:	f000 f868 	bl	8000cdc <__malloc_lock>
 8000c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8000c10:	461c      	mov	r4, r3
 8000c12:	bb5c      	cbnz	r4, 8000c6c <_malloc_r+0x90>
 8000c14:	4629      	mov	r1, r5
 8000c16:	4638      	mov	r0, r7
 8000c18:	f7ff ffc0 	bl	8000b9c <sbrk_aligned>
 8000c1c:	1c43      	adds	r3, r0, #1
 8000c1e:	4604      	mov	r4, r0
 8000c20:	d155      	bne.n	8000cce <_malloc_r+0xf2>
 8000c22:	f8d8 4000 	ldr.w	r4, [r8]
 8000c26:	4626      	mov	r6, r4
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d145      	bne.n	8000cb8 <_malloc_r+0xdc>
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d048      	beq.n	8000cc2 <_malloc_r+0xe6>
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	4631      	mov	r1, r6
 8000c34:	4638      	mov	r0, r7
 8000c36:	eb04 0903 	add.w	r9, r4, r3
 8000c3a:	f000 fc5b 	bl	80014f4 <_sbrk_r>
 8000c3e:	4581      	cmp	r9, r0
 8000c40:	d13f      	bne.n	8000cc2 <_malloc_r+0xe6>
 8000c42:	6821      	ldr	r1, [r4, #0]
 8000c44:	1a6d      	subs	r5, r5, r1
 8000c46:	4629      	mov	r1, r5
 8000c48:	4638      	mov	r0, r7
 8000c4a:	f7ff ffa7 	bl	8000b9c <sbrk_aligned>
 8000c4e:	3001      	adds	r0, #1
 8000c50:	d037      	beq.n	8000cc2 <_malloc_r+0xe6>
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	442b      	add	r3, r5
 8000c56:	6023      	str	r3, [r4, #0]
 8000c58:	f8d8 3000 	ldr.w	r3, [r8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d038      	beq.n	8000cd2 <_malloc_r+0xf6>
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	42a2      	cmp	r2, r4
 8000c64:	d12b      	bne.n	8000cbe <_malloc_r+0xe2>
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	e00f      	b.n	8000c8c <_malloc_r+0xb0>
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	1b52      	subs	r2, r2, r5
 8000c70:	d41f      	bmi.n	8000cb2 <_malloc_r+0xd6>
 8000c72:	2a0b      	cmp	r2, #11
 8000c74:	d917      	bls.n	8000ca6 <_malloc_r+0xca>
 8000c76:	1961      	adds	r1, r4, r5
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	6025      	str	r5, [r4, #0]
 8000c7c:	bf18      	it	ne
 8000c7e:	6059      	strne	r1, [r3, #4]
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	bf08      	it	eq
 8000c84:	f8c8 1000 	streq.w	r1, [r8]
 8000c88:	5162      	str	r2, [r4, r5]
 8000c8a:	604b      	str	r3, [r1, #4]
 8000c8c:	4638      	mov	r0, r7
 8000c8e:	f104 060b 	add.w	r6, r4, #11
 8000c92:	f000 f829 	bl	8000ce8 <__malloc_unlock>
 8000c96:	f026 0607 	bic.w	r6, r6, #7
 8000c9a:	1d23      	adds	r3, r4, #4
 8000c9c:	1af2      	subs	r2, r6, r3
 8000c9e:	d0ae      	beq.n	8000bfe <_malloc_r+0x22>
 8000ca0:	1b9b      	subs	r3, r3, r6
 8000ca2:	50a3      	str	r3, [r4, r2]
 8000ca4:	e7ab      	b.n	8000bfe <_malloc_r+0x22>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	6862      	ldr	r2, [r4, #4]
 8000caa:	d1dd      	bne.n	8000c68 <_malloc_r+0x8c>
 8000cac:	f8c8 2000 	str.w	r2, [r8]
 8000cb0:	e7ec      	b.n	8000c8c <_malloc_r+0xb0>
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	6864      	ldr	r4, [r4, #4]
 8000cb6:	e7ac      	b.n	8000c12 <_malloc_r+0x36>
 8000cb8:	4634      	mov	r4, r6
 8000cba:	6876      	ldr	r6, [r6, #4]
 8000cbc:	e7b4      	b.n	8000c28 <_malloc_r+0x4c>
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	e7cc      	b.n	8000c5c <_malloc_r+0x80>
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	f000 f80e 	bl	8000ce8 <__malloc_unlock>
 8000ccc:	e797      	b.n	8000bfe <_malloc_r+0x22>
 8000cce:	6025      	str	r5, [r4, #0]
 8000cd0:	e7dc      	b.n	8000c8c <_malloc_r+0xb0>
 8000cd2:	605b      	str	r3, [r3, #4]
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	bf00      	nop
 8000cd8:	200001c0 	.word	0x200001c0

08000cdc <__malloc_lock>:
 8000cdc:	4801      	ldr	r0, [pc, #4]	; (8000ce4 <__malloc_lock+0x8>)
 8000cde:	f7ff bf10 	b.w	8000b02 <__retarget_lock_acquire_recursive>
 8000ce2:	bf00      	nop
 8000ce4:	200001bc 	.word	0x200001bc

08000ce8 <__malloc_unlock>:
 8000ce8:	4801      	ldr	r0, [pc, #4]	; (8000cf0 <__malloc_unlock+0x8>)
 8000cea:	f7ff bf0b 	b.w	8000b04 <__retarget_lock_release_recursive>
 8000cee:	bf00      	nop
 8000cf0:	200001bc 	.word	0x200001bc

08000cf4 <__sfputc_r>:
 8000cf4:	6893      	ldr	r3, [r2, #8]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	b410      	push	{r4}
 8000cfc:	6093      	str	r3, [r2, #8]
 8000cfe:	da07      	bge.n	8000d10 <__sfputc_r+0x1c>
 8000d00:	6994      	ldr	r4, [r2, #24]
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	db01      	blt.n	8000d0a <__sfputc_r+0x16>
 8000d06:	290a      	cmp	r1, #10
 8000d08:	d102      	bne.n	8000d10 <__sfputc_r+0x1c>
 8000d0a:	bc10      	pop	{r4}
 8000d0c:	f7ff bdeb 	b.w	80008e6 <__swbuf_r>
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	1c58      	adds	r0, r3, #1
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	7019      	strb	r1, [r3, #0]
 8000d18:	4608      	mov	r0, r1
 8000d1a:	bc10      	pop	{r4}
 8000d1c:	4770      	bx	lr

08000d1e <__sfputs_r>:
 8000d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d20:	4606      	mov	r6, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	4614      	mov	r4, r2
 8000d26:	18d5      	adds	r5, r2, r3
 8000d28:	42ac      	cmp	r4, r5
 8000d2a:	d101      	bne.n	8000d30 <__sfputs_r+0x12>
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	e007      	b.n	8000d40 <__sfputs_r+0x22>
 8000d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d34:	463a      	mov	r2, r7
 8000d36:	4630      	mov	r0, r6
 8000d38:	f7ff ffdc 	bl	8000cf4 <__sfputc_r>
 8000d3c:	1c43      	adds	r3, r0, #1
 8000d3e:	d1f3      	bne.n	8000d28 <__sfputs_r+0xa>
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d44 <_vfiprintf_r>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	460d      	mov	r5, r1
 8000d4a:	b09d      	sub	sp, #116	; 0x74
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	4698      	mov	r8, r3
 8000d50:	4606      	mov	r6, r0
 8000d52:	b118      	cbz	r0, 8000d5c <_vfiprintf_r+0x18>
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	b90b      	cbnz	r3, 8000d5c <_vfiprintf_r+0x18>
 8000d58:	f7ff fcde 	bl	8000718 <__sinit>
 8000d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d5e:	07d9      	lsls	r1, r3, #31
 8000d60:	d405      	bmi.n	8000d6e <_vfiprintf_r+0x2a>
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	059a      	lsls	r2, r3, #22
 8000d66:	d402      	bmi.n	8000d6e <_vfiprintf_r+0x2a>
 8000d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d6a:	f7ff feca 	bl	8000b02 <__retarget_lock_acquire_recursive>
 8000d6e:	89ab      	ldrh	r3, [r5, #12]
 8000d70:	071b      	lsls	r3, r3, #28
 8000d72:	d501      	bpl.n	8000d78 <_vfiprintf_r+0x34>
 8000d74:	692b      	ldr	r3, [r5, #16]
 8000d76:	b99b      	cbnz	r3, 8000da0 <_vfiprintf_r+0x5c>
 8000d78:	4629      	mov	r1, r5
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f7ff fdf0 	bl	8000960 <__swsetup_r>
 8000d80:	b170      	cbz	r0, 8000da0 <_vfiprintf_r+0x5c>
 8000d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d84:	07dc      	lsls	r4, r3, #31
 8000d86:	d504      	bpl.n	8000d92 <_vfiprintf_r+0x4e>
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	b01d      	add	sp, #116	; 0x74
 8000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	0598      	lsls	r0, r3, #22
 8000d96:	d4f7      	bmi.n	8000d88 <_vfiprintf_r+0x44>
 8000d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d9a:	f7ff feb3 	bl	8000b04 <__retarget_lock_release_recursive>
 8000d9e:	e7f3      	b.n	8000d88 <_vfiprintf_r+0x44>
 8000da0:	2300      	movs	r3, #0
 8000da2:	9309      	str	r3, [sp, #36]	; 0x24
 8000da4:	2320      	movs	r3, #32
 8000da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dae:	2330      	movs	r3, #48	; 0x30
 8000db0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f64 <_vfiprintf_r+0x220>
 8000db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000db8:	f04f 0901 	mov.w	r9, #1
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dc4:	b10a      	cbz	r2, 8000dca <_vfiprintf_r+0x86>
 8000dc6:	2a25      	cmp	r2, #37	; 0x25
 8000dc8:	d1f9      	bne.n	8000dbe <_vfiprintf_r+0x7a>
 8000dca:	ebba 0b04 	subs.w	fp, sl, r4
 8000dce:	d00b      	beq.n	8000de8 <_vfiprintf_r+0xa4>
 8000dd0:	465b      	mov	r3, fp
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f7ff ffa1 	bl	8000d1e <__sfputs_r>
 8000ddc:	3001      	adds	r0, #1
 8000dde:	f000 80a9 	beq.w	8000f34 <_vfiprintf_r+0x1f0>
 8000de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000de4:	445a      	add	r2, fp
 8000de6:	9209      	str	r2, [sp, #36]	; 0x24
 8000de8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a1 	beq.w	8000f34 <_vfiprintf_r+0x1f0>
 8000df2:	2300      	movs	r3, #0
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dfc:	f10a 0a01 	add.w	sl, sl, #1
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	9307      	str	r3, [sp, #28]
 8000e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e08:	931a      	str	r3, [sp, #104]	; 0x68
 8000e0a:	4654      	mov	r4, sl
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e12:	4854      	ldr	r0, [pc, #336]	; (8000f64 <_vfiprintf_r+0x220>)
 8000e14:	f7ff f9fc 	bl	8000210 <memchr>
 8000e18:	9a04      	ldr	r2, [sp, #16]
 8000e1a:	b9d8      	cbnz	r0, 8000e54 <_vfiprintf_r+0x110>
 8000e1c:	06d1      	lsls	r1, r2, #27
 8000e1e:	bf44      	itt	mi
 8000e20:	2320      	movmi	r3, #32
 8000e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e26:	0713      	lsls	r3, r2, #28
 8000e28:	bf44      	itt	mi
 8000e2a:	232b      	movmi	r3, #43	; 0x2b
 8000e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e30:	f89a 3000 	ldrb.w	r3, [sl]
 8000e34:	2b2a      	cmp	r3, #42	; 0x2a
 8000e36:	d015      	beq.n	8000e64 <_vfiprintf_r+0x120>
 8000e38:	9a07      	ldr	r2, [sp, #28]
 8000e3a:	4654      	mov	r4, sl
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f04f 0c0a 	mov.w	ip, #10
 8000e42:	4621      	mov	r1, r4
 8000e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e48:	3b30      	subs	r3, #48	; 0x30
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	d94d      	bls.n	8000eea <_vfiprintf_r+0x1a6>
 8000e4e:	b1b0      	cbz	r0, 8000e7e <_vfiprintf_r+0x13a>
 8000e50:	9207      	str	r2, [sp, #28]
 8000e52:	e014      	b.n	8000e7e <_vfiprintf_r+0x13a>
 8000e54:	eba0 0308 	sub.w	r3, r0, r8
 8000e58:	fa09 f303 	lsl.w	r3, r9, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	9304      	str	r3, [sp, #16]
 8000e60:	46a2      	mov	sl, r4
 8000e62:	e7d2      	b.n	8000e0a <_vfiprintf_r+0xc6>
 8000e64:	9b03      	ldr	r3, [sp, #12]
 8000e66:	1d19      	adds	r1, r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	9103      	str	r1, [sp, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bfbb      	ittet	lt
 8000e70:	425b      	neglt	r3, r3
 8000e72:	f042 0202 	orrlt.w	r2, r2, #2
 8000e76:	9307      	strge	r3, [sp, #28]
 8000e78:	9307      	strlt	r3, [sp, #28]
 8000e7a:	bfb8      	it	lt
 8000e7c:	9204      	strlt	r2, [sp, #16]
 8000e7e:	7823      	ldrb	r3, [r4, #0]
 8000e80:	2b2e      	cmp	r3, #46	; 0x2e
 8000e82:	d10c      	bne.n	8000e9e <_vfiprintf_r+0x15a>
 8000e84:	7863      	ldrb	r3, [r4, #1]
 8000e86:	2b2a      	cmp	r3, #42	; 0x2a
 8000e88:	d134      	bne.n	8000ef4 <_vfiprintf_r+0x1b0>
 8000e8a:	9b03      	ldr	r3, [sp, #12]
 8000e8c:	1d1a      	adds	r2, r3, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	9203      	str	r2, [sp, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bfb8      	it	lt
 8000e96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e9a:	3402      	adds	r4, #2
 8000e9c:	9305      	str	r3, [sp, #20]
 8000e9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f68 <_vfiprintf_r+0x224>
 8000ea2:	7821      	ldrb	r1, [r4, #0]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	f7ff f9b2 	bl	8000210 <memchr>
 8000eac:	b138      	cbz	r0, 8000ebe <_vfiprintf_r+0x17a>
 8000eae:	9b04      	ldr	r3, [sp, #16]
 8000eb0:	eba0 000a 	sub.w	r0, r0, sl
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	4082      	lsls	r2, r0
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	3401      	adds	r4, #1
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec2:	482a      	ldr	r0, [pc, #168]	; (8000f6c <_vfiprintf_r+0x228>)
 8000ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ec8:	2206      	movs	r2, #6
 8000eca:	f7ff f9a1 	bl	8000210 <memchr>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d03f      	beq.n	8000f52 <_vfiprintf_r+0x20e>
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <_vfiprintf_r+0x22c>)
 8000ed4:	bb1b      	cbnz	r3, 8000f1e <_vfiprintf_r+0x1da>
 8000ed6:	9b03      	ldr	r3, [sp, #12]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	f023 0307 	bic.w	r3, r3, #7
 8000ede:	3308      	adds	r3, #8
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ee4:	443b      	add	r3, r7
 8000ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ee8:	e768      	b.n	8000dbc <_vfiprintf_r+0x78>
 8000eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eee:	460c      	mov	r4, r1
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e7a6      	b.n	8000e42 <_vfiprintf_r+0xfe>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	3401      	adds	r4, #1
 8000ef8:	9305      	str	r3, [sp, #20]
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 0c0a 	mov.w	ip, #10
 8000f00:	4620      	mov	r0, r4
 8000f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f06:	3a30      	subs	r2, #48	; 0x30
 8000f08:	2a09      	cmp	r2, #9
 8000f0a:	d903      	bls.n	8000f14 <_vfiprintf_r+0x1d0>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0c6      	beq.n	8000e9e <_vfiprintf_r+0x15a>
 8000f10:	9105      	str	r1, [sp, #20]
 8000f12:	e7c4      	b.n	8000e9e <_vfiprintf_r+0x15a>
 8000f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f18:	4604      	mov	r4, r0
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e7f0      	b.n	8000f00 <_vfiprintf_r+0x1bc>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_vfiprintf_r+0x230>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4607      	mov	r7, r0
 8000f30:	1c78      	adds	r0, r7, #1
 8000f32:	d1d6      	bne.n	8000ee2 <_vfiprintf_r+0x19e>
 8000f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f36:	07d9      	lsls	r1, r3, #31
 8000f38:	d405      	bmi.n	8000f46 <_vfiprintf_r+0x202>
 8000f3a:	89ab      	ldrh	r3, [r5, #12]
 8000f3c:	059a      	lsls	r2, r3, #22
 8000f3e:	d402      	bmi.n	8000f46 <_vfiprintf_r+0x202>
 8000f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f42:	f7ff fddf 	bl	8000b04 <__retarget_lock_release_recursive>
 8000f46:	89ab      	ldrh	r3, [r5, #12]
 8000f48:	065b      	lsls	r3, r3, #25
 8000f4a:	f53f af1d 	bmi.w	8000d88 <_vfiprintf_r+0x44>
 8000f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f50:	e71c      	b.n	8000d8c <_vfiprintf_r+0x48>
 8000f52:	ab03      	add	r3, sp, #12
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	462a      	mov	r2, r5
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <_vfiprintf_r+0x230>)
 8000f5a:	a904      	add	r1, sp, #16
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f000 f879 	bl	8001054 <_printf_i>
 8000f62:	e7e4      	b.n	8000f2e <_vfiprintf_r+0x1ea>
 8000f64:	08001654 	.word	0x08001654
 8000f68:	0800165a 	.word	0x0800165a
 8000f6c:	0800165e 	.word	0x0800165e
 8000f70:	00000000 	.word	0x00000000
 8000f74:	08000d1f 	.word	0x08000d1f

08000f78 <_printf_common>:
 8000f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7c:	4616      	mov	r6, r2
 8000f7e:	4699      	mov	r9, r3
 8000f80:	688a      	ldr	r2, [r1, #8]
 8000f82:	690b      	ldr	r3, [r1, #16]
 8000f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bfb8      	it	lt
 8000f8c:	4613      	movlt	r3, r2
 8000f8e:	6033      	str	r3, [r6, #0]
 8000f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f94:	4607      	mov	r7, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	b10a      	cbz	r2, 8000f9e <_printf_common+0x26>
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	6033      	str	r3, [r6, #0]
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	0699      	lsls	r1, r3, #26
 8000fa2:	bf42      	ittt	mi
 8000fa4:	6833      	ldrmi	r3, [r6, #0]
 8000fa6:	3302      	addmi	r3, #2
 8000fa8:	6033      	strmi	r3, [r6, #0]
 8000faa:	6825      	ldr	r5, [r4, #0]
 8000fac:	f015 0506 	ands.w	r5, r5, #6
 8000fb0:	d106      	bne.n	8000fc0 <_printf_common+0x48>
 8000fb2:	f104 0a19 	add.w	sl, r4, #25
 8000fb6:	68e3      	ldr	r3, [r4, #12]
 8000fb8:	6832      	ldr	r2, [r6, #0]
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	42ab      	cmp	r3, r5
 8000fbe:	dc26      	bgt.n	800100e <_printf_common+0x96>
 8000fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fc4:	1e13      	subs	r3, r2, #0
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	bf18      	it	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	0692      	lsls	r2, r2, #26
 8000fce:	d42b      	bmi.n	8001028 <_printf_common+0xb0>
 8000fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fd4:	4649      	mov	r1, r9
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	47c0      	blx	r8
 8000fda:	3001      	adds	r0, #1
 8000fdc:	d01e      	beq.n	800101c <_printf_common+0xa4>
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	6922      	ldr	r2, [r4, #16]
 8000fe2:	f003 0306 	and.w	r3, r3, #6
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf02      	ittt	eq
 8000fea:	68e5      	ldreq	r5, [r4, #12]
 8000fec:	6833      	ldreq	r3, [r6, #0]
 8000fee:	1aed      	subeq	r5, r5, r3
 8000ff0:	68a3      	ldr	r3, [r4, #8]
 8000ff2:	bf0c      	ite	eq
 8000ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ff8:	2500      	movne	r5, #0
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	bfc4      	itt	gt
 8000ffe:	1a9b      	subgt	r3, r3, r2
 8001000:	18ed      	addgt	r5, r5, r3
 8001002:	2600      	movs	r6, #0
 8001004:	341a      	adds	r4, #26
 8001006:	42b5      	cmp	r5, r6
 8001008:	d11a      	bne.n	8001040 <_printf_common+0xc8>
 800100a:	2000      	movs	r0, #0
 800100c:	e008      	b.n	8001020 <_printf_common+0xa8>
 800100e:	2301      	movs	r3, #1
 8001010:	4652      	mov	r2, sl
 8001012:	4649      	mov	r1, r9
 8001014:	4638      	mov	r0, r7
 8001016:	47c0      	blx	r8
 8001018:	3001      	adds	r0, #1
 800101a:	d103      	bne.n	8001024 <_printf_common+0xac>
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	3501      	adds	r5, #1
 8001026:	e7c6      	b.n	8000fb6 <_printf_common+0x3e>
 8001028:	18e1      	adds	r1, r4, r3
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	2030      	movs	r0, #48	; 0x30
 800102e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001032:	4422      	add	r2, r4
 8001034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800103c:	3302      	adds	r3, #2
 800103e:	e7c7      	b.n	8000fd0 <_printf_common+0x58>
 8001040:	2301      	movs	r3, #1
 8001042:	4622      	mov	r2, r4
 8001044:	4649      	mov	r1, r9
 8001046:	4638      	mov	r0, r7
 8001048:	47c0      	blx	r8
 800104a:	3001      	adds	r0, #1
 800104c:	d0e6      	beq.n	800101c <_printf_common+0xa4>
 800104e:	3601      	adds	r6, #1
 8001050:	e7d9      	b.n	8001006 <_printf_common+0x8e>
	...

08001054 <_printf_i>:
 8001054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001058:	7e0f      	ldrb	r7, [r1, #24]
 800105a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800105c:	2f78      	cmp	r7, #120	; 0x78
 800105e:	4691      	mov	r9, r2
 8001060:	4680      	mov	r8, r0
 8001062:	460c      	mov	r4, r1
 8001064:	469a      	mov	sl, r3
 8001066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800106a:	d807      	bhi.n	800107c <_printf_i+0x28>
 800106c:	2f62      	cmp	r7, #98	; 0x62
 800106e:	d80a      	bhi.n	8001086 <_printf_i+0x32>
 8001070:	2f00      	cmp	r7, #0
 8001072:	f000 80d4 	beq.w	800121e <_printf_i+0x1ca>
 8001076:	2f58      	cmp	r7, #88	; 0x58
 8001078:	f000 80c0 	beq.w	80011fc <_printf_i+0x1a8>
 800107c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001084:	e03a      	b.n	80010fc <_printf_i+0xa8>
 8001086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800108a:	2b15      	cmp	r3, #21
 800108c:	d8f6      	bhi.n	800107c <_printf_i+0x28>
 800108e:	a101      	add	r1, pc, #4	; (adr r1, 8001094 <_printf_i+0x40>)
 8001090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001094:	080010ed 	.word	0x080010ed
 8001098:	08001101 	.word	0x08001101
 800109c:	0800107d 	.word	0x0800107d
 80010a0:	0800107d 	.word	0x0800107d
 80010a4:	0800107d 	.word	0x0800107d
 80010a8:	0800107d 	.word	0x0800107d
 80010ac:	08001101 	.word	0x08001101
 80010b0:	0800107d 	.word	0x0800107d
 80010b4:	0800107d 	.word	0x0800107d
 80010b8:	0800107d 	.word	0x0800107d
 80010bc:	0800107d 	.word	0x0800107d
 80010c0:	08001205 	.word	0x08001205
 80010c4:	0800112d 	.word	0x0800112d
 80010c8:	080011bf 	.word	0x080011bf
 80010cc:	0800107d 	.word	0x0800107d
 80010d0:	0800107d 	.word	0x0800107d
 80010d4:	08001227 	.word	0x08001227
 80010d8:	0800107d 	.word	0x0800107d
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	0800107d 	.word	0x0800107d
 80010e4:	0800107d 	.word	0x0800107d
 80010e8:	080011c7 	.word	0x080011c7
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	1d1a      	adds	r2, r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	602a      	str	r2, [r5, #0]
 80010f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010fc:	2301      	movs	r3, #1
 80010fe:	e09f      	b.n	8001240 <_printf_i+0x1ec>
 8001100:	6820      	ldr	r0, [r4, #0]
 8001102:	682b      	ldr	r3, [r5, #0]
 8001104:	0607      	lsls	r7, r0, #24
 8001106:	f103 0104 	add.w	r1, r3, #4
 800110a:	6029      	str	r1, [r5, #0]
 800110c:	d501      	bpl.n	8001112 <_printf_i+0xbe>
 800110e:	681e      	ldr	r6, [r3, #0]
 8001110:	e003      	b.n	800111a <_printf_i+0xc6>
 8001112:	0646      	lsls	r6, r0, #25
 8001114:	d5fb      	bpl.n	800110e <_printf_i+0xba>
 8001116:	f9b3 6000 	ldrsh.w	r6, [r3]
 800111a:	2e00      	cmp	r6, #0
 800111c:	da03      	bge.n	8001126 <_printf_i+0xd2>
 800111e:	232d      	movs	r3, #45	; 0x2d
 8001120:	4276      	negs	r6, r6
 8001122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001126:	485a      	ldr	r0, [pc, #360]	; (8001290 <_printf_i+0x23c>)
 8001128:	230a      	movs	r3, #10
 800112a:	e012      	b.n	8001152 <_printf_i+0xfe>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	6820      	ldr	r0, [r4, #0]
 8001130:	1d19      	adds	r1, r3, #4
 8001132:	6029      	str	r1, [r5, #0]
 8001134:	0605      	lsls	r5, r0, #24
 8001136:	d501      	bpl.n	800113c <_printf_i+0xe8>
 8001138:	681e      	ldr	r6, [r3, #0]
 800113a:	e002      	b.n	8001142 <_printf_i+0xee>
 800113c:	0641      	lsls	r1, r0, #25
 800113e:	d5fb      	bpl.n	8001138 <_printf_i+0xe4>
 8001140:	881e      	ldrh	r6, [r3, #0]
 8001142:	4853      	ldr	r0, [pc, #332]	; (8001290 <_printf_i+0x23c>)
 8001144:	2f6f      	cmp	r7, #111	; 0x6f
 8001146:	bf0c      	ite	eq
 8001148:	2308      	moveq	r3, #8
 800114a:	230a      	movne	r3, #10
 800114c:	2100      	movs	r1, #0
 800114e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001152:	6865      	ldr	r5, [r4, #4]
 8001154:	60a5      	str	r5, [r4, #8]
 8001156:	2d00      	cmp	r5, #0
 8001158:	bfa2      	ittt	ge
 800115a:	6821      	ldrge	r1, [r4, #0]
 800115c:	f021 0104 	bicge.w	r1, r1, #4
 8001160:	6021      	strge	r1, [r4, #0]
 8001162:	b90e      	cbnz	r6, 8001168 <_printf_i+0x114>
 8001164:	2d00      	cmp	r5, #0
 8001166:	d04b      	beq.n	8001200 <_printf_i+0x1ac>
 8001168:	4615      	mov	r5, r2
 800116a:	fbb6 f1f3 	udiv	r1, r6, r3
 800116e:	fb03 6711 	mls	r7, r3, r1, r6
 8001172:	5dc7      	ldrb	r7, [r0, r7]
 8001174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001178:	4637      	mov	r7, r6
 800117a:	42bb      	cmp	r3, r7
 800117c:	460e      	mov	r6, r1
 800117e:	d9f4      	bls.n	800116a <_printf_i+0x116>
 8001180:	2b08      	cmp	r3, #8
 8001182:	d10b      	bne.n	800119c <_printf_i+0x148>
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	07de      	lsls	r6, r3, #31
 8001188:	d508      	bpl.n	800119c <_printf_i+0x148>
 800118a:	6923      	ldr	r3, [r4, #16]
 800118c:	6861      	ldr	r1, [r4, #4]
 800118e:	4299      	cmp	r1, r3
 8001190:	bfde      	ittt	le
 8001192:	2330      	movle	r3, #48	; 0x30
 8001194:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001198:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800119c:	1b52      	subs	r2, r2, r5
 800119e:	6122      	str	r2, [r4, #16]
 80011a0:	f8cd a000 	str.w	sl, [sp]
 80011a4:	464b      	mov	r3, r9
 80011a6:	aa03      	add	r2, sp, #12
 80011a8:	4621      	mov	r1, r4
 80011aa:	4640      	mov	r0, r8
 80011ac:	f7ff fee4 	bl	8000f78 <_printf_common>
 80011b0:	3001      	adds	r0, #1
 80011b2:	d14a      	bne.n	800124a <_printf_i+0x1f6>
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b8:	b004      	add	sp, #16
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	f043 0320 	orr.w	r3, r3, #32
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	4833      	ldr	r0, [pc, #204]	; (8001294 <_printf_i+0x240>)
 80011c8:	2778      	movs	r7, #120	; 0x78
 80011ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	6829      	ldr	r1, [r5, #0]
 80011d2:	061f      	lsls	r7, r3, #24
 80011d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80011d8:	d402      	bmi.n	80011e0 <_printf_i+0x18c>
 80011da:	065f      	lsls	r7, r3, #25
 80011dc:	bf48      	it	mi
 80011de:	b2b6      	uxthmi	r6, r6
 80011e0:	07df      	lsls	r7, r3, #31
 80011e2:	bf48      	it	mi
 80011e4:	f043 0320 	orrmi.w	r3, r3, #32
 80011e8:	6029      	str	r1, [r5, #0]
 80011ea:	bf48      	it	mi
 80011ec:	6023      	strmi	r3, [r4, #0]
 80011ee:	b91e      	cbnz	r6, 80011f8 <_printf_i+0x1a4>
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	f023 0320 	bic.w	r3, r3, #32
 80011f6:	6023      	str	r3, [r4, #0]
 80011f8:	2310      	movs	r3, #16
 80011fa:	e7a7      	b.n	800114c <_printf_i+0xf8>
 80011fc:	4824      	ldr	r0, [pc, #144]	; (8001290 <_printf_i+0x23c>)
 80011fe:	e7e4      	b.n	80011ca <_printf_i+0x176>
 8001200:	4615      	mov	r5, r2
 8001202:	e7bd      	b.n	8001180 <_printf_i+0x12c>
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	6826      	ldr	r6, [r4, #0]
 8001208:	6961      	ldr	r1, [r4, #20]
 800120a:	1d18      	adds	r0, r3, #4
 800120c:	6028      	str	r0, [r5, #0]
 800120e:	0635      	lsls	r5, r6, #24
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	d501      	bpl.n	8001218 <_printf_i+0x1c4>
 8001214:	6019      	str	r1, [r3, #0]
 8001216:	e002      	b.n	800121e <_printf_i+0x1ca>
 8001218:	0670      	lsls	r0, r6, #25
 800121a:	d5fb      	bpl.n	8001214 <_printf_i+0x1c0>
 800121c:	8019      	strh	r1, [r3, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	6123      	str	r3, [r4, #16]
 8001222:	4615      	mov	r5, r2
 8001224:	e7bc      	b.n	80011a0 <_printf_i+0x14c>
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	1d1a      	adds	r2, r3, #4
 800122a:	602a      	str	r2, [r5, #0]
 800122c:	681d      	ldr	r5, [r3, #0]
 800122e:	6862      	ldr	r2, [r4, #4]
 8001230:	2100      	movs	r1, #0
 8001232:	4628      	mov	r0, r5
 8001234:	f7fe ffec 	bl	8000210 <memchr>
 8001238:	b108      	cbz	r0, 800123e <_printf_i+0x1ea>
 800123a:	1b40      	subs	r0, r0, r5
 800123c:	6060      	str	r0, [r4, #4]
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	6123      	str	r3, [r4, #16]
 8001242:	2300      	movs	r3, #0
 8001244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001248:	e7aa      	b.n	80011a0 <_printf_i+0x14c>
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	462a      	mov	r2, r5
 800124e:	4649      	mov	r1, r9
 8001250:	4640      	mov	r0, r8
 8001252:	47d0      	blx	sl
 8001254:	3001      	adds	r0, #1
 8001256:	d0ad      	beq.n	80011b4 <_printf_i+0x160>
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	079b      	lsls	r3, r3, #30
 800125c:	d413      	bmi.n	8001286 <_printf_i+0x232>
 800125e:	68e0      	ldr	r0, [r4, #12]
 8001260:	9b03      	ldr	r3, [sp, #12]
 8001262:	4298      	cmp	r0, r3
 8001264:	bfb8      	it	lt
 8001266:	4618      	movlt	r0, r3
 8001268:	e7a6      	b.n	80011b8 <_printf_i+0x164>
 800126a:	2301      	movs	r3, #1
 800126c:	4632      	mov	r2, r6
 800126e:	4649      	mov	r1, r9
 8001270:	4640      	mov	r0, r8
 8001272:	47d0      	blx	sl
 8001274:	3001      	adds	r0, #1
 8001276:	d09d      	beq.n	80011b4 <_printf_i+0x160>
 8001278:	3501      	adds	r5, #1
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	9903      	ldr	r1, [sp, #12]
 800127e:	1a5b      	subs	r3, r3, r1
 8001280:	42ab      	cmp	r3, r5
 8001282:	dcf2      	bgt.n	800126a <_printf_i+0x216>
 8001284:	e7eb      	b.n	800125e <_printf_i+0x20a>
 8001286:	2500      	movs	r5, #0
 8001288:	f104 0619 	add.w	r6, r4, #25
 800128c:	e7f5      	b.n	800127a <_printf_i+0x226>
 800128e:	bf00      	nop
 8001290:	08001665 	.word	0x08001665
 8001294:	08001676 	.word	0x08001676

08001298 <__sflush_r>:
 8001298:	898a      	ldrh	r2, [r1, #12]
 800129a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129c:	4605      	mov	r5, r0
 800129e:	0710      	lsls	r0, r2, #28
 80012a0:	460c      	mov	r4, r1
 80012a2:	d457      	bmi.n	8001354 <__sflush_r+0xbc>
 80012a4:	684b      	ldr	r3, [r1, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc04      	bgt.n	80012b4 <__sflush_r+0x1c>
 80012aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dc01      	bgt.n	80012b4 <__sflush_r+0x1c>
 80012b0:	2000      	movs	r0, #0
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d0fa      	beq.n	80012b0 <__sflush_r+0x18>
 80012ba:	2300      	movs	r3, #0
 80012bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012c0:	682f      	ldr	r7, [r5, #0]
 80012c2:	6a21      	ldr	r1, [r4, #32]
 80012c4:	602b      	str	r3, [r5, #0]
 80012c6:	d032      	beq.n	800132e <__sflush_r+0x96>
 80012c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	075a      	lsls	r2, r3, #29
 80012ce:	d505      	bpl.n	80012dc <__sflush_r+0x44>
 80012d0:	6863      	ldr	r3, [r4, #4]
 80012d2:	1ac0      	subs	r0, r0, r3
 80012d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012d6:	b10b      	cbz	r3, 80012dc <__sflush_r+0x44>
 80012d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012da:	1ac0      	subs	r0, r0, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	4602      	mov	r2, r0
 80012e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012e2:	6a21      	ldr	r1, [r4, #32]
 80012e4:	4628      	mov	r0, r5
 80012e6:	47b0      	blx	r6
 80012e8:	1c43      	adds	r3, r0, #1
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	d106      	bne.n	80012fc <__sflush_r+0x64>
 80012ee:	6829      	ldr	r1, [r5, #0]
 80012f0:	291d      	cmp	r1, #29
 80012f2:	d82b      	bhi.n	800134c <__sflush_r+0xb4>
 80012f4:	4a28      	ldr	r2, [pc, #160]	; (8001398 <__sflush_r+0x100>)
 80012f6:	410a      	asrs	r2, r1
 80012f8:	07d6      	lsls	r6, r2, #31
 80012fa:	d427      	bmi.n	800134c <__sflush_r+0xb4>
 80012fc:	2200      	movs	r2, #0
 80012fe:	6062      	str	r2, [r4, #4]
 8001300:	04d9      	lsls	r1, r3, #19
 8001302:	6922      	ldr	r2, [r4, #16]
 8001304:	6022      	str	r2, [r4, #0]
 8001306:	d504      	bpl.n	8001312 <__sflush_r+0x7a>
 8001308:	1c42      	adds	r2, r0, #1
 800130a:	d101      	bne.n	8001310 <__sflush_r+0x78>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	b903      	cbnz	r3, 8001312 <__sflush_r+0x7a>
 8001310:	6560      	str	r0, [r4, #84]	; 0x54
 8001312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001314:	602f      	str	r7, [r5, #0]
 8001316:	2900      	cmp	r1, #0
 8001318:	d0ca      	beq.n	80012b0 <__sflush_r+0x18>
 800131a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800131e:	4299      	cmp	r1, r3
 8001320:	d002      	beq.n	8001328 <__sflush_r+0x90>
 8001322:	4628      	mov	r0, r5
 8001324:	f7ff fbf0 	bl	8000b08 <_free_r>
 8001328:	2000      	movs	r0, #0
 800132a:	6360      	str	r0, [r4, #52]	; 0x34
 800132c:	e7c1      	b.n	80012b2 <__sflush_r+0x1a>
 800132e:	2301      	movs	r3, #1
 8001330:	4628      	mov	r0, r5
 8001332:	47b0      	blx	r6
 8001334:	1c41      	adds	r1, r0, #1
 8001336:	d1c8      	bne.n	80012ca <__sflush_r+0x32>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c5      	beq.n	80012ca <__sflush_r+0x32>
 800133e:	2b1d      	cmp	r3, #29
 8001340:	d001      	beq.n	8001346 <__sflush_r+0xae>
 8001342:	2b16      	cmp	r3, #22
 8001344:	d101      	bne.n	800134a <__sflush_r+0xb2>
 8001346:	602f      	str	r7, [r5, #0]
 8001348:	e7b2      	b.n	80012b0 <__sflush_r+0x18>
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	e7ae      	b.n	80012b2 <__sflush_r+0x1a>
 8001354:	690f      	ldr	r7, [r1, #16]
 8001356:	2f00      	cmp	r7, #0
 8001358:	d0aa      	beq.n	80012b0 <__sflush_r+0x18>
 800135a:	0793      	lsls	r3, r2, #30
 800135c:	680e      	ldr	r6, [r1, #0]
 800135e:	bf08      	it	eq
 8001360:	694b      	ldreq	r3, [r1, #20]
 8001362:	600f      	str	r7, [r1, #0]
 8001364:	bf18      	it	ne
 8001366:	2300      	movne	r3, #0
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	2e00      	cmp	r6, #0
 800136e:	dd9f      	ble.n	80012b0 <__sflush_r+0x18>
 8001370:	6a21      	ldr	r1, [r4, #32]
 8001372:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001376:	4633      	mov	r3, r6
 8001378:	463a      	mov	r2, r7
 800137a:	4628      	mov	r0, r5
 800137c:	47e0      	blx	ip
 800137e:	2800      	cmp	r0, #0
 8001380:	dc06      	bgt.n	8001390 <__sflush_r+0xf8>
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	81a3      	strh	r3, [r4, #12]
 800138a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800138e:	e790      	b.n	80012b2 <__sflush_r+0x1a>
 8001390:	4407      	add	r7, r0
 8001392:	1a36      	subs	r6, r6, r0
 8001394:	e7ea      	b.n	800136c <__sflush_r+0xd4>
 8001396:	bf00      	nop
 8001398:	dfbffffe 	.word	0xdfbffffe

0800139c <_fflush_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	690b      	ldr	r3, [r1, #16]
 80013a0:	4605      	mov	r5, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	b913      	cbnz	r3, 80013ac <_fflush_r+0x10>
 80013a6:	2500      	movs	r5, #0
 80013a8:	4628      	mov	r0, r5
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	b118      	cbz	r0, 80013b6 <_fflush_r+0x1a>
 80013ae:	6a03      	ldr	r3, [r0, #32]
 80013b0:	b90b      	cbnz	r3, 80013b6 <_fflush_r+0x1a>
 80013b2:	f7ff f9b1 	bl	8000718 <__sinit>
 80013b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f3      	beq.n	80013a6 <_fflush_r+0xa>
 80013be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013c0:	07d0      	lsls	r0, r2, #31
 80013c2:	d404      	bmi.n	80013ce <_fflush_r+0x32>
 80013c4:	0599      	lsls	r1, r3, #22
 80013c6:	d402      	bmi.n	80013ce <_fflush_r+0x32>
 80013c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ca:	f7ff fb9a 	bl	8000b02 <__retarget_lock_acquire_recursive>
 80013ce:	4628      	mov	r0, r5
 80013d0:	4621      	mov	r1, r4
 80013d2:	f7ff ff61 	bl	8001298 <__sflush_r>
 80013d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013d8:	07da      	lsls	r2, r3, #31
 80013da:	4605      	mov	r5, r0
 80013dc:	d4e4      	bmi.n	80013a8 <_fflush_r+0xc>
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	059b      	lsls	r3, r3, #22
 80013e2:	d4e1      	bmi.n	80013a8 <_fflush_r+0xc>
 80013e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e6:	f7ff fb8d 	bl	8000b04 <__retarget_lock_release_recursive>
 80013ea:	e7dd      	b.n	80013a8 <_fflush_r+0xc>

080013ec <__swhatbuf_r>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	460c      	mov	r4, r1
 80013f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f4:	2900      	cmp	r1, #0
 80013f6:	b096      	sub	sp, #88	; 0x58
 80013f8:	4615      	mov	r5, r2
 80013fa:	461e      	mov	r6, r3
 80013fc:	da0d      	bge.n	800141a <__swhatbuf_r+0x2e>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	bf0c      	ite	eq
 800140a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800140e:	2340      	movne	r3, #64	; 0x40
 8001410:	2000      	movs	r0, #0
 8001412:	6031      	str	r1, [r6, #0]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	b016      	add	sp, #88	; 0x58
 8001418:	bd70      	pop	{r4, r5, r6, pc}
 800141a:	466a      	mov	r2, sp
 800141c:	f000 f848 	bl	80014b0 <_fstat_r>
 8001420:	2800      	cmp	r0, #0
 8001422:	dbec      	blt.n	80013fe <__swhatbuf_r+0x12>
 8001424:	9901      	ldr	r1, [sp, #4]
 8001426:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800142a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800142e:	4259      	negs	r1, r3
 8001430:	4159      	adcs	r1, r3
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	e7eb      	b.n	8001410 <__swhatbuf_r+0x24>

08001438 <__smakebuf_r>:
 8001438:	898b      	ldrh	r3, [r1, #12]
 800143a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800143c:	079d      	lsls	r5, r3, #30
 800143e:	4606      	mov	r6, r0
 8001440:	460c      	mov	r4, r1
 8001442:	d507      	bpl.n	8001454 <__smakebuf_r+0x1c>
 8001444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001448:	6023      	str	r3, [r4, #0]
 800144a:	6123      	str	r3, [r4, #16]
 800144c:	2301      	movs	r3, #1
 800144e:	6163      	str	r3, [r4, #20]
 8001450:	b002      	add	sp, #8
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	ab01      	add	r3, sp, #4
 8001456:	466a      	mov	r2, sp
 8001458:	f7ff ffc8 	bl	80013ec <__swhatbuf_r>
 800145c:	9900      	ldr	r1, [sp, #0]
 800145e:	4605      	mov	r5, r0
 8001460:	4630      	mov	r0, r6
 8001462:	f7ff fbbb 	bl	8000bdc <_malloc_r>
 8001466:	b948      	cbnz	r0, 800147c <__smakebuf_r+0x44>
 8001468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800146c:	059a      	lsls	r2, r3, #22
 800146e:	d4ef      	bmi.n	8001450 <__smakebuf_r+0x18>
 8001470:	f023 0303 	bic.w	r3, r3, #3
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	e7e3      	b.n	8001444 <__smakebuf_r+0xc>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	6020      	str	r0, [r4, #0]
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	9b00      	ldr	r3, [sp, #0]
 8001488:	6163      	str	r3, [r4, #20]
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	6120      	str	r0, [r4, #16]
 800148e:	b15b      	cbz	r3, 80014a8 <__smakebuf_r+0x70>
 8001490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001494:	4630      	mov	r0, r6
 8001496:	f000 f81d 	bl	80014d4 <_isatty_r>
 800149a:	b128      	cbz	r0, 80014a8 <__smakebuf_r+0x70>
 800149c:	89a3      	ldrh	r3, [r4, #12]
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	89a3      	ldrh	r3, [r4, #12]
 80014aa:	431d      	orrs	r5, r3
 80014ac:	81a5      	strh	r5, [r4, #12]
 80014ae:	e7cf      	b.n	8001450 <__smakebuf_r+0x18>

080014b0 <_fstat_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d07      	ldr	r5, [pc, #28]	; (80014d0 <_fstat_r+0x20>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	f7ff f819 	bl	80004f4 <_fstat>
 80014c2:	1c43      	adds	r3, r0, #1
 80014c4:	d102      	bne.n	80014cc <_fstat_r+0x1c>
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	b103      	cbz	r3, 80014cc <_fstat_r+0x1c>
 80014ca:	6023      	str	r3, [r4, #0]
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	200001b8 	.word	0x200001b8

080014d4 <_isatty_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	; (80014f0 <_isatty_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff f817 	bl	8000512 <_isatty>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_isatty_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_isatty_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200001b8 	.word	0x200001b8

080014f4 <_sbrk_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d06      	ldr	r5, [pc, #24]	; (8001510 <_sbrk_r+0x1c>)
 80014f8:	2300      	movs	r3, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	f7ff f81e 	bl	8000540 <_sbrk>
 8001504:	1c43      	adds	r3, r0, #1
 8001506:	d102      	bne.n	800150e <_sbrk_r+0x1a>
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	b103      	cbz	r3, 800150e <_sbrk_r+0x1a>
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	bd38      	pop	{r3, r4, r5, pc}
 8001510:	200001b8 	.word	0x200001b8

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr
