
08USART3intPend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b7c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d50  08000d50  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d50  08000d50  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d50  08000d50  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d54  08000d54  00010d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000db4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000db4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000956  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000032a  00000000  00000000  00020a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00020d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c4  00000000  00000000  00020e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c8f  00000000  00000000  00020f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011f2  00000000  00000000  00023bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000978f  00000000  00000000  00024db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009ec  00000000  00000000  0002e544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0002ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d28 	.word	0x08000d28

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000d28 	.word	0x08000d28

08000204 <main>:

// MACROS
#define USART3_IRQNO 39

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0

	// 1. Manually pend the pending bit for the USART3 IRQ number in NVIC
	// 0XE000E200 is the Address of the first 32 bit register for the Interrupt Set-Pending Registers
	// Add 4 to go the the second register because the 39 bit is in the second register
	// 0XE000E204 is the correct register
	uint32_t *pISPR1 = (uint32_t*)0XE000E204;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <main+0x28>)
 800020c:	607b      	str	r3, [r7, #4]

	*pISPR1 |= (1 << (USART3_IRQNO % 32));
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]


	// 2. Enable the USART3 IRQ number in NVIC
	// 0xE000E100 is the address first Interrupt Set-enable Registers
	// Add 4 to get to the next register
	uint32_t *pISER1 = (uint32_t*)0xE000E104;
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <main+0x2c>)
 800021c:	603b      	str	r3, [r7, #0]

	*pISER1 |= (1 << (USART3_IRQNO % 32));
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	for(;;);
 800022a:	e7fe      	b.n	800022a <main+0x26>
 800022c:	e000e204 	.word	0xe000e204
 8000230:	e000e104 	.word	0xe000e104

08000234 <USART3_IRQHandler>:
}


// Implement the ISR for USART3
void USART3_IRQHandler(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	printf("In USART3 ISR\n");
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <USART3_IRQHandler+0x10>)
 800023a:	f000 f9e5 	bl	8000608 <puts>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	08000d40 	.word	0x08000d40

08000248 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	e00a      	b.n	8000270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800025a:	f3af 8000 	nop.w
 800025e:	4601      	mov	r1, r0
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	60ba      	str	r2, [r7, #8]
 8000266:	b2ca      	uxtb	r2, r1
 8000268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	3301      	adds	r3, #1
 800026e:	617b      	str	r3, [r7, #20]
 8000270:	697a      	ldr	r2, [r7, #20]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dbf0      	blt.n	800025a <_read+0x12>
  }

  return len;
 8000278:	687b      	ldr	r3, [r7, #4]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}

08000282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000282:	b580      	push	{r7, lr}
 8000284:	b086      	sub	sp, #24
 8000286:	af00      	add	r7, sp, #0
 8000288:	60f8      	str	r0, [r7, #12]
 800028a:	60b9      	str	r1, [r7, #8]
 800028c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
 8000292:	e009      	b.n	80002a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	60ba      	str	r2, [r7, #8]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	3301      	adds	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	697a      	ldr	r2, [r7, #20]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	dbf1      	blt.n	8000294 <_write+0x12>
  }
  return len;
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <_close>:

int _close(int file)
{
 80002ba:	b480      	push	{r7}
 80002bc:	b083      	sub	sp, #12
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002e0:	605a      	str	r2, [r3, #4]
  return 0;
 80002e2:	2300      	movs	r3, #0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <_isatty>:

int _isatty(int file)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000302:	b480      	push	{r7}
 8000304:	b085      	sub	sp, #20
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800030e:	2300      	movs	r3, #0
}
 8000310:	4618      	mov	r0, r3
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
	...

0800031c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <_sbrk+0x5c>)
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <_sbrk+0x60>)
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <_sbrk+0x64>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d102      	bne.n	800033e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <_sbrk+0x64>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <_sbrk+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <_sbrk+0x64>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	693a      	ldr	r2, [r7, #16]
 8000348:	429a      	cmp	r2, r3
 800034a:	d207      	bcs.n	800035c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800034c:	f000 fa8a 	bl	8000864 <__errno>
 8000350:	4603      	mov	r3, r0
 8000352:	220c      	movs	r2, #12
 8000354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800035a:	e009      	b.n	8000370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <_sbrk+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <_sbrk+0x64>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <_sbrk+0x64>)
 800036c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800036e:	68fb      	ldr	r3, [r7, #12]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20020000 	.word	0x20020000
 800037c:	00000400 	.word	0x00000400
 8000380:	20000078 	.word	0x20000078
 8000384:	200001c8 	.word	0x200001c8

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 fa5b 	bl	8000870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff23 	bl	8000204 <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80003cc:	08000d58 	.word	0x08000d58
  ldr r2, =_sbss
 80003d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80003d4:	200001c8 	.word	0x200001c8

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <std>:
 80003dc:	2300      	movs	r3, #0
 80003de:	b510      	push	{r4, lr}
 80003e0:	4604      	mov	r4, r0
 80003e2:	e9c0 3300 	strd	r3, r3, [r0]
 80003e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80003ea:	6083      	str	r3, [r0, #8]
 80003ec:	8181      	strh	r1, [r0, #12]
 80003ee:	6643      	str	r3, [r0, #100]	; 0x64
 80003f0:	81c2      	strh	r2, [r0, #14]
 80003f2:	6183      	str	r3, [r0, #24]
 80003f4:	4619      	mov	r1, r3
 80003f6:	2208      	movs	r2, #8
 80003f8:	305c      	adds	r0, #92	; 0x5c
 80003fa:	f000 f9e5 	bl	80007c8 <memset>
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <std+0x58>)
 8000400:	6263      	str	r3, [r4, #36]	; 0x24
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <std+0x5c>)
 8000404:	62a3      	str	r3, [r4, #40]	; 0x28
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <std+0x60>)
 8000408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <std+0x64>)
 800040c:	6323      	str	r3, [r4, #48]	; 0x30
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <std+0x68>)
 8000410:	6224      	str	r4, [r4, #32]
 8000412:	429c      	cmp	r4, r3
 8000414:	d006      	beq.n	8000424 <std+0x48>
 8000416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800041a:	4294      	cmp	r4, r2
 800041c:	d002      	beq.n	8000424 <std+0x48>
 800041e:	33d0      	adds	r3, #208	; 0xd0
 8000420:	429c      	cmp	r4, r3
 8000422:	d105      	bne.n	8000430 <std+0x54>
 8000424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800042c:	f000 ba44 	b.w	80008b8 <__retarget_lock_init_recursive>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	bf00      	nop
 8000434:	08000619 	.word	0x08000619
 8000438:	0800063b 	.word	0x0800063b
 800043c:	08000673 	.word	0x08000673
 8000440:	08000697 	.word	0x08000697
 8000444:	2000007c 	.word	0x2000007c

08000448 <stdio_exit_handler>:
 8000448:	4a02      	ldr	r2, [pc, #8]	; (8000454 <stdio_exit_handler+0xc>)
 800044a:	4903      	ldr	r1, [pc, #12]	; (8000458 <stdio_exit_handler+0x10>)
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <stdio_exit_handler+0x14>)
 800044e:	f000 b869 	b.w	8000524 <_fwalk_sglue>
 8000452:	bf00      	nop
 8000454:	20000000 	.word	0x20000000
 8000458:	08000bb1 	.word	0x08000bb1
 800045c:	2000000c 	.word	0x2000000c

08000460 <cleanup_stdio>:
 8000460:	6841      	ldr	r1, [r0, #4]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <cleanup_stdio+0x34>)
 8000464:	4299      	cmp	r1, r3
 8000466:	b510      	push	{r4, lr}
 8000468:	4604      	mov	r4, r0
 800046a:	d001      	beq.n	8000470 <cleanup_stdio+0x10>
 800046c:	f000 fba0 	bl	8000bb0 <_fflush_r>
 8000470:	68a1      	ldr	r1, [r4, #8]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <cleanup_stdio+0x38>)
 8000474:	4299      	cmp	r1, r3
 8000476:	d002      	beq.n	800047e <cleanup_stdio+0x1e>
 8000478:	4620      	mov	r0, r4
 800047a:	f000 fb99 	bl	8000bb0 <_fflush_r>
 800047e:	68e1      	ldr	r1, [r4, #12]
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <cleanup_stdio+0x3c>)
 8000482:	4299      	cmp	r1, r3
 8000484:	d004      	beq.n	8000490 <cleanup_stdio+0x30>
 8000486:	4620      	mov	r0, r4
 8000488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800048c:	f000 bb90 	b.w	8000bb0 <_fflush_r>
 8000490:	bd10      	pop	{r4, pc}
 8000492:	bf00      	nop
 8000494:	2000007c 	.word	0x2000007c
 8000498:	200000e4 	.word	0x200000e4
 800049c:	2000014c 	.word	0x2000014c

080004a0 <global_stdio_init.part.0>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <global_stdio_init.part.0+0x30>)
 80004a4:	4c0b      	ldr	r4, [pc, #44]	; (80004d4 <global_stdio_init.part.0+0x34>)
 80004a6:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <global_stdio_init.part.0+0x38>)
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	4620      	mov	r0, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	2104      	movs	r1, #4
 80004b0:	f7ff ff94 	bl	80003dc <std>
 80004b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80004b8:	2201      	movs	r2, #1
 80004ba:	2109      	movs	r1, #9
 80004bc:	f7ff ff8e 	bl	80003dc <std>
 80004c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80004c4:	2202      	movs	r2, #2
 80004c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004ca:	2112      	movs	r1, #18
 80004cc:	f7ff bf86 	b.w	80003dc <std>
 80004d0:	200001b4 	.word	0x200001b4
 80004d4:	2000007c 	.word	0x2000007c
 80004d8:	08000449 	.word	0x08000449

080004dc <__sfp_lock_acquire>:
 80004dc:	4801      	ldr	r0, [pc, #4]	; (80004e4 <__sfp_lock_acquire+0x8>)
 80004de:	f000 b9ec 	b.w	80008ba <__retarget_lock_acquire_recursive>
 80004e2:	bf00      	nop
 80004e4:	200001bd 	.word	0x200001bd

080004e8 <__sfp_lock_release>:
 80004e8:	4801      	ldr	r0, [pc, #4]	; (80004f0 <__sfp_lock_release+0x8>)
 80004ea:	f000 b9e7 	b.w	80008bc <__retarget_lock_release_recursive>
 80004ee:	bf00      	nop
 80004f0:	200001bd 	.word	0x200001bd

080004f4 <__sinit>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	4604      	mov	r4, r0
 80004f8:	f7ff fff0 	bl	80004dc <__sfp_lock_acquire>
 80004fc:	6a23      	ldr	r3, [r4, #32]
 80004fe:	b11b      	cbz	r3, 8000508 <__sinit+0x14>
 8000500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000504:	f7ff bff0 	b.w	80004e8 <__sfp_lock_release>
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <__sinit+0x28>)
 800050a:	6223      	str	r3, [r4, #32]
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <__sinit+0x2c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f5      	bne.n	8000500 <__sinit+0xc>
 8000514:	f7ff ffc4 	bl	80004a0 <global_stdio_init.part.0>
 8000518:	e7f2      	b.n	8000500 <__sinit+0xc>
 800051a:	bf00      	nop
 800051c:	08000461 	.word	0x08000461
 8000520:	200001b4 	.word	0x200001b4

08000524 <_fwalk_sglue>:
 8000524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000528:	4607      	mov	r7, r0
 800052a:	4688      	mov	r8, r1
 800052c:	4614      	mov	r4, r2
 800052e:	2600      	movs	r6, #0
 8000530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000534:	f1b9 0901 	subs.w	r9, r9, #1
 8000538:	d505      	bpl.n	8000546 <_fwalk_sglue+0x22>
 800053a:	6824      	ldr	r4, [r4, #0]
 800053c:	2c00      	cmp	r4, #0
 800053e:	d1f7      	bne.n	8000530 <_fwalk_sglue+0xc>
 8000540:	4630      	mov	r0, r6
 8000542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000546:	89ab      	ldrh	r3, [r5, #12]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d907      	bls.n	800055c <_fwalk_sglue+0x38>
 800054c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000550:	3301      	adds	r3, #1
 8000552:	d003      	beq.n	800055c <_fwalk_sglue+0x38>
 8000554:	4629      	mov	r1, r5
 8000556:	4638      	mov	r0, r7
 8000558:	47c0      	blx	r8
 800055a:	4306      	orrs	r6, r0
 800055c:	3568      	adds	r5, #104	; 0x68
 800055e:	e7e9      	b.n	8000534 <_fwalk_sglue+0x10>

08000560 <_puts_r>:
 8000560:	6a03      	ldr	r3, [r0, #32]
 8000562:	b570      	push	{r4, r5, r6, lr}
 8000564:	6884      	ldr	r4, [r0, #8]
 8000566:	4605      	mov	r5, r0
 8000568:	460e      	mov	r6, r1
 800056a:	b90b      	cbnz	r3, 8000570 <_puts_r+0x10>
 800056c:	f7ff ffc2 	bl	80004f4 <__sinit>
 8000570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000572:	07db      	lsls	r3, r3, #31
 8000574:	d405      	bmi.n	8000582 <_puts_r+0x22>
 8000576:	89a3      	ldrh	r3, [r4, #12]
 8000578:	0598      	lsls	r0, r3, #22
 800057a:	d402      	bmi.n	8000582 <_puts_r+0x22>
 800057c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800057e:	f000 f99c 	bl	80008ba <__retarget_lock_acquire_recursive>
 8000582:	89a3      	ldrh	r3, [r4, #12]
 8000584:	0719      	lsls	r1, r3, #28
 8000586:	d513      	bpl.n	80005b0 <_puts_r+0x50>
 8000588:	6923      	ldr	r3, [r4, #16]
 800058a:	b18b      	cbz	r3, 80005b0 <_puts_r+0x50>
 800058c:	3e01      	subs	r6, #1
 800058e:	68a3      	ldr	r3, [r4, #8]
 8000590:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000594:	3b01      	subs	r3, #1
 8000596:	60a3      	str	r3, [r4, #8]
 8000598:	b9e9      	cbnz	r1, 80005d6 <_puts_r+0x76>
 800059a:	2b00      	cmp	r3, #0
 800059c:	da2e      	bge.n	80005fc <_puts_r+0x9c>
 800059e:	4622      	mov	r2, r4
 80005a0:	210a      	movs	r1, #10
 80005a2:	4628      	mov	r0, r5
 80005a4:	f000 f87b 	bl	800069e <__swbuf_r>
 80005a8:	3001      	adds	r0, #1
 80005aa:	d007      	beq.n	80005bc <_puts_r+0x5c>
 80005ac:	250a      	movs	r5, #10
 80005ae:	e007      	b.n	80005c0 <_puts_r+0x60>
 80005b0:	4621      	mov	r1, r4
 80005b2:	4628      	mov	r0, r5
 80005b4:	f000 f8b0 	bl	8000718 <__swsetup_r>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d0e7      	beq.n	800058c <_puts_r+0x2c>
 80005bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80005c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005c2:	07da      	lsls	r2, r3, #31
 80005c4:	d405      	bmi.n	80005d2 <_puts_r+0x72>
 80005c6:	89a3      	ldrh	r3, [r4, #12]
 80005c8:	059b      	lsls	r3, r3, #22
 80005ca:	d402      	bmi.n	80005d2 <_puts_r+0x72>
 80005cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005ce:	f000 f975 	bl	80008bc <__retarget_lock_release_recursive>
 80005d2:	4628      	mov	r0, r5
 80005d4:	bd70      	pop	{r4, r5, r6, pc}
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	da04      	bge.n	80005e4 <_puts_r+0x84>
 80005da:	69a2      	ldr	r2, [r4, #24]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dc06      	bgt.n	80005ee <_puts_r+0x8e>
 80005e0:	290a      	cmp	r1, #10
 80005e2:	d004      	beq.n	80005ee <_puts_r+0x8e>
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	6022      	str	r2, [r4, #0]
 80005ea:	7019      	strb	r1, [r3, #0]
 80005ec:	e7cf      	b.n	800058e <_puts_r+0x2e>
 80005ee:	4622      	mov	r2, r4
 80005f0:	4628      	mov	r0, r5
 80005f2:	f000 f854 	bl	800069e <__swbuf_r>
 80005f6:	3001      	adds	r0, #1
 80005f8:	d1c9      	bne.n	800058e <_puts_r+0x2e>
 80005fa:	e7df      	b.n	80005bc <_puts_r+0x5c>
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	250a      	movs	r5, #10
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	6022      	str	r2, [r4, #0]
 8000604:	701d      	strb	r5, [r3, #0]
 8000606:	e7db      	b.n	80005c0 <_puts_r+0x60>

08000608 <puts>:
 8000608:	4b02      	ldr	r3, [pc, #8]	; (8000614 <puts+0xc>)
 800060a:	4601      	mov	r1, r0
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	f7ff bfa7 	b.w	8000560 <_puts_r>
 8000612:	bf00      	nop
 8000614:	20000058 	.word	0x20000058

08000618 <__sread>:
 8000618:	b510      	push	{r4, lr}
 800061a:	460c      	mov	r4, r1
 800061c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000620:	f000 f8fc 	bl	800081c <_read_r>
 8000624:	2800      	cmp	r0, #0
 8000626:	bfab      	itete	ge
 8000628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800062a:	89a3      	ldrhlt	r3, [r4, #12]
 800062c:	181b      	addge	r3, r3, r0
 800062e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000632:	bfac      	ite	ge
 8000634:	6563      	strge	r3, [r4, #84]	; 0x54
 8000636:	81a3      	strhlt	r3, [r4, #12]
 8000638:	bd10      	pop	{r4, pc}

0800063a <__swrite>:
 800063a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800063e:	461f      	mov	r7, r3
 8000640:	898b      	ldrh	r3, [r1, #12]
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	4605      	mov	r5, r0
 8000646:	460c      	mov	r4, r1
 8000648:	4616      	mov	r6, r2
 800064a:	d505      	bpl.n	8000658 <__swrite+0x1e>
 800064c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000650:	2302      	movs	r3, #2
 8000652:	2200      	movs	r2, #0
 8000654:	f000 f8d0 	bl	80007f8 <_lseek_r>
 8000658:	89a3      	ldrh	r3, [r4, #12]
 800065a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800065e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000662:	81a3      	strh	r3, [r4, #12]
 8000664:	4632      	mov	r2, r6
 8000666:	463b      	mov	r3, r7
 8000668:	4628      	mov	r0, r5
 800066a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800066e:	f000 b8e7 	b.w	8000840 <_write_r>

08000672 <__sseek>:
 8000672:	b510      	push	{r4, lr}
 8000674:	460c      	mov	r4, r1
 8000676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800067a:	f000 f8bd 	bl	80007f8 <_lseek_r>
 800067e:	1c43      	adds	r3, r0, #1
 8000680:	89a3      	ldrh	r3, [r4, #12]
 8000682:	bf15      	itete	ne
 8000684:	6560      	strne	r0, [r4, #84]	; 0x54
 8000686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800068a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800068e:	81a3      	strheq	r3, [r4, #12]
 8000690:	bf18      	it	ne
 8000692:	81a3      	strhne	r3, [r4, #12]
 8000694:	bd10      	pop	{r4, pc}

08000696 <__sclose>:
 8000696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800069a:	f000 b89d 	b.w	80007d8 <_close_r>

0800069e <__swbuf_r>:
 800069e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a0:	460e      	mov	r6, r1
 80006a2:	4614      	mov	r4, r2
 80006a4:	4605      	mov	r5, r0
 80006a6:	b118      	cbz	r0, 80006b0 <__swbuf_r+0x12>
 80006a8:	6a03      	ldr	r3, [r0, #32]
 80006aa:	b90b      	cbnz	r3, 80006b0 <__swbuf_r+0x12>
 80006ac:	f7ff ff22 	bl	80004f4 <__sinit>
 80006b0:	69a3      	ldr	r3, [r4, #24]
 80006b2:	60a3      	str	r3, [r4, #8]
 80006b4:	89a3      	ldrh	r3, [r4, #12]
 80006b6:	071a      	lsls	r2, r3, #28
 80006b8:	d525      	bpl.n	8000706 <__swbuf_r+0x68>
 80006ba:	6923      	ldr	r3, [r4, #16]
 80006bc:	b31b      	cbz	r3, 8000706 <__swbuf_r+0x68>
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	6922      	ldr	r2, [r4, #16]
 80006c2:	1a98      	subs	r0, r3, r2
 80006c4:	6963      	ldr	r3, [r4, #20]
 80006c6:	b2f6      	uxtb	r6, r6
 80006c8:	4283      	cmp	r3, r0
 80006ca:	4637      	mov	r7, r6
 80006cc:	dc04      	bgt.n	80006d8 <__swbuf_r+0x3a>
 80006ce:	4621      	mov	r1, r4
 80006d0:	4628      	mov	r0, r5
 80006d2:	f000 fa6d 	bl	8000bb0 <_fflush_r>
 80006d6:	b9e0      	cbnz	r0, 8000712 <__swbuf_r+0x74>
 80006d8:	68a3      	ldr	r3, [r4, #8]
 80006da:	3b01      	subs	r3, #1
 80006dc:	60a3      	str	r3, [r4, #8]
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	6022      	str	r2, [r4, #0]
 80006e4:	701e      	strb	r6, [r3, #0]
 80006e6:	6962      	ldr	r2, [r4, #20]
 80006e8:	1c43      	adds	r3, r0, #1
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d004      	beq.n	80006f8 <__swbuf_r+0x5a>
 80006ee:	89a3      	ldrh	r3, [r4, #12]
 80006f0:	07db      	lsls	r3, r3, #31
 80006f2:	d506      	bpl.n	8000702 <__swbuf_r+0x64>
 80006f4:	2e0a      	cmp	r6, #10
 80006f6:	d104      	bne.n	8000702 <__swbuf_r+0x64>
 80006f8:	4621      	mov	r1, r4
 80006fa:	4628      	mov	r0, r5
 80006fc:	f000 fa58 	bl	8000bb0 <_fflush_r>
 8000700:	b938      	cbnz	r0, 8000712 <__swbuf_r+0x74>
 8000702:	4638      	mov	r0, r7
 8000704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000706:	4621      	mov	r1, r4
 8000708:	4628      	mov	r0, r5
 800070a:	f000 f805 	bl	8000718 <__swsetup_r>
 800070e:	2800      	cmp	r0, #0
 8000710:	d0d5      	beq.n	80006be <__swbuf_r+0x20>
 8000712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000716:	e7f4      	b.n	8000702 <__swbuf_r+0x64>

08000718 <__swsetup_r>:
 8000718:	b538      	push	{r3, r4, r5, lr}
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <__swsetup_r+0xac>)
 800071c:	4605      	mov	r5, r0
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	460c      	mov	r4, r1
 8000722:	b118      	cbz	r0, 800072c <__swsetup_r+0x14>
 8000724:	6a03      	ldr	r3, [r0, #32]
 8000726:	b90b      	cbnz	r3, 800072c <__swsetup_r+0x14>
 8000728:	f7ff fee4 	bl	80004f4 <__sinit>
 800072c:	89a3      	ldrh	r3, [r4, #12]
 800072e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000732:	0718      	lsls	r0, r3, #28
 8000734:	d422      	bmi.n	800077c <__swsetup_r+0x64>
 8000736:	06d9      	lsls	r1, r3, #27
 8000738:	d407      	bmi.n	800074a <__swsetup_r+0x32>
 800073a:	2309      	movs	r3, #9
 800073c:	602b      	str	r3, [r5, #0]
 800073e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000742:	81a3      	strh	r3, [r4, #12]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000748:	e034      	b.n	80007b4 <__swsetup_r+0x9c>
 800074a:	0758      	lsls	r0, r3, #29
 800074c:	d512      	bpl.n	8000774 <__swsetup_r+0x5c>
 800074e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000750:	b141      	cbz	r1, 8000764 <__swsetup_r+0x4c>
 8000752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000756:	4299      	cmp	r1, r3
 8000758:	d002      	beq.n	8000760 <__swsetup_r+0x48>
 800075a:	4628      	mov	r0, r5
 800075c:	f000 f8b0 	bl	80008c0 <_free_r>
 8000760:	2300      	movs	r3, #0
 8000762:	6363      	str	r3, [r4, #52]	; 0x34
 8000764:	89a3      	ldrh	r3, [r4, #12]
 8000766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800076a:	81a3      	strh	r3, [r4, #12]
 800076c:	2300      	movs	r3, #0
 800076e:	6063      	str	r3, [r4, #4]
 8000770:	6923      	ldr	r3, [r4, #16]
 8000772:	6023      	str	r3, [r4, #0]
 8000774:	89a3      	ldrh	r3, [r4, #12]
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	81a3      	strh	r3, [r4, #12]
 800077c:	6923      	ldr	r3, [r4, #16]
 800077e:	b94b      	cbnz	r3, 8000794 <__swsetup_r+0x7c>
 8000780:	89a3      	ldrh	r3, [r4, #12]
 8000782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800078a:	d003      	beq.n	8000794 <__swsetup_r+0x7c>
 800078c:	4621      	mov	r1, r4
 800078e:	4628      	mov	r0, r5
 8000790:	f000 fa5c 	bl	8000c4c <__smakebuf_r>
 8000794:	89a0      	ldrh	r0, [r4, #12]
 8000796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800079a:	f010 0301 	ands.w	r3, r0, #1
 800079e:	d00a      	beq.n	80007b6 <__swsetup_r+0x9e>
 80007a0:	2300      	movs	r3, #0
 80007a2:	60a3      	str	r3, [r4, #8]
 80007a4:	6963      	ldr	r3, [r4, #20]
 80007a6:	425b      	negs	r3, r3
 80007a8:	61a3      	str	r3, [r4, #24]
 80007aa:	6923      	ldr	r3, [r4, #16]
 80007ac:	b943      	cbnz	r3, 80007c0 <__swsetup_r+0xa8>
 80007ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007b2:	d1c4      	bne.n	800073e <__swsetup_r+0x26>
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
 80007b6:	0781      	lsls	r1, r0, #30
 80007b8:	bf58      	it	pl
 80007ba:	6963      	ldrpl	r3, [r4, #20]
 80007bc:	60a3      	str	r3, [r4, #8]
 80007be:	e7f4      	b.n	80007aa <__swsetup_r+0x92>
 80007c0:	2000      	movs	r0, #0
 80007c2:	e7f7      	b.n	80007b4 <__swsetup_r+0x9c>
 80007c4:	20000058 	.word	0x20000058

080007c8 <memset>:
 80007c8:	4402      	add	r2, r0
 80007ca:	4603      	mov	r3, r0
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d100      	bne.n	80007d2 <memset+0xa>
 80007d0:	4770      	bx	lr
 80007d2:	f803 1b01 	strb.w	r1, [r3], #1
 80007d6:	e7f9      	b.n	80007cc <memset+0x4>

080007d8 <_close_r>:
 80007d8:	b538      	push	{r3, r4, r5, lr}
 80007da:	4d06      	ldr	r5, [pc, #24]	; (80007f4 <_close_r+0x1c>)
 80007dc:	2300      	movs	r3, #0
 80007de:	4604      	mov	r4, r0
 80007e0:	4608      	mov	r0, r1
 80007e2:	602b      	str	r3, [r5, #0]
 80007e4:	f7ff fd69 	bl	80002ba <_close>
 80007e8:	1c43      	adds	r3, r0, #1
 80007ea:	d102      	bne.n	80007f2 <_close_r+0x1a>
 80007ec:	682b      	ldr	r3, [r5, #0]
 80007ee:	b103      	cbz	r3, 80007f2 <_close_r+0x1a>
 80007f0:	6023      	str	r3, [r4, #0]
 80007f2:	bd38      	pop	{r3, r4, r5, pc}
 80007f4:	200001b8 	.word	0x200001b8

080007f8 <_lseek_r>:
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4d07      	ldr	r5, [pc, #28]	; (8000818 <_lseek_r+0x20>)
 80007fc:	4604      	mov	r4, r0
 80007fe:	4608      	mov	r0, r1
 8000800:	4611      	mov	r1, r2
 8000802:	2200      	movs	r2, #0
 8000804:	602a      	str	r2, [r5, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	f7ff fd7b 	bl	8000302 <_lseek>
 800080c:	1c43      	adds	r3, r0, #1
 800080e:	d102      	bne.n	8000816 <_lseek_r+0x1e>
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	b103      	cbz	r3, 8000816 <_lseek_r+0x1e>
 8000814:	6023      	str	r3, [r4, #0]
 8000816:	bd38      	pop	{r3, r4, r5, pc}
 8000818:	200001b8 	.word	0x200001b8

0800081c <_read_r>:
 800081c:	b538      	push	{r3, r4, r5, lr}
 800081e:	4d07      	ldr	r5, [pc, #28]	; (800083c <_read_r+0x20>)
 8000820:	4604      	mov	r4, r0
 8000822:	4608      	mov	r0, r1
 8000824:	4611      	mov	r1, r2
 8000826:	2200      	movs	r2, #0
 8000828:	602a      	str	r2, [r5, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	f7ff fd0c 	bl	8000248 <_read>
 8000830:	1c43      	adds	r3, r0, #1
 8000832:	d102      	bne.n	800083a <_read_r+0x1e>
 8000834:	682b      	ldr	r3, [r5, #0]
 8000836:	b103      	cbz	r3, 800083a <_read_r+0x1e>
 8000838:	6023      	str	r3, [r4, #0]
 800083a:	bd38      	pop	{r3, r4, r5, pc}
 800083c:	200001b8 	.word	0x200001b8

08000840 <_write_r>:
 8000840:	b538      	push	{r3, r4, r5, lr}
 8000842:	4d07      	ldr	r5, [pc, #28]	; (8000860 <_write_r+0x20>)
 8000844:	4604      	mov	r4, r0
 8000846:	4608      	mov	r0, r1
 8000848:	4611      	mov	r1, r2
 800084a:	2200      	movs	r2, #0
 800084c:	602a      	str	r2, [r5, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	f7ff fd17 	bl	8000282 <_write>
 8000854:	1c43      	adds	r3, r0, #1
 8000856:	d102      	bne.n	800085e <_write_r+0x1e>
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	b103      	cbz	r3, 800085e <_write_r+0x1e>
 800085c:	6023      	str	r3, [r4, #0]
 800085e:	bd38      	pop	{r3, r4, r5, pc}
 8000860:	200001b8 	.word	0x200001b8

08000864 <__errno>:
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <__errno+0x8>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000058 	.word	0x20000058

08000870 <__libc_init_array>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	4d0d      	ldr	r5, [pc, #52]	; (80008a8 <__libc_init_array+0x38>)
 8000874:	4c0d      	ldr	r4, [pc, #52]	; (80008ac <__libc_init_array+0x3c>)
 8000876:	1b64      	subs	r4, r4, r5
 8000878:	10a4      	asrs	r4, r4, #2
 800087a:	2600      	movs	r6, #0
 800087c:	42a6      	cmp	r6, r4
 800087e:	d109      	bne.n	8000894 <__libc_init_array+0x24>
 8000880:	4d0b      	ldr	r5, [pc, #44]	; (80008b0 <__libc_init_array+0x40>)
 8000882:	4c0c      	ldr	r4, [pc, #48]	; (80008b4 <__libc_init_array+0x44>)
 8000884:	f000 fa50 	bl	8000d28 <_init>
 8000888:	1b64      	subs	r4, r4, r5
 800088a:	10a4      	asrs	r4, r4, #2
 800088c:	2600      	movs	r6, #0
 800088e:	42a6      	cmp	r6, r4
 8000890:	d105      	bne.n	800089e <__libc_init_array+0x2e>
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f855 3b04 	ldr.w	r3, [r5], #4
 8000898:	4798      	blx	r3
 800089a:	3601      	adds	r6, #1
 800089c:	e7ee      	b.n	800087c <__libc_init_array+0xc>
 800089e:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a2:	4798      	blx	r3
 80008a4:	3601      	adds	r6, #1
 80008a6:	e7f2      	b.n	800088e <__libc_init_array+0x1e>
 80008a8:	08000d50 	.word	0x08000d50
 80008ac:	08000d50 	.word	0x08000d50
 80008b0:	08000d50 	.word	0x08000d50
 80008b4:	08000d54 	.word	0x08000d54

080008b8 <__retarget_lock_init_recursive>:
 80008b8:	4770      	bx	lr

080008ba <__retarget_lock_acquire_recursive>:
 80008ba:	4770      	bx	lr

080008bc <__retarget_lock_release_recursive>:
 80008bc:	4770      	bx	lr
	...

080008c0 <_free_r>:
 80008c0:	b538      	push	{r3, r4, r5, lr}
 80008c2:	4605      	mov	r5, r0
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d041      	beq.n	800094c <_free_r+0x8c>
 80008c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008cc:	1f0c      	subs	r4, r1, #4
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bfb8      	it	lt
 80008d2:	18e4      	addlt	r4, r4, r3
 80008d4:	f000 f8de 	bl	8000a94 <__malloc_lock>
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <_free_r+0x90>)
 80008da:	6813      	ldr	r3, [r2, #0]
 80008dc:	b933      	cbnz	r3, 80008ec <_free_r+0x2c>
 80008de:	6063      	str	r3, [r4, #4]
 80008e0:	6014      	str	r4, [r2, #0]
 80008e2:	4628      	mov	r0, r5
 80008e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008e8:	f000 b8da 	b.w	8000aa0 <__malloc_unlock>
 80008ec:	42a3      	cmp	r3, r4
 80008ee:	d908      	bls.n	8000902 <_free_r+0x42>
 80008f0:	6820      	ldr	r0, [r4, #0]
 80008f2:	1821      	adds	r1, r4, r0
 80008f4:	428b      	cmp	r3, r1
 80008f6:	bf01      	itttt	eq
 80008f8:	6819      	ldreq	r1, [r3, #0]
 80008fa:	685b      	ldreq	r3, [r3, #4]
 80008fc:	1809      	addeq	r1, r1, r0
 80008fe:	6021      	streq	r1, [r4, #0]
 8000900:	e7ed      	b.n	80008de <_free_r+0x1e>
 8000902:	461a      	mov	r2, r3
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	b10b      	cbz	r3, 800090c <_free_r+0x4c>
 8000908:	42a3      	cmp	r3, r4
 800090a:	d9fa      	bls.n	8000902 <_free_r+0x42>
 800090c:	6811      	ldr	r1, [r2, #0]
 800090e:	1850      	adds	r0, r2, r1
 8000910:	42a0      	cmp	r0, r4
 8000912:	d10b      	bne.n	800092c <_free_r+0x6c>
 8000914:	6820      	ldr	r0, [r4, #0]
 8000916:	4401      	add	r1, r0
 8000918:	1850      	adds	r0, r2, r1
 800091a:	4283      	cmp	r3, r0
 800091c:	6011      	str	r1, [r2, #0]
 800091e:	d1e0      	bne.n	80008e2 <_free_r+0x22>
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	6053      	str	r3, [r2, #4]
 8000926:	4408      	add	r0, r1
 8000928:	6010      	str	r0, [r2, #0]
 800092a:	e7da      	b.n	80008e2 <_free_r+0x22>
 800092c:	d902      	bls.n	8000934 <_free_r+0x74>
 800092e:	230c      	movs	r3, #12
 8000930:	602b      	str	r3, [r5, #0]
 8000932:	e7d6      	b.n	80008e2 <_free_r+0x22>
 8000934:	6820      	ldr	r0, [r4, #0]
 8000936:	1821      	adds	r1, r4, r0
 8000938:	428b      	cmp	r3, r1
 800093a:	bf04      	itt	eq
 800093c:	6819      	ldreq	r1, [r3, #0]
 800093e:	685b      	ldreq	r3, [r3, #4]
 8000940:	6063      	str	r3, [r4, #4]
 8000942:	bf04      	itt	eq
 8000944:	1809      	addeq	r1, r1, r0
 8000946:	6021      	streq	r1, [r4, #0]
 8000948:	6054      	str	r4, [r2, #4]
 800094a:	e7ca      	b.n	80008e2 <_free_r+0x22>
 800094c:	bd38      	pop	{r3, r4, r5, pc}
 800094e:	bf00      	nop
 8000950:	200001c0 	.word	0x200001c0

08000954 <sbrk_aligned>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4e0e      	ldr	r6, [pc, #56]	; (8000990 <sbrk_aligned+0x3c>)
 8000958:	460c      	mov	r4, r1
 800095a:	6831      	ldr	r1, [r6, #0]
 800095c:	4605      	mov	r5, r0
 800095e:	b911      	cbnz	r1, 8000966 <sbrk_aligned+0x12>
 8000960:	f000 f9d2 	bl	8000d08 <_sbrk_r>
 8000964:	6030      	str	r0, [r6, #0]
 8000966:	4621      	mov	r1, r4
 8000968:	4628      	mov	r0, r5
 800096a:	f000 f9cd 	bl	8000d08 <_sbrk_r>
 800096e:	1c43      	adds	r3, r0, #1
 8000970:	d00a      	beq.n	8000988 <sbrk_aligned+0x34>
 8000972:	1cc4      	adds	r4, r0, #3
 8000974:	f024 0403 	bic.w	r4, r4, #3
 8000978:	42a0      	cmp	r0, r4
 800097a:	d007      	beq.n	800098c <sbrk_aligned+0x38>
 800097c:	1a21      	subs	r1, r4, r0
 800097e:	4628      	mov	r0, r5
 8000980:	f000 f9c2 	bl	8000d08 <_sbrk_r>
 8000984:	3001      	adds	r0, #1
 8000986:	d101      	bne.n	800098c <sbrk_aligned+0x38>
 8000988:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800098c:	4620      	mov	r0, r4
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	200001c4 	.word	0x200001c4

08000994 <_malloc_r>:
 8000994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000998:	1ccd      	adds	r5, r1, #3
 800099a:	f025 0503 	bic.w	r5, r5, #3
 800099e:	3508      	adds	r5, #8
 80009a0:	2d0c      	cmp	r5, #12
 80009a2:	bf38      	it	cc
 80009a4:	250c      	movcc	r5, #12
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	4607      	mov	r7, r0
 80009aa:	db01      	blt.n	80009b0 <_malloc_r+0x1c>
 80009ac:	42a9      	cmp	r1, r5
 80009ae:	d905      	bls.n	80009bc <_malloc_r+0x28>
 80009b0:	230c      	movs	r3, #12
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	2600      	movs	r6, #0
 80009b6:	4630      	mov	r0, r6
 80009b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a90 <_malloc_r+0xfc>
 80009c0:	f000 f868 	bl	8000a94 <__malloc_lock>
 80009c4:	f8d8 3000 	ldr.w	r3, [r8]
 80009c8:	461c      	mov	r4, r3
 80009ca:	bb5c      	cbnz	r4, 8000a24 <_malloc_r+0x90>
 80009cc:	4629      	mov	r1, r5
 80009ce:	4638      	mov	r0, r7
 80009d0:	f7ff ffc0 	bl	8000954 <sbrk_aligned>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	4604      	mov	r4, r0
 80009d8:	d155      	bne.n	8000a86 <_malloc_r+0xf2>
 80009da:	f8d8 4000 	ldr.w	r4, [r8]
 80009de:	4626      	mov	r6, r4
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d145      	bne.n	8000a70 <_malloc_r+0xdc>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d048      	beq.n	8000a7a <_malloc_r+0xe6>
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	4631      	mov	r1, r6
 80009ec:	4638      	mov	r0, r7
 80009ee:	eb04 0903 	add.w	r9, r4, r3
 80009f2:	f000 f989 	bl	8000d08 <_sbrk_r>
 80009f6:	4581      	cmp	r9, r0
 80009f8:	d13f      	bne.n	8000a7a <_malloc_r+0xe6>
 80009fa:	6821      	ldr	r1, [r4, #0]
 80009fc:	1a6d      	subs	r5, r5, r1
 80009fe:	4629      	mov	r1, r5
 8000a00:	4638      	mov	r0, r7
 8000a02:	f7ff ffa7 	bl	8000954 <sbrk_aligned>
 8000a06:	3001      	adds	r0, #1
 8000a08:	d037      	beq.n	8000a7a <_malloc_r+0xe6>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	442b      	add	r3, r5
 8000a0e:	6023      	str	r3, [r4, #0]
 8000a10:	f8d8 3000 	ldr.w	r3, [r8]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d038      	beq.n	8000a8a <_malloc_r+0xf6>
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	42a2      	cmp	r2, r4
 8000a1c:	d12b      	bne.n	8000a76 <_malloc_r+0xe2>
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	e00f      	b.n	8000a44 <_malloc_r+0xb0>
 8000a24:	6822      	ldr	r2, [r4, #0]
 8000a26:	1b52      	subs	r2, r2, r5
 8000a28:	d41f      	bmi.n	8000a6a <_malloc_r+0xd6>
 8000a2a:	2a0b      	cmp	r2, #11
 8000a2c:	d917      	bls.n	8000a5e <_malloc_r+0xca>
 8000a2e:	1961      	adds	r1, r4, r5
 8000a30:	42a3      	cmp	r3, r4
 8000a32:	6025      	str	r5, [r4, #0]
 8000a34:	bf18      	it	ne
 8000a36:	6059      	strne	r1, [r3, #4]
 8000a38:	6863      	ldr	r3, [r4, #4]
 8000a3a:	bf08      	it	eq
 8000a3c:	f8c8 1000 	streq.w	r1, [r8]
 8000a40:	5162      	str	r2, [r4, r5]
 8000a42:	604b      	str	r3, [r1, #4]
 8000a44:	4638      	mov	r0, r7
 8000a46:	f104 060b 	add.w	r6, r4, #11
 8000a4a:	f000 f829 	bl	8000aa0 <__malloc_unlock>
 8000a4e:	f026 0607 	bic.w	r6, r6, #7
 8000a52:	1d23      	adds	r3, r4, #4
 8000a54:	1af2      	subs	r2, r6, r3
 8000a56:	d0ae      	beq.n	80009b6 <_malloc_r+0x22>
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	50a3      	str	r3, [r4, r2]
 8000a5c:	e7ab      	b.n	80009b6 <_malloc_r+0x22>
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	6862      	ldr	r2, [r4, #4]
 8000a62:	d1dd      	bne.n	8000a20 <_malloc_r+0x8c>
 8000a64:	f8c8 2000 	str.w	r2, [r8]
 8000a68:	e7ec      	b.n	8000a44 <_malloc_r+0xb0>
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	6864      	ldr	r4, [r4, #4]
 8000a6e:	e7ac      	b.n	80009ca <_malloc_r+0x36>
 8000a70:	4634      	mov	r4, r6
 8000a72:	6876      	ldr	r6, [r6, #4]
 8000a74:	e7b4      	b.n	80009e0 <_malloc_r+0x4c>
 8000a76:	4613      	mov	r3, r2
 8000a78:	e7cc      	b.n	8000a14 <_malloc_r+0x80>
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4638      	mov	r0, r7
 8000a80:	f000 f80e 	bl	8000aa0 <__malloc_unlock>
 8000a84:	e797      	b.n	80009b6 <_malloc_r+0x22>
 8000a86:	6025      	str	r5, [r4, #0]
 8000a88:	e7dc      	b.n	8000a44 <_malloc_r+0xb0>
 8000a8a:	605b      	str	r3, [r3, #4]
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	bf00      	nop
 8000a90:	200001c0 	.word	0x200001c0

08000a94 <__malloc_lock>:
 8000a94:	4801      	ldr	r0, [pc, #4]	; (8000a9c <__malloc_lock+0x8>)
 8000a96:	f7ff bf10 	b.w	80008ba <__retarget_lock_acquire_recursive>
 8000a9a:	bf00      	nop
 8000a9c:	200001bc 	.word	0x200001bc

08000aa0 <__malloc_unlock>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	; (8000aa8 <__malloc_unlock+0x8>)
 8000aa2:	f7ff bf0b 	b.w	80008bc <__retarget_lock_release_recursive>
 8000aa6:	bf00      	nop
 8000aa8:	200001bc 	.word	0x200001bc

08000aac <__sflush_r>:
 8000aac:	898a      	ldrh	r2, [r1, #12]
 8000aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab0:	4605      	mov	r5, r0
 8000ab2:	0710      	lsls	r0, r2, #28
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	d457      	bmi.n	8000b68 <__sflush_r+0xbc>
 8000ab8:	684b      	ldr	r3, [r1, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dc04      	bgt.n	8000ac8 <__sflush_r+0x1c>
 8000abe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	dc01      	bgt.n	8000ac8 <__sflush_r+0x1c>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d0fa      	beq.n	8000ac4 <__sflush_r+0x18>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ad4:	682f      	ldr	r7, [r5, #0]
 8000ad6:	6a21      	ldr	r1, [r4, #32]
 8000ad8:	602b      	str	r3, [r5, #0]
 8000ada:	d032      	beq.n	8000b42 <__sflush_r+0x96>
 8000adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ade:	89a3      	ldrh	r3, [r4, #12]
 8000ae0:	075a      	lsls	r2, r3, #29
 8000ae2:	d505      	bpl.n	8000af0 <__sflush_r+0x44>
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	1ac0      	subs	r0, r0, r3
 8000ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aea:	b10b      	cbz	r3, 8000af0 <__sflush_r+0x44>
 8000aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000aee:	1ac0      	subs	r0, r0, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	4602      	mov	r2, r0
 8000af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000af6:	6a21      	ldr	r1, [r4, #32]
 8000af8:	4628      	mov	r0, r5
 8000afa:	47b0      	blx	r6
 8000afc:	1c43      	adds	r3, r0, #1
 8000afe:	89a3      	ldrh	r3, [r4, #12]
 8000b00:	d106      	bne.n	8000b10 <__sflush_r+0x64>
 8000b02:	6829      	ldr	r1, [r5, #0]
 8000b04:	291d      	cmp	r1, #29
 8000b06:	d82b      	bhi.n	8000b60 <__sflush_r+0xb4>
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <__sflush_r+0x100>)
 8000b0a:	410a      	asrs	r2, r1
 8000b0c:	07d6      	lsls	r6, r2, #31
 8000b0e:	d427      	bmi.n	8000b60 <__sflush_r+0xb4>
 8000b10:	2200      	movs	r2, #0
 8000b12:	6062      	str	r2, [r4, #4]
 8000b14:	04d9      	lsls	r1, r3, #19
 8000b16:	6922      	ldr	r2, [r4, #16]
 8000b18:	6022      	str	r2, [r4, #0]
 8000b1a:	d504      	bpl.n	8000b26 <__sflush_r+0x7a>
 8000b1c:	1c42      	adds	r2, r0, #1
 8000b1e:	d101      	bne.n	8000b24 <__sflush_r+0x78>
 8000b20:	682b      	ldr	r3, [r5, #0]
 8000b22:	b903      	cbnz	r3, 8000b26 <__sflush_r+0x7a>
 8000b24:	6560      	str	r0, [r4, #84]	; 0x54
 8000b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b28:	602f      	str	r7, [r5, #0]
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d0ca      	beq.n	8000ac4 <__sflush_r+0x18>
 8000b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d002      	beq.n	8000b3c <__sflush_r+0x90>
 8000b36:	4628      	mov	r0, r5
 8000b38:	f7ff fec2 	bl	80008c0 <_free_r>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8000b40:	e7c1      	b.n	8000ac6 <__sflush_r+0x1a>
 8000b42:	2301      	movs	r3, #1
 8000b44:	4628      	mov	r0, r5
 8000b46:	47b0      	blx	r6
 8000b48:	1c41      	adds	r1, r0, #1
 8000b4a:	d1c8      	bne.n	8000ade <__sflush_r+0x32>
 8000b4c:	682b      	ldr	r3, [r5, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0c5      	beq.n	8000ade <__sflush_r+0x32>
 8000b52:	2b1d      	cmp	r3, #29
 8000b54:	d001      	beq.n	8000b5a <__sflush_r+0xae>
 8000b56:	2b16      	cmp	r3, #22
 8000b58:	d101      	bne.n	8000b5e <__sflush_r+0xb2>
 8000b5a:	602f      	str	r7, [r5, #0]
 8000b5c:	e7b2      	b.n	8000ac4 <__sflush_r+0x18>
 8000b5e:	89a3      	ldrh	r3, [r4, #12]
 8000b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b64:	81a3      	strh	r3, [r4, #12]
 8000b66:	e7ae      	b.n	8000ac6 <__sflush_r+0x1a>
 8000b68:	690f      	ldr	r7, [r1, #16]
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d0aa      	beq.n	8000ac4 <__sflush_r+0x18>
 8000b6e:	0793      	lsls	r3, r2, #30
 8000b70:	680e      	ldr	r6, [r1, #0]
 8000b72:	bf08      	it	eq
 8000b74:	694b      	ldreq	r3, [r1, #20]
 8000b76:	600f      	str	r7, [r1, #0]
 8000b78:	bf18      	it	ne
 8000b7a:	2300      	movne	r3, #0
 8000b7c:	1bf6      	subs	r6, r6, r7
 8000b7e:	608b      	str	r3, [r1, #8]
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	dd9f      	ble.n	8000ac4 <__sflush_r+0x18>
 8000b84:	6a21      	ldr	r1, [r4, #32]
 8000b86:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b8a:	4633      	mov	r3, r6
 8000b8c:	463a      	mov	r2, r7
 8000b8e:	4628      	mov	r0, r5
 8000b90:	47e0      	blx	ip
 8000b92:	2800      	cmp	r0, #0
 8000b94:	dc06      	bgt.n	8000ba4 <__sflush_r+0xf8>
 8000b96:	89a3      	ldrh	r3, [r4, #12]
 8000b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9c:	81a3      	strh	r3, [r4, #12]
 8000b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba2:	e790      	b.n	8000ac6 <__sflush_r+0x1a>
 8000ba4:	4407      	add	r7, r0
 8000ba6:	1a36      	subs	r6, r6, r0
 8000ba8:	e7ea      	b.n	8000b80 <__sflush_r+0xd4>
 8000baa:	bf00      	nop
 8000bac:	dfbffffe 	.word	0xdfbffffe

08000bb0 <_fflush_r>:
 8000bb0:	b538      	push	{r3, r4, r5, lr}
 8000bb2:	690b      	ldr	r3, [r1, #16]
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	b913      	cbnz	r3, 8000bc0 <_fflush_r+0x10>
 8000bba:	2500      	movs	r5, #0
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
 8000bc0:	b118      	cbz	r0, 8000bca <_fflush_r+0x1a>
 8000bc2:	6a03      	ldr	r3, [r0, #32]
 8000bc4:	b90b      	cbnz	r3, 8000bca <_fflush_r+0x1a>
 8000bc6:	f7ff fc95 	bl	80004f4 <__sinit>
 8000bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f3      	beq.n	8000bba <_fflush_r+0xa>
 8000bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bd4:	07d0      	lsls	r0, r2, #31
 8000bd6:	d404      	bmi.n	8000be2 <_fflush_r+0x32>
 8000bd8:	0599      	lsls	r1, r3, #22
 8000bda:	d402      	bmi.n	8000be2 <_fflush_r+0x32>
 8000bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bde:	f7ff fe6c 	bl	80008ba <__retarget_lock_acquire_recursive>
 8000be2:	4628      	mov	r0, r5
 8000be4:	4621      	mov	r1, r4
 8000be6:	f7ff ff61 	bl	8000aac <__sflush_r>
 8000bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bec:	07da      	lsls	r2, r3, #31
 8000bee:	4605      	mov	r5, r0
 8000bf0:	d4e4      	bmi.n	8000bbc <_fflush_r+0xc>
 8000bf2:	89a3      	ldrh	r3, [r4, #12]
 8000bf4:	059b      	lsls	r3, r3, #22
 8000bf6:	d4e1      	bmi.n	8000bbc <_fflush_r+0xc>
 8000bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bfa:	f7ff fe5f 	bl	80008bc <__retarget_lock_release_recursive>
 8000bfe:	e7dd      	b.n	8000bbc <_fflush_r+0xc>

08000c00 <__swhatbuf_r>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	460c      	mov	r4, r1
 8000c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	b096      	sub	sp, #88	; 0x58
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	461e      	mov	r6, r3
 8000c10:	da0d      	bge.n	8000c2e <__swhatbuf_r+0x2e>
 8000c12:	89a3      	ldrh	r3, [r4, #12]
 8000c14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c18:	f04f 0100 	mov.w	r1, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000c22:	2340      	movne	r3, #64	; 0x40
 8000c24:	2000      	movs	r0, #0
 8000c26:	6031      	str	r1, [r6, #0]
 8000c28:	602b      	str	r3, [r5, #0]
 8000c2a:	b016      	add	sp, #88	; 0x58
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	466a      	mov	r2, sp
 8000c30:	f000 f848 	bl	8000cc4 <_fstat_r>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	dbec      	blt.n	8000c12 <__swhatbuf_r+0x12>
 8000c38:	9901      	ldr	r1, [sp, #4]
 8000c3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000c3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000c42:	4259      	negs	r1, r3
 8000c44:	4159      	adcs	r1, r3
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	e7eb      	b.n	8000c24 <__swhatbuf_r+0x24>

08000c4c <__smakebuf_r>:
 8000c4c:	898b      	ldrh	r3, [r1, #12]
 8000c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c50:	079d      	lsls	r5, r3, #30
 8000c52:	4606      	mov	r6, r0
 8000c54:	460c      	mov	r4, r1
 8000c56:	d507      	bpl.n	8000c68 <__smakebuf_r+0x1c>
 8000c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	6123      	str	r3, [r4, #16]
 8000c60:	2301      	movs	r3, #1
 8000c62:	6163      	str	r3, [r4, #20]
 8000c64:	b002      	add	sp, #8
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	ab01      	add	r3, sp, #4
 8000c6a:	466a      	mov	r2, sp
 8000c6c:	f7ff ffc8 	bl	8000c00 <__swhatbuf_r>
 8000c70:	9900      	ldr	r1, [sp, #0]
 8000c72:	4605      	mov	r5, r0
 8000c74:	4630      	mov	r0, r6
 8000c76:	f7ff fe8d 	bl	8000994 <_malloc_r>
 8000c7a:	b948      	cbnz	r0, 8000c90 <__smakebuf_r+0x44>
 8000c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c80:	059a      	lsls	r2, r3, #22
 8000c82:	d4ef      	bmi.n	8000c64 <__smakebuf_r+0x18>
 8000c84:	f023 0303 	bic.w	r3, r3, #3
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	81a3      	strh	r3, [r4, #12]
 8000c8e:	e7e3      	b.n	8000c58 <__smakebuf_r+0xc>
 8000c90:	89a3      	ldrh	r3, [r4, #12]
 8000c92:	6020      	str	r0, [r4, #0]
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	81a3      	strh	r3, [r4, #12]
 8000c9a:	9b00      	ldr	r3, [sp, #0]
 8000c9c:	6163      	str	r3, [r4, #20]
 8000c9e:	9b01      	ldr	r3, [sp, #4]
 8000ca0:	6120      	str	r0, [r4, #16]
 8000ca2:	b15b      	cbz	r3, 8000cbc <__smakebuf_r+0x70>
 8000ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ca8:	4630      	mov	r0, r6
 8000caa:	f000 f81d 	bl	8000ce8 <_isatty_r>
 8000cae:	b128      	cbz	r0, 8000cbc <__smakebuf_r+0x70>
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	81a3      	strh	r3, [r4, #12]
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	81a5      	strh	r5, [r4, #12]
 8000cc2:	e7cf      	b.n	8000c64 <__smakebuf_r+0x18>

08000cc4 <_fstat_r>:
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4d07      	ldr	r5, [pc, #28]	; (8000ce4 <_fstat_r+0x20>)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	602b      	str	r3, [r5, #0]
 8000cd2:	f7ff fafd 	bl	80002d0 <_fstat>
 8000cd6:	1c43      	adds	r3, r0, #1
 8000cd8:	d102      	bne.n	8000ce0 <_fstat_r+0x1c>
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	b103      	cbz	r3, 8000ce0 <_fstat_r+0x1c>
 8000cde:	6023      	str	r3, [r4, #0]
 8000ce0:	bd38      	pop	{r3, r4, r5, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001b8 	.word	0x200001b8

08000ce8 <_isatty_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4d06      	ldr	r5, [pc, #24]	; (8000d04 <_isatty_r+0x1c>)
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	602b      	str	r3, [r5, #0]
 8000cf4:	f7ff fafb 	bl	80002ee <_isatty>
 8000cf8:	1c43      	adds	r3, r0, #1
 8000cfa:	d102      	bne.n	8000d02 <_isatty_r+0x1a>
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	b103      	cbz	r3, 8000d02 <_isatty_r+0x1a>
 8000d00:	6023      	str	r3, [r4, #0]
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
 8000d04:	200001b8 	.word	0x200001b8

08000d08 <_sbrk_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4d06      	ldr	r5, [pc, #24]	; (8000d24 <_sbrk_r+0x1c>)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	602b      	str	r3, [r5, #0]
 8000d14:	f7ff fb02 	bl	800031c <_sbrk>
 8000d18:	1c43      	adds	r3, r0, #1
 8000d1a:	d102      	bne.n	8000d22 <_sbrk_r+0x1a>
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	b103      	cbz	r3, 8000d22 <_sbrk_r+0x1a>
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
 8000d24:	200001b8 	.word	0x200001b8

08000d28 <_init>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr

08000d34 <_fini>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr
