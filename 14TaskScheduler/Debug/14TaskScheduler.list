
14TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e3c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800108c  0800108c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800108c  0800108c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800108c  0800108c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08001100  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08001100  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b77  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000421  00000000  00000000  00020c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000125  00000000  00000000  00021218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf6  00000000  00000000  0002133d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000143c  00000000  00000000  00024033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009aee  00000000  00000000  0002546f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bc4  00000000  00000000  0002ef60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0002fb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000fe8 	.word	0x08000fe8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	08000fe8 	.word	0x08000fe8

08000204 <main>:

uint8_t current_task = 0; // 0 means Task 1 is running


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	enable_processor_faults();
 8000208:	f000 f8c6 	bl	8000398 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x3c>)
 800020e:	f000 f877 	bl	8000300 <init_scheduler_stack>

	task_handlers[0] = (uint32_t) task1_handler;
 8000212:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <main+0x40>)
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <main+0x44>)
 8000216:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t) task2_handler;
 8000218:	4a0c      	ldr	r2, [pc, #48]	; (800024c <main+0x48>)
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x44>)
 800021c:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t) task3_handler;
 800021e:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <main+0x4c>)
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <main+0x44>)
 8000222:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t) task4_handler;
 8000224:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <main+0x50>)
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <main+0x44>)
 8000228:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 800022a:	f000 f86f 	bl	800030c <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 800022e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000232:	f000 f831 	bl	8000298 <init_systick_timer>

	// Tasks Should use PSP
	switch_sp_to_psp();
 8000236:	f000 f8dd 	bl	80003f4 <switch_sp_to_psp>

	task1_handler();
 800023a:	f000 f80d 	bl	8000258 <task1_handler>

	// Should never get here
    /* Loop forever */
	for(;;);
 800023e:	e7fe      	b.n	800023e <main+0x3a>
 8000240:	2001f000 	.word	0x2001f000
 8000244:	08000259 	.word	0x08000259
 8000248:	20000088 	.word	0x20000088
 800024c:	08000269 	.word	0x08000269
 8000250:	08000279 	.word	0x08000279
 8000254:	08000289 	.word	0x08000289

08000258 <task1_handler>:
}



void task1_handler(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	while(1){
		printf("Task1\n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task1_handler+0xc>)
 800025e:	f000 fb33 	bl	80008c8 <puts>
 8000262:	e7fb      	b.n	800025c <task1_handler+0x4>
 8000264:	08001000 	.word	0x08001000

08000268 <task2_handler>:
	}
}


void task2_handler(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0

	while(1){
		printf("Task2\n");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <task2_handler+0xc>)
 800026e:	f000 fb2b 	bl	80008c8 <puts>
 8000272:	e7fb      	b.n	800026c <task2_handler+0x4>
 8000274:	08001008 	.word	0x08001008

08000278 <task3_handler>:
	}
}


void task3_handler(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

	while(1){
		printf("Task3\n");
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <task3_handler+0xc>)
 800027e:	f000 fb23 	bl	80008c8 <puts>
 8000282:	e7fb      	b.n	800027c <task3_handler+0x4>
 8000284:	08001010 	.word	0x08001010

08000288 <task4_handler>:
	}
}


void task4_handler(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0

	while(1){
		printf("Task4\n");
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <task4_handler+0xc>)
 800028e:	f000 fb1b 	bl	80008c8 <puts>
 8000292:	e7fb      	b.n	800028c <task4_handler+0x4>
 8000294:	08001018 	.word	0x08001018

08000298 <init_systick_timer>:
	}
}



void init_systick_timer(uint32_t tick_hz){
 8000298:	b480      	push	{r7}
 800029a:	b087      	sub	sp, #28
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]

	// Count Value Calculation
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <init_systick_timer+0x5c>)
 80002a2:	617b      	str	r3, [r7, #20]
	uint32_t count_value = (SYSTICK_TIMER_CLOCK / tick_hz) - 1;
 80002a4:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <init_systick_timer+0x60>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ac:	3b01      	subs	r3, #1
 80002ae:	613b      	str	r3, [r7, #16]
	*pSRVR &= ~(0x00FFFFFFFF); // Clear the Register, only 24 bits are used
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
	*pSRVR |= count_value; // Load the Desired Reload Value
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	431a      	orrs	r2, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	601a      	str	r2, [r3, #0]

	// Configuration
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <init_systick_timer+0x64>)
 80002c4:	60fb      	str	r3, [r7, #12]
	*pSCSR |= (1 << 1); // Enable SysTick Exception Request
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f043 0202 	orr.w	r2, r3, #2
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Use Processor Clock as Source
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 0204 	orr.w	r2, r3, #4
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 0); // Enables the Counter
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 0201 	orr.w	r2, r3, #1
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	601a      	str	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	371c      	adds	r7, #28
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	e000e014 	.word	0xe000e014
 80002f8:	00f42400 	.word	0x00f42400
 80002fc:	e000e010 	.word	0xe000e010

08000300 <init_scheduler_stack>:


// To change the Stack Pointer it has to be done in Assembly
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){
 8000300:	4603      	mov	r3, r0

	// Changes MSP to scheduler_top_of_stack
	__asm volatile("MSR MSP,%0":: "r"(scheduler_top_of_stack): );
 8000302:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR"); // Returns back to main
 8000306:	4770      	bx	lr

}
 8000308:	bf00      	nop
	...

0800030c <init_tasks_stack>:


// Initialize each Task with 2 Stack Frames and Dummy Variables
void init_tasks_stack(void){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0

	uint32_t *pPSP; // Pointer used to access the Stack

	for(int i=0; i<MAX_TASKS; i++){
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	e032      	b.n	800037e <init_tasks_stack+0x72>
		pPSP = (uint32_t*) psp_of_tasks[i];
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <init_tasks_stack+0x84>)
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000320:	60fb      	str	r3, [r7, #12]

		// Stack is Full Descending
		pPSP--; // Store XPSR
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b04      	subs	r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // Should be 0x01000000
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800032e:	601a      	str	r2, [r3, #0]
		pPSP--; // Store PC
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b04      	subs	r3, #4
 8000334:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000336:	4a17      	ldr	r2, [pc, #92]	; (8000394 <init_tasks_stack+0x88>)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	601a      	str	r2, [r3, #0]
		pPSP--; // Store LR
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3b04      	subs	r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f06f 0202 	mvn.w	r2, #2
 800034e:	601a      	str	r2, [r3, #0]
		// Store 0 in each of the Registers
		for(int j=0; j<13; j++){
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	e008      	b.n	8000368 <init_tasks_stack+0x5c>
			pPSP--;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3b04      	subs	r3, #4
 800035a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
		for(int j=0; j<13; j++){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b0c      	cmp	r3, #12
 800036c:	ddf3      	ble.n	8000356 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <init_tasks_stack+0x84>)
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<MAX_TASKS; i++){
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3301      	adds	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	2b03      	cmp	r3, #3
 8000382:	ddc9      	ble.n	8000318 <init_tasks_stack+0xc>

	}

}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	20000000 	.word	0x20000000
 8000394:	20000088 	.word	0x20000088

08000398 <enable_processor_faults>:


void enable_processor_faults(void){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	// Enable all configurable exceptions like Usage, Memory Management, and Bus Faults

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24; // Address for System Handler Control and State Register
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <enable_processor_faults+0x38>)
 80003a0:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 18); // Enable Usage Fault bit 18
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // Enable Bus Fault bit 17
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 16); // Enable Memory Management Fault bit 16
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	e000ed24 	.word	0xe000ed24

080003d4 <get_psp_value>:


uint32_t get_psp_value(void){
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <get_psp_value+0x18>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <get_psp_value+0x1c>)
 80003e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	20000098 	.word	0x20000098
 80003f0:	20000000 	.word	0x20000000

080003f4 <switch_sp_to_psp>:

// CONTROL is a Special register so have to use MSR and naked attribute
__attribute__ ((naked)) void switch_sp_to_psp(void){

	// 1. Initialize the PSP with TASK1 stack start address
	__asm volatile("PUSH {LR}"); // Save LR so we can return to main() after the BL
 80003f4:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); // Use BL so it returns to this function afterwards and Returns value in R0
 80003f6:	f7ff ffed 	bl	80003d4 <get_psp_value>
	__asm volatile("MSR PSP,R0");
 80003fa:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); // So we can return back to main()
 80003fe:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change SP to PSP using CONTROL register
	// Set SPSEL (the second bit) of the control register to 1 to select PSP
	__asm volatile("MOV R0,#0x02");
 8000402:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 8000406:	f380 8814 	msr	CONTROL, r0

	__asm volatile("BX LR"); // Branch back to main
 800040a:	4770      	bx	lr

}
 800040c:	bf00      	nop
	...

08000410 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <save_psp_value+0x20>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <save_psp_value+0x24>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000098 	.word	0x20000098
 8000434:	20000000 	.word	0x20000000

08000438 <update_next_task>:

void update_next_task(void){
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	// Round Robin: Just increment the Task
	current_task++;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <update_next_task+0x28>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <update_next_task+0x28>)
 8000446:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <update_next_task+0x28>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	f003 0303 	and.w	r3, r3, #3
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b03      	ldr	r3, [pc, #12]	; (8000460 <update_next_task+0x28>)
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000098 	.word	0x20000098

08000464 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void){

	/* Save the Context of Current Task */

	// 1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000464:	f3ef 8009 	mrs	r0, PSP

	// 2. using that PSP value store SF2 (R4-R11)
	// Can't use PUSH here since PUSH uses MSP and we are using PSP
	// STMDB: Store Multiple Registers, Decrement Before
	// ! updates R0 with the last value stored
	__asm volatile("STMDB R0!,{R4-R11}");
 8000468:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 3. Save the current value of PSP (R0)
	// Update the value for the appropriate psp_of_tasks
	__asm volatile("PUSH {LR}"); // Save LR Value
 800046c:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 800046e:	f7ff ffcf 	bl	8000410 <save_psp_value>

	/* Retrieve the Context of Next Task */


	// 1. Decide Next Task to Run
	__asm volatile("BL update_next_task");
 8000472:	f7ff ffe1 	bl	8000438 <update_next_task>

	// 2. Get its past PSP value
	__asm volatile("BL get_psp_value");
 8000476:	f7ff ffad 	bl	80003d4 <get_psp_value>

	// 3. Using that PSP value Retrieve SF2 (R4-R11)
	// Load from Memory to Registers
	__asm volatile("LDMIA R0!,{R4-R11}"); // Load Multiple Registers, Increment After
 800047a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. Update PSP and Exit
	__asm volatile("MSR PSP,R0");
 800047e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000482:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000486:	4770      	bx	lr


}
 8000488:	bf00      	nop
	...

0800048c <HardFault_Handler>:


void HardFault_Handler(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <HardFault_Handler+0xc>)
 8000492:	f000 fa19 	bl	80008c8 <puts>
	while(1);
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0xa>
 8000498:	08001020 	.word	0x08001020

0800049c <MemManage_Handler>:

	while(1);
}


void MemManage_Handler(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	printf("Exception: MemMangeFault\n");
 80004a0:	4801      	ldr	r0, [pc, #4]	; (80004a8 <MemManage_Handler+0xc>)
 80004a2:	f000 fa11 	bl	80008c8 <puts>
	while(1);
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0xa>
 80004a8:	0800105c 	.word	0x0800105c

080004ac <BusFault_Handler>:
}


void BusFault_Handler(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 80004b0:	4801      	ldr	r0, [pc, #4]	; (80004b8 <BusFault_Handler+0xc>)
 80004b2:	f000 fa09 	bl	80008c8 <puts>
	while(1);
 80004b6:	e7fe      	b.n	80004b6 <BusFault_Handler+0xa>
 80004b8:	08001078 	.word	0x08001078

080004bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <ITM_SendChar+0x44>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <ITM_SendChar+0x44>)
 80004cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <ITM_SendChar+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <ITM_SendChar+0x48>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004de:	bf00      	nop
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f8      	beq.n	80004e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	e000edfc 	.word	0xe000edfc
 8000504:	e0000e00 	.word	0xe0000e00

08000508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
  }

  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffad 	bl	80004bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
  }
  return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a0:	605a      	str	r2, [r3, #4]
  return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <_isatty>:

int _isatty(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f000 fa8a 	bl	8000b24 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20020000 	.word	0x20020000
 800063c:	00000400 	.word	0x00000400
 8000640:	2000009c 	.word	0x2000009c
 8000644:	200001f0 	.word	0x200001f0

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	; (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	; (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f000 fa5b 	bl	8000b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fdc3 	bl	8000204 <main>

0800067e <LoopForever>:

LoopForever:
  b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800068c:	08001094 	.word	0x08001094
  ldr r2, =_sbss
 8000690:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000694:	200001ec 	.word	0x200001ec

08000698 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <std>:
 800069c:	2300      	movs	r3, #0
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	e9c0 3300 	strd	r3, r3, [r0]
 80006a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006aa:	6083      	str	r3, [r0, #8]
 80006ac:	8181      	strh	r1, [r0, #12]
 80006ae:	6643      	str	r3, [r0, #100]	; 0x64
 80006b0:	81c2      	strh	r2, [r0, #14]
 80006b2:	6183      	str	r3, [r0, #24]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2208      	movs	r2, #8
 80006b8:	305c      	adds	r0, #92	; 0x5c
 80006ba:	f000 f9e5 	bl	8000a88 <memset>
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <std+0x58>)
 80006c0:	6263      	str	r3, [r4, #36]	; 0x24
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <std+0x5c>)
 80006c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <std+0x60>)
 80006c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <std+0x64>)
 80006cc:	6323      	str	r3, [r4, #48]	; 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <std+0x68>)
 80006d0:	6224      	str	r4, [r4, #32]
 80006d2:	429c      	cmp	r4, r3
 80006d4:	d006      	beq.n	80006e4 <std+0x48>
 80006d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006da:	4294      	cmp	r4, r2
 80006dc:	d002      	beq.n	80006e4 <std+0x48>
 80006de:	33d0      	adds	r3, #208	; 0xd0
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d105      	bne.n	80006f0 <std+0x54>
 80006e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f000 ba44 	b.w	8000b78 <__retarget_lock_init_recursive>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	bf00      	nop
 80006f4:	080008d9 	.word	0x080008d9
 80006f8:	080008fb 	.word	0x080008fb
 80006fc:	08000933 	.word	0x08000933
 8000700:	08000957 	.word	0x08000957
 8000704:	200000a0 	.word	0x200000a0

08000708 <stdio_exit_handler>:
 8000708:	4a02      	ldr	r2, [pc, #8]	; (8000714 <stdio_exit_handler+0xc>)
 800070a:	4903      	ldr	r1, [pc, #12]	; (8000718 <stdio_exit_handler+0x10>)
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <stdio_exit_handler+0x14>)
 800070e:	f000 b869 	b.w	80007e4 <_fwalk_sglue>
 8000712:	bf00      	nop
 8000714:	20000010 	.word	0x20000010
 8000718:	08000e71 	.word	0x08000e71
 800071c:	2000001c 	.word	0x2000001c

08000720 <cleanup_stdio>:
 8000720:	6841      	ldr	r1, [r0, #4]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <cleanup_stdio+0x34>)
 8000724:	4299      	cmp	r1, r3
 8000726:	b510      	push	{r4, lr}
 8000728:	4604      	mov	r4, r0
 800072a:	d001      	beq.n	8000730 <cleanup_stdio+0x10>
 800072c:	f000 fba0 	bl	8000e70 <_fflush_r>
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <cleanup_stdio+0x38>)
 8000734:	4299      	cmp	r1, r3
 8000736:	d002      	beq.n	800073e <cleanup_stdio+0x1e>
 8000738:	4620      	mov	r0, r4
 800073a:	f000 fb99 	bl	8000e70 <_fflush_r>
 800073e:	68e1      	ldr	r1, [r4, #12]
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <cleanup_stdio+0x3c>)
 8000742:	4299      	cmp	r1, r3
 8000744:	d004      	beq.n	8000750 <cleanup_stdio+0x30>
 8000746:	4620      	mov	r0, r4
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f000 bb90 	b.w	8000e70 <_fflush_r>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	200000a0 	.word	0x200000a0
 8000758:	20000108 	.word	0x20000108
 800075c:	20000170 	.word	0x20000170

08000760 <global_stdio_init.part.0>:
 8000760:	b510      	push	{r4, lr}
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <global_stdio_init.part.0+0x30>)
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <global_stdio_init.part.0+0x34>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <global_stdio_init.part.0+0x38>)
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4620      	mov	r0, r4
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	f7ff ff94 	bl	800069c <std>
 8000774:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000778:	2201      	movs	r2, #1
 800077a:	2109      	movs	r1, #9
 800077c:	f7ff ff8e 	bl	800069c <std>
 8000780:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000784:	2202      	movs	r2, #2
 8000786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800078a:	2112      	movs	r1, #18
 800078c:	f7ff bf86 	b.w	800069c <std>
 8000790:	200001d8 	.word	0x200001d8
 8000794:	200000a0 	.word	0x200000a0
 8000798:	08000709 	.word	0x08000709

0800079c <__sfp_lock_acquire>:
 800079c:	4801      	ldr	r0, [pc, #4]	; (80007a4 <__sfp_lock_acquire+0x8>)
 800079e:	f000 b9ec 	b.w	8000b7a <__retarget_lock_acquire_recursive>
 80007a2:	bf00      	nop
 80007a4:	200001e1 	.word	0x200001e1

080007a8 <__sfp_lock_release>:
 80007a8:	4801      	ldr	r0, [pc, #4]	; (80007b0 <__sfp_lock_release+0x8>)
 80007aa:	f000 b9e7 	b.w	8000b7c <__retarget_lock_release_recursive>
 80007ae:	bf00      	nop
 80007b0:	200001e1 	.word	0x200001e1

080007b4 <__sinit>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
 80007b8:	f7ff fff0 	bl	800079c <__sfp_lock_acquire>
 80007bc:	6a23      	ldr	r3, [r4, #32]
 80007be:	b11b      	cbz	r3, 80007c8 <__sinit+0x14>
 80007c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c4:	f7ff bff0 	b.w	80007a8 <__sfp_lock_release>
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <__sinit+0x28>)
 80007ca:	6223      	str	r3, [r4, #32]
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__sinit+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f5      	bne.n	80007c0 <__sinit+0xc>
 80007d4:	f7ff ffc4 	bl	8000760 <global_stdio_init.part.0>
 80007d8:	e7f2      	b.n	80007c0 <__sinit+0xc>
 80007da:	bf00      	nop
 80007dc:	08000721 	.word	0x08000721
 80007e0:	200001d8 	.word	0x200001d8

080007e4 <_fwalk_sglue>:
 80007e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e8:	4607      	mov	r7, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	4614      	mov	r4, r2
 80007ee:	2600      	movs	r6, #0
 80007f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007f4:	f1b9 0901 	subs.w	r9, r9, #1
 80007f8:	d505      	bpl.n	8000806 <_fwalk_sglue+0x22>
 80007fa:	6824      	ldr	r4, [r4, #0]
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d1f7      	bne.n	80007f0 <_fwalk_sglue+0xc>
 8000800:	4630      	mov	r0, r6
 8000802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000806:	89ab      	ldrh	r3, [r5, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d907      	bls.n	800081c <_fwalk_sglue+0x38>
 800080c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	d003      	beq.n	800081c <_fwalk_sglue+0x38>
 8000814:	4629      	mov	r1, r5
 8000816:	4638      	mov	r0, r7
 8000818:	47c0      	blx	r8
 800081a:	4306      	orrs	r6, r0
 800081c:	3568      	adds	r5, #104	; 0x68
 800081e:	e7e9      	b.n	80007f4 <_fwalk_sglue+0x10>

08000820 <_puts_r>:
 8000820:	6a03      	ldr	r3, [r0, #32]
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	6884      	ldr	r4, [r0, #8]
 8000826:	4605      	mov	r5, r0
 8000828:	460e      	mov	r6, r1
 800082a:	b90b      	cbnz	r3, 8000830 <_puts_r+0x10>
 800082c:	f7ff ffc2 	bl	80007b4 <__sinit>
 8000830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000832:	07db      	lsls	r3, r3, #31
 8000834:	d405      	bmi.n	8000842 <_puts_r+0x22>
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	0598      	lsls	r0, r3, #22
 800083a:	d402      	bmi.n	8000842 <_puts_r+0x22>
 800083c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800083e:	f000 f99c 	bl	8000b7a <__retarget_lock_acquire_recursive>
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	0719      	lsls	r1, r3, #28
 8000846:	d513      	bpl.n	8000870 <_puts_r+0x50>
 8000848:	6923      	ldr	r3, [r4, #16]
 800084a:	b18b      	cbz	r3, 8000870 <_puts_r+0x50>
 800084c:	3e01      	subs	r6, #1
 800084e:	68a3      	ldr	r3, [r4, #8]
 8000850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000854:	3b01      	subs	r3, #1
 8000856:	60a3      	str	r3, [r4, #8]
 8000858:	b9e9      	cbnz	r1, 8000896 <_puts_r+0x76>
 800085a:	2b00      	cmp	r3, #0
 800085c:	da2e      	bge.n	80008bc <_puts_r+0x9c>
 800085e:	4622      	mov	r2, r4
 8000860:	210a      	movs	r1, #10
 8000862:	4628      	mov	r0, r5
 8000864:	f000 f87b 	bl	800095e <__swbuf_r>
 8000868:	3001      	adds	r0, #1
 800086a:	d007      	beq.n	800087c <_puts_r+0x5c>
 800086c:	250a      	movs	r5, #10
 800086e:	e007      	b.n	8000880 <_puts_r+0x60>
 8000870:	4621      	mov	r1, r4
 8000872:	4628      	mov	r0, r5
 8000874:	f000 f8b0 	bl	80009d8 <__swsetup_r>
 8000878:	2800      	cmp	r0, #0
 800087a:	d0e7      	beq.n	800084c <_puts_r+0x2c>
 800087c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000882:	07da      	lsls	r2, r3, #31
 8000884:	d405      	bmi.n	8000892 <_puts_r+0x72>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	059b      	lsls	r3, r3, #22
 800088a:	d402      	bmi.n	8000892 <_puts_r+0x72>
 800088c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800088e:	f000 f975 	bl	8000b7c <__retarget_lock_release_recursive>
 8000892:	4628      	mov	r0, r5
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2b00      	cmp	r3, #0
 8000898:	da04      	bge.n	80008a4 <_puts_r+0x84>
 800089a:	69a2      	ldr	r2, [r4, #24]
 800089c:	429a      	cmp	r2, r3
 800089e:	dc06      	bgt.n	80008ae <_puts_r+0x8e>
 80008a0:	290a      	cmp	r1, #10
 80008a2:	d004      	beq.n	80008ae <_puts_r+0x8e>
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	6022      	str	r2, [r4, #0]
 80008aa:	7019      	strb	r1, [r3, #0]
 80008ac:	e7cf      	b.n	800084e <_puts_r+0x2e>
 80008ae:	4622      	mov	r2, r4
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 f854 	bl	800095e <__swbuf_r>
 80008b6:	3001      	adds	r0, #1
 80008b8:	d1c9      	bne.n	800084e <_puts_r+0x2e>
 80008ba:	e7df      	b.n	800087c <_puts_r+0x5c>
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	250a      	movs	r5, #10
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	6022      	str	r2, [r4, #0]
 80008c4:	701d      	strb	r5, [r3, #0]
 80008c6:	e7db      	b.n	8000880 <_puts_r+0x60>

080008c8 <puts>:
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <puts+0xc>)
 80008ca:	4601      	mov	r1, r0
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	f7ff bfa7 	b.w	8000820 <_puts_r>
 80008d2:	bf00      	nop
 80008d4:	20000068 	.word	0x20000068

080008d8 <__sread>:
 80008d8:	b510      	push	{r4, lr}
 80008da:	460c      	mov	r4, r1
 80008dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e0:	f000 f8fc 	bl	8000adc <_read_r>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	bfab      	itete	ge
 80008e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008ea:	89a3      	ldrhlt	r3, [r4, #12]
 80008ec:	181b      	addge	r3, r3, r0
 80008ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008f2:	bfac      	ite	ge
 80008f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80008f6:	81a3      	strhlt	r3, [r4, #12]
 80008f8:	bd10      	pop	{r4, pc}

080008fa <__swrite>:
 80008fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008fe:	461f      	mov	r7, r3
 8000900:	898b      	ldrh	r3, [r1, #12]
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	4605      	mov	r5, r0
 8000906:	460c      	mov	r4, r1
 8000908:	4616      	mov	r6, r2
 800090a:	d505      	bpl.n	8000918 <__swrite+0x1e>
 800090c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000910:	2302      	movs	r3, #2
 8000912:	2200      	movs	r2, #0
 8000914:	f000 f8d0 	bl	8000ab8 <_lseek_r>
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800091e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000922:	81a3      	strh	r3, [r4, #12]
 8000924:	4632      	mov	r2, r6
 8000926:	463b      	mov	r3, r7
 8000928:	4628      	mov	r0, r5
 800092a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800092e:	f000 b8e7 	b.w	8000b00 <_write_r>

08000932 <__sseek>:
 8000932:	b510      	push	{r4, lr}
 8000934:	460c      	mov	r4, r1
 8000936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800093a:	f000 f8bd 	bl	8000ab8 <_lseek_r>
 800093e:	1c43      	adds	r3, r0, #1
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	bf15      	itete	ne
 8000944:	6560      	strne	r0, [r4, #84]	; 0x54
 8000946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800094a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800094e:	81a3      	strheq	r3, [r4, #12]
 8000950:	bf18      	it	ne
 8000952:	81a3      	strhne	r3, [r4, #12]
 8000954:	bd10      	pop	{r4, pc}

08000956 <__sclose>:
 8000956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095a:	f000 b89d 	b.w	8000a98 <_close_r>

0800095e <__swbuf_r>:
 800095e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000960:	460e      	mov	r6, r1
 8000962:	4614      	mov	r4, r2
 8000964:	4605      	mov	r5, r0
 8000966:	b118      	cbz	r0, 8000970 <__swbuf_r+0x12>
 8000968:	6a03      	ldr	r3, [r0, #32]
 800096a:	b90b      	cbnz	r3, 8000970 <__swbuf_r+0x12>
 800096c:	f7ff ff22 	bl	80007b4 <__sinit>
 8000970:	69a3      	ldr	r3, [r4, #24]
 8000972:	60a3      	str	r3, [r4, #8]
 8000974:	89a3      	ldrh	r3, [r4, #12]
 8000976:	071a      	lsls	r2, r3, #28
 8000978:	d525      	bpl.n	80009c6 <__swbuf_r+0x68>
 800097a:	6923      	ldr	r3, [r4, #16]
 800097c:	b31b      	cbz	r3, 80009c6 <__swbuf_r+0x68>
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	6922      	ldr	r2, [r4, #16]
 8000982:	1a98      	subs	r0, r3, r2
 8000984:	6963      	ldr	r3, [r4, #20]
 8000986:	b2f6      	uxtb	r6, r6
 8000988:	4283      	cmp	r3, r0
 800098a:	4637      	mov	r7, r6
 800098c:	dc04      	bgt.n	8000998 <__swbuf_r+0x3a>
 800098e:	4621      	mov	r1, r4
 8000990:	4628      	mov	r0, r5
 8000992:	f000 fa6d 	bl	8000e70 <_fflush_r>
 8000996:	b9e0      	cbnz	r0, 80009d2 <__swbuf_r+0x74>
 8000998:	68a3      	ldr	r3, [r4, #8]
 800099a:	3b01      	subs	r3, #1
 800099c:	60a3      	str	r3, [r4, #8]
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	6022      	str	r2, [r4, #0]
 80009a4:	701e      	strb	r6, [r3, #0]
 80009a6:	6962      	ldr	r2, [r4, #20]
 80009a8:	1c43      	adds	r3, r0, #1
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d004      	beq.n	80009b8 <__swbuf_r+0x5a>
 80009ae:	89a3      	ldrh	r3, [r4, #12]
 80009b0:	07db      	lsls	r3, r3, #31
 80009b2:	d506      	bpl.n	80009c2 <__swbuf_r+0x64>
 80009b4:	2e0a      	cmp	r6, #10
 80009b6:	d104      	bne.n	80009c2 <__swbuf_r+0x64>
 80009b8:	4621      	mov	r1, r4
 80009ba:	4628      	mov	r0, r5
 80009bc:	f000 fa58 	bl	8000e70 <_fflush_r>
 80009c0:	b938      	cbnz	r0, 80009d2 <__swbuf_r+0x74>
 80009c2:	4638      	mov	r0, r7
 80009c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009c6:	4621      	mov	r1, r4
 80009c8:	4628      	mov	r0, r5
 80009ca:	f000 f805 	bl	80009d8 <__swsetup_r>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d0d5      	beq.n	800097e <__swbuf_r+0x20>
 80009d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009d6:	e7f4      	b.n	80009c2 <__swbuf_r+0x64>

080009d8 <__swsetup_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <__swsetup_r+0xac>)
 80009dc:	4605      	mov	r5, r0
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	460c      	mov	r4, r1
 80009e2:	b118      	cbz	r0, 80009ec <__swsetup_r+0x14>
 80009e4:	6a03      	ldr	r3, [r0, #32]
 80009e6:	b90b      	cbnz	r3, 80009ec <__swsetup_r+0x14>
 80009e8:	f7ff fee4 	bl	80007b4 <__sinit>
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009f2:	0718      	lsls	r0, r3, #28
 80009f4:	d422      	bmi.n	8000a3c <__swsetup_r+0x64>
 80009f6:	06d9      	lsls	r1, r3, #27
 80009f8:	d407      	bmi.n	8000a0a <__swsetup_r+0x32>
 80009fa:	2309      	movs	r3, #9
 80009fc:	602b      	str	r3, [r5, #0]
 80009fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a02:	81a3      	strh	r3, [r4, #12]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a08:	e034      	b.n	8000a74 <__swsetup_r+0x9c>
 8000a0a:	0758      	lsls	r0, r3, #29
 8000a0c:	d512      	bpl.n	8000a34 <__swsetup_r+0x5c>
 8000a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a10:	b141      	cbz	r1, 8000a24 <__swsetup_r+0x4c>
 8000a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a16:	4299      	cmp	r1, r3
 8000a18:	d002      	beq.n	8000a20 <__swsetup_r+0x48>
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 f8b0 	bl	8000b80 <_free_r>
 8000a20:	2300      	movs	r3, #0
 8000a22:	6363      	str	r3, [r4, #52]	; 0x34
 8000a24:	89a3      	ldrh	r3, [r4, #12]
 8000a26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a2a:	81a3      	strh	r3, [r4, #12]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	6063      	str	r3, [r4, #4]
 8000a30:	6923      	ldr	r3, [r4, #16]
 8000a32:	6023      	str	r3, [r4, #0]
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	81a3      	strh	r3, [r4, #12]
 8000a3c:	6923      	ldr	r3, [r4, #16]
 8000a3e:	b94b      	cbnz	r3, 8000a54 <__swsetup_r+0x7c>
 8000a40:	89a3      	ldrh	r3, [r4, #12]
 8000a42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a4a:	d003      	beq.n	8000a54 <__swsetup_r+0x7c>
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	4628      	mov	r0, r5
 8000a50:	f000 fa5c 	bl	8000f0c <__smakebuf_r>
 8000a54:	89a0      	ldrh	r0, [r4, #12]
 8000a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a5a:	f010 0301 	ands.w	r3, r0, #1
 8000a5e:	d00a      	beq.n	8000a76 <__swsetup_r+0x9e>
 8000a60:	2300      	movs	r3, #0
 8000a62:	60a3      	str	r3, [r4, #8]
 8000a64:	6963      	ldr	r3, [r4, #20]
 8000a66:	425b      	negs	r3, r3
 8000a68:	61a3      	str	r3, [r4, #24]
 8000a6a:	6923      	ldr	r3, [r4, #16]
 8000a6c:	b943      	cbnz	r3, 8000a80 <__swsetup_r+0xa8>
 8000a6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a72:	d1c4      	bne.n	80009fe <__swsetup_r+0x26>
 8000a74:	bd38      	pop	{r3, r4, r5, pc}
 8000a76:	0781      	lsls	r1, r0, #30
 8000a78:	bf58      	it	pl
 8000a7a:	6963      	ldrpl	r3, [r4, #20]
 8000a7c:	60a3      	str	r3, [r4, #8]
 8000a7e:	e7f4      	b.n	8000a6a <__swsetup_r+0x92>
 8000a80:	2000      	movs	r0, #0
 8000a82:	e7f7      	b.n	8000a74 <__swsetup_r+0x9c>
 8000a84:	20000068 	.word	0x20000068

08000a88 <memset>:
 8000a88:	4402      	add	r2, r0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d100      	bne.n	8000a92 <memset+0xa>
 8000a90:	4770      	bx	lr
 8000a92:	f803 1b01 	strb.w	r1, [r3], #1
 8000a96:	e7f9      	b.n	8000a8c <memset+0x4>

08000a98 <_close_r>:
 8000a98:	b538      	push	{r3, r4, r5, lr}
 8000a9a:	4d06      	ldr	r5, [pc, #24]	; (8000ab4 <_close_r+0x1c>)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	602b      	str	r3, [r5, #0]
 8000aa4:	f7ff fd69 	bl	800057a <_close>
 8000aa8:	1c43      	adds	r3, r0, #1
 8000aaa:	d102      	bne.n	8000ab2 <_close_r+0x1a>
 8000aac:	682b      	ldr	r3, [r5, #0]
 8000aae:	b103      	cbz	r3, 8000ab2 <_close_r+0x1a>
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	bd38      	pop	{r3, r4, r5, pc}
 8000ab4:	200001dc 	.word	0x200001dc

08000ab8 <_lseek_r>:
 8000ab8:	b538      	push	{r3, r4, r5, lr}
 8000aba:	4d07      	ldr	r5, [pc, #28]	; (8000ad8 <_lseek_r+0x20>)
 8000abc:	4604      	mov	r4, r0
 8000abe:	4608      	mov	r0, r1
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	602a      	str	r2, [r5, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	f7ff fd7b 	bl	80005c2 <_lseek>
 8000acc:	1c43      	adds	r3, r0, #1
 8000ace:	d102      	bne.n	8000ad6 <_lseek_r+0x1e>
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	b103      	cbz	r3, 8000ad6 <_lseek_r+0x1e>
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}
 8000ad8:	200001dc 	.word	0x200001dc

08000adc <_read_r>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4d07      	ldr	r5, [pc, #28]	; (8000afc <_read_r+0x20>)
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	602a      	str	r2, [r5, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f7ff fd0c 	bl	8000508 <_read>
 8000af0:	1c43      	adds	r3, r0, #1
 8000af2:	d102      	bne.n	8000afa <_read_r+0x1e>
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	b103      	cbz	r3, 8000afa <_read_r+0x1e>
 8000af8:	6023      	str	r3, [r4, #0]
 8000afa:	bd38      	pop	{r3, r4, r5, pc}
 8000afc:	200001dc 	.word	0x200001dc

08000b00 <_write_r>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	4d07      	ldr	r5, [pc, #28]	; (8000b20 <_write_r+0x20>)
 8000b04:	4604      	mov	r4, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4611      	mov	r1, r2
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	602a      	str	r2, [r5, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f7ff fd17 	bl	8000542 <_write>
 8000b14:	1c43      	adds	r3, r0, #1
 8000b16:	d102      	bne.n	8000b1e <_write_r+0x1e>
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	b103      	cbz	r3, 8000b1e <_write_r+0x1e>
 8000b1c:	6023      	str	r3, [r4, #0]
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
 8000b20:	200001dc 	.word	0x200001dc

08000b24 <__errno>:
 8000b24:	4b01      	ldr	r3, [pc, #4]	; (8000b2c <__errno+0x8>)
 8000b26:	6818      	ldr	r0, [r3, #0]
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000068 	.word	0x20000068

08000b30 <__libc_init_array>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	4d0d      	ldr	r5, [pc, #52]	; (8000b68 <__libc_init_array+0x38>)
 8000b34:	4c0d      	ldr	r4, [pc, #52]	; (8000b6c <__libc_init_array+0x3c>)
 8000b36:	1b64      	subs	r4, r4, r5
 8000b38:	10a4      	asrs	r4, r4, #2
 8000b3a:	2600      	movs	r6, #0
 8000b3c:	42a6      	cmp	r6, r4
 8000b3e:	d109      	bne.n	8000b54 <__libc_init_array+0x24>
 8000b40:	4d0b      	ldr	r5, [pc, #44]	; (8000b70 <__libc_init_array+0x40>)
 8000b42:	4c0c      	ldr	r4, [pc, #48]	; (8000b74 <__libc_init_array+0x44>)
 8000b44:	f000 fa50 	bl	8000fe8 <_init>
 8000b48:	1b64      	subs	r4, r4, r5
 8000b4a:	10a4      	asrs	r4, r4, #2
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	42a6      	cmp	r6, r4
 8000b50:	d105      	bne.n	8000b5e <__libc_init_array+0x2e>
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b58:	4798      	blx	r3
 8000b5a:	3601      	adds	r6, #1
 8000b5c:	e7ee      	b.n	8000b3c <__libc_init_array+0xc>
 8000b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b62:	4798      	blx	r3
 8000b64:	3601      	adds	r6, #1
 8000b66:	e7f2      	b.n	8000b4e <__libc_init_array+0x1e>
 8000b68:	0800108c 	.word	0x0800108c
 8000b6c:	0800108c 	.word	0x0800108c
 8000b70:	0800108c 	.word	0x0800108c
 8000b74:	08001090 	.word	0x08001090

08000b78 <__retarget_lock_init_recursive>:
 8000b78:	4770      	bx	lr

08000b7a <__retarget_lock_acquire_recursive>:
 8000b7a:	4770      	bx	lr

08000b7c <__retarget_lock_release_recursive>:
 8000b7c:	4770      	bx	lr
	...

08000b80 <_free_r>:
 8000b80:	b538      	push	{r3, r4, r5, lr}
 8000b82:	4605      	mov	r5, r0
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d041      	beq.n	8000c0c <_free_r+0x8c>
 8000b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b8c:	1f0c      	subs	r4, r1, #4
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bfb8      	it	lt
 8000b92:	18e4      	addlt	r4, r4, r3
 8000b94:	f000 f8de 	bl	8000d54 <__malloc_lock>
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <_free_r+0x90>)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	b933      	cbnz	r3, 8000bac <_free_r+0x2c>
 8000b9e:	6063      	str	r3, [r4, #4]
 8000ba0:	6014      	str	r4, [r2, #0]
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba8:	f000 b8da 	b.w	8000d60 <__malloc_unlock>
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d908      	bls.n	8000bc2 <_free_r+0x42>
 8000bb0:	6820      	ldr	r0, [r4, #0]
 8000bb2:	1821      	adds	r1, r4, r0
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	bf01      	itttt	eq
 8000bb8:	6819      	ldreq	r1, [r3, #0]
 8000bba:	685b      	ldreq	r3, [r3, #4]
 8000bbc:	1809      	addeq	r1, r1, r0
 8000bbe:	6021      	streq	r1, [r4, #0]
 8000bc0:	e7ed      	b.n	8000b9e <_free_r+0x1e>
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	b10b      	cbz	r3, 8000bcc <_free_r+0x4c>
 8000bc8:	42a3      	cmp	r3, r4
 8000bca:	d9fa      	bls.n	8000bc2 <_free_r+0x42>
 8000bcc:	6811      	ldr	r1, [r2, #0]
 8000bce:	1850      	adds	r0, r2, r1
 8000bd0:	42a0      	cmp	r0, r4
 8000bd2:	d10b      	bne.n	8000bec <_free_r+0x6c>
 8000bd4:	6820      	ldr	r0, [r4, #0]
 8000bd6:	4401      	add	r1, r0
 8000bd8:	1850      	adds	r0, r2, r1
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	6011      	str	r1, [r2, #0]
 8000bde:	d1e0      	bne.n	8000ba2 <_free_r+0x22>
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	6053      	str	r3, [r2, #4]
 8000be6:	4408      	add	r0, r1
 8000be8:	6010      	str	r0, [r2, #0]
 8000bea:	e7da      	b.n	8000ba2 <_free_r+0x22>
 8000bec:	d902      	bls.n	8000bf4 <_free_r+0x74>
 8000bee:	230c      	movs	r3, #12
 8000bf0:	602b      	str	r3, [r5, #0]
 8000bf2:	e7d6      	b.n	8000ba2 <_free_r+0x22>
 8000bf4:	6820      	ldr	r0, [r4, #0]
 8000bf6:	1821      	adds	r1, r4, r0
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	bf04      	itt	eq
 8000bfc:	6819      	ldreq	r1, [r3, #0]
 8000bfe:	685b      	ldreq	r3, [r3, #4]
 8000c00:	6063      	str	r3, [r4, #4]
 8000c02:	bf04      	itt	eq
 8000c04:	1809      	addeq	r1, r1, r0
 8000c06:	6021      	streq	r1, [r4, #0]
 8000c08:	6054      	str	r4, [r2, #4]
 8000c0a:	e7ca      	b.n	8000ba2 <_free_r+0x22>
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001e4 	.word	0x200001e4

08000c14 <sbrk_aligned>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	4e0e      	ldr	r6, [pc, #56]	; (8000c50 <sbrk_aligned+0x3c>)
 8000c18:	460c      	mov	r4, r1
 8000c1a:	6831      	ldr	r1, [r6, #0]
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	b911      	cbnz	r1, 8000c26 <sbrk_aligned+0x12>
 8000c20:	f000 f9d2 	bl	8000fc8 <_sbrk_r>
 8000c24:	6030      	str	r0, [r6, #0]
 8000c26:	4621      	mov	r1, r4
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f000 f9cd 	bl	8000fc8 <_sbrk_r>
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	d00a      	beq.n	8000c48 <sbrk_aligned+0x34>
 8000c32:	1cc4      	adds	r4, r0, #3
 8000c34:	f024 0403 	bic.w	r4, r4, #3
 8000c38:	42a0      	cmp	r0, r4
 8000c3a:	d007      	beq.n	8000c4c <sbrk_aligned+0x38>
 8000c3c:	1a21      	subs	r1, r4, r0
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f000 f9c2 	bl	8000fc8 <_sbrk_r>
 8000c44:	3001      	adds	r0, #1
 8000c46:	d101      	bne.n	8000c4c <sbrk_aligned+0x38>
 8000c48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	200001e8 	.word	0x200001e8

08000c54 <_malloc_r>:
 8000c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c58:	1ccd      	adds	r5, r1, #3
 8000c5a:	f025 0503 	bic.w	r5, r5, #3
 8000c5e:	3508      	adds	r5, #8
 8000c60:	2d0c      	cmp	r5, #12
 8000c62:	bf38      	it	cc
 8000c64:	250c      	movcc	r5, #12
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	4607      	mov	r7, r0
 8000c6a:	db01      	blt.n	8000c70 <_malloc_r+0x1c>
 8000c6c:	42a9      	cmp	r1, r5
 8000c6e:	d905      	bls.n	8000c7c <_malloc_r+0x28>
 8000c70:	230c      	movs	r3, #12
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	2600      	movs	r6, #0
 8000c76:	4630      	mov	r0, r6
 8000c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d50 <_malloc_r+0xfc>
 8000c80:	f000 f868 	bl	8000d54 <__malloc_lock>
 8000c84:	f8d8 3000 	ldr.w	r3, [r8]
 8000c88:	461c      	mov	r4, r3
 8000c8a:	bb5c      	cbnz	r4, 8000ce4 <_malloc_r+0x90>
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4638      	mov	r0, r7
 8000c90:	f7ff ffc0 	bl	8000c14 <sbrk_aligned>
 8000c94:	1c43      	adds	r3, r0, #1
 8000c96:	4604      	mov	r4, r0
 8000c98:	d155      	bne.n	8000d46 <_malloc_r+0xf2>
 8000c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d145      	bne.n	8000d30 <_malloc_r+0xdc>
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	d048      	beq.n	8000d3a <_malloc_r+0xe6>
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	4631      	mov	r1, r6
 8000cac:	4638      	mov	r0, r7
 8000cae:	eb04 0903 	add.w	r9, r4, r3
 8000cb2:	f000 f989 	bl	8000fc8 <_sbrk_r>
 8000cb6:	4581      	cmp	r9, r0
 8000cb8:	d13f      	bne.n	8000d3a <_malloc_r+0xe6>
 8000cba:	6821      	ldr	r1, [r4, #0]
 8000cbc:	1a6d      	subs	r5, r5, r1
 8000cbe:	4629      	mov	r1, r5
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	f7ff ffa7 	bl	8000c14 <sbrk_aligned>
 8000cc6:	3001      	adds	r0, #1
 8000cc8:	d037      	beq.n	8000d3a <_malloc_r+0xe6>
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	442b      	add	r3, r5
 8000cce:	6023      	str	r3, [r4, #0]
 8000cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d038      	beq.n	8000d4a <_malloc_r+0xf6>
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	42a2      	cmp	r2, r4
 8000cdc:	d12b      	bne.n	8000d36 <_malloc_r+0xe2>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	e00f      	b.n	8000d04 <_malloc_r+0xb0>
 8000ce4:	6822      	ldr	r2, [r4, #0]
 8000ce6:	1b52      	subs	r2, r2, r5
 8000ce8:	d41f      	bmi.n	8000d2a <_malloc_r+0xd6>
 8000cea:	2a0b      	cmp	r2, #11
 8000cec:	d917      	bls.n	8000d1e <_malloc_r+0xca>
 8000cee:	1961      	adds	r1, r4, r5
 8000cf0:	42a3      	cmp	r3, r4
 8000cf2:	6025      	str	r5, [r4, #0]
 8000cf4:	bf18      	it	ne
 8000cf6:	6059      	strne	r1, [r3, #4]
 8000cf8:	6863      	ldr	r3, [r4, #4]
 8000cfa:	bf08      	it	eq
 8000cfc:	f8c8 1000 	streq.w	r1, [r8]
 8000d00:	5162      	str	r2, [r4, r5]
 8000d02:	604b      	str	r3, [r1, #4]
 8000d04:	4638      	mov	r0, r7
 8000d06:	f104 060b 	add.w	r6, r4, #11
 8000d0a:	f000 f829 	bl	8000d60 <__malloc_unlock>
 8000d0e:	f026 0607 	bic.w	r6, r6, #7
 8000d12:	1d23      	adds	r3, r4, #4
 8000d14:	1af2      	subs	r2, r6, r3
 8000d16:	d0ae      	beq.n	8000c76 <_malloc_r+0x22>
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	50a3      	str	r3, [r4, r2]
 8000d1c:	e7ab      	b.n	8000c76 <_malloc_r+0x22>
 8000d1e:	42a3      	cmp	r3, r4
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	d1dd      	bne.n	8000ce0 <_malloc_r+0x8c>
 8000d24:	f8c8 2000 	str.w	r2, [r8]
 8000d28:	e7ec      	b.n	8000d04 <_malloc_r+0xb0>
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	6864      	ldr	r4, [r4, #4]
 8000d2e:	e7ac      	b.n	8000c8a <_malloc_r+0x36>
 8000d30:	4634      	mov	r4, r6
 8000d32:	6876      	ldr	r6, [r6, #4]
 8000d34:	e7b4      	b.n	8000ca0 <_malloc_r+0x4c>
 8000d36:	4613      	mov	r3, r2
 8000d38:	e7cc      	b.n	8000cd4 <_malloc_r+0x80>
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	f000 f80e 	bl	8000d60 <__malloc_unlock>
 8000d44:	e797      	b.n	8000c76 <_malloc_r+0x22>
 8000d46:	6025      	str	r5, [r4, #0]
 8000d48:	e7dc      	b.n	8000d04 <_malloc_r+0xb0>
 8000d4a:	605b      	str	r3, [r3, #4]
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	bf00      	nop
 8000d50:	200001e4 	.word	0x200001e4

08000d54 <__malloc_lock>:
 8000d54:	4801      	ldr	r0, [pc, #4]	; (8000d5c <__malloc_lock+0x8>)
 8000d56:	f7ff bf10 	b.w	8000b7a <__retarget_lock_acquire_recursive>
 8000d5a:	bf00      	nop
 8000d5c:	200001e0 	.word	0x200001e0

08000d60 <__malloc_unlock>:
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <__malloc_unlock+0x8>)
 8000d62:	f7ff bf0b 	b.w	8000b7c <__retarget_lock_release_recursive>
 8000d66:	bf00      	nop
 8000d68:	200001e0 	.word	0x200001e0

08000d6c <__sflush_r>:
 8000d6c:	898a      	ldrh	r2, [r1, #12]
 8000d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d70:	4605      	mov	r5, r0
 8000d72:	0710      	lsls	r0, r2, #28
 8000d74:	460c      	mov	r4, r1
 8000d76:	d457      	bmi.n	8000e28 <__sflush_r+0xbc>
 8000d78:	684b      	ldr	r3, [r1, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc04      	bgt.n	8000d88 <__sflush_r+0x1c>
 8000d7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dc01      	bgt.n	8000d88 <__sflush_r+0x1c>
 8000d84:	2000      	movs	r0, #0
 8000d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d0fa      	beq.n	8000d84 <__sflush_r+0x18>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d94:	682f      	ldr	r7, [r5, #0]
 8000d96:	6a21      	ldr	r1, [r4, #32]
 8000d98:	602b      	str	r3, [r5, #0]
 8000d9a:	d032      	beq.n	8000e02 <__sflush_r+0x96>
 8000d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d9e:	89a3      	ldrh	r3, [r4, #12]
 8000da0:	075a      	lsls	r2, r3, #29
 8000da2:	d505      	bpl.n	8000db0 <__sflush_r+0x44>
 8000da4:	6863      	ldr	r3, [r4, #4]
 8000da6:	1ac0      	subs	r0, r0, r3
 8000da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000daa:	b10b      	cbz	r3, 8000db0 <__sflush_r+0x44>
 8000dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dae:	1ac0      	subs	r0, r0, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	4602      	mov	r2, r0
 8000db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000db6:	6a21      	ldr	r1, [r4, #32]
 8000db8:	4628      	mov	r0, r5
 8000dba:	47b0      	blx	r6
 8000dbc:	1c43      	adds	r3, r0, #1
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	d106      	bne.n	8000dd0 <__sflush_r+0x64>
 8000dc2:	6829      	ldr	r1, [r5, #0]
 8000dc4:	291d      	cmp	r1, #29
 8000dc6:	d82b      	bhi.n	8000e20 <__sflush_r+0xb4>
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <__sflush_r+0x100>)
 8000dca:	410a      	asrs	r2, r1
 8000dcc:	07d6      	lsls	r6, r2, #31
 8000dce:	d427      	bmi.n	8000e20 <__sflush_r+0xb4>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6062      	str	r2, [r4, #4]
 8000dd4:	04d9      	lsls	r1, r3, #19
 8000dd6:	6922      	ldr	r2, [r4, #16]
 8000dd8:	6022      	str	r2, [r4, #0]
 8000dda:	d504      	bpl.n	8000de6 <__sflush_r+0x7a>
 8000ddc:	1c42      	adds	r2, r0, #1
 8000dde:	d101      	bne.n	8000de4 <__sflush_r+0x78>
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	b903      	cbnz	r3, 8000de6 <__sflush_r+0x7a>
 8000de4:	6560      	str	r0, [r4, #84]	; 0x54
 8000de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000de8:	602f      	str	r7, [r5, #0]
 8000dea:	2900      	cmp	r1, #0
 8000dec:	d0ca      	beq.n	8000d84 <__sflush_r+0x18>
 8000dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d002      	beq.n	8000dfc <__sflush_r+0x90>
 8000df6:	4628      	mov	r0, r5
 8000df8:	f7ff fec2 	bl	8000b80 <_free_r>
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8000e00:	e7c1      	b.n	8000d86 <__sflush_r+0x1a>
 8000e02:	2301      	movs	r3, #1
 8000e04:	4628      	mov	r0, r5
 8000e06:	47b0      	blx	r6
 8000e08:	1c41      	adds	r1, r0, #1
 8000e0a:	d1c8      	bne.n	8000d9e <__sflush_r+0x32>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0c5      	beq.n	8000d9e <__sflush_r+0x32>
 8000e12:	2b1d      	cmp	r3, #29
 8000e14:	d001      	beq.n	8000e1a <__sflush_r+0xae>
 8000e16:	2b16      	cmp	r3, #22
 8000e18:	d101      	bne.n	8000e1e <__sflush_r+0xb2>
 8000e1a:	602f      	str	r7, [r5, #0]
 8000e1c:	e7b2      	b.n	8000d84 <__sflush_r+0x18>
 8000e1e:	89a3      	ldrh	r3, [r4, #12]
 8000e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e24:	81a3      	strh	r3, [r4, #12]
 8000e26:	e7ae      	b.n	8000d86 <__sflush_r+0x1a>
 8000e28:	690f      	ldr	r7, [r1, #16]
 8000e2a:	2f00      	cmp	r7, #0
 8000e2c:	d0aa      	beq.n	8000d84 <__sflush_r+0x18>
 8000e2e:	0793      	lsls	r3, r2, #30
 8000e30:	680e      	ldr	r6, [r1, #0]
 8000e32:	bf08      	it	eq
 8000e34:	694b      	ldreq	r3, [r1, #20]
 8000e36:	600f      	str	r7, [r1, #0]
 8000e38:	bf18      	it	ne
 8000e3a:	2300      	movne	r3, #0
 8000e3c:	1bf6      	subs	r6, r6, r7
 8000e3e:	608b      	str	r3, [r1, #8]
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	dd9f      	ble.n	8000d84 <__sflush_r+0x18>
 8000e44:	6a21      	ldr	r1, [r4, #32]
 8000e46:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000e4a:	4633      	mov	r3, r6
 8000e4c:	463a      	mov	r2, r7
 8000e4e:	4628      	mov	r0, r5
 8000e50:	47e0      	blx	ip
 8000e52:	2800      	cmp	r0, #0
 8000e54:	dc06      	bgt.n	8000e64 <__sflush_r+0xf8>
 8000e56:	89a3      	ldrh	r3, [r4, #12]
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	81a3      	strh	r3, [r4, #12]
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e62:	e790      	b.n	8000d86 <__sflush_r+0x1a>
 8000e64:	4407      	add	r7, r0
 8000e66:	1a36      	subs	r6, r6, r0
 8000e68:	e7ea      	b.n	8000e40 <__sflush_r+0xd4>
 8000e6a:	bf00      	nop
 8000e6c:	dfbffffe 	.word	0xdfbffffe

08000e70 <_fflush_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	690b      	ldr	r3, [r1, #16]
 8000e74:	4605      	mov	r5, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	b913      	cbnz	r3, 8000e80 <_fflush_r+0x10>
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	b118      	cbz	r0, 8000e8a <_fflush_r+0x1a>
 8000e82:	6a03      	ldr	r3, [r0, #32]
 8000e84:	b90b      	cbnz	r3, 8000e8a <_fflush_r+0x1a>
 8000e86:	f7ff fc95 	bl	80007b4 <__sinit>
 8000e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f3      	beq.n	8000e7a <_fflush_r+0xa>
 8000e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e94:	07d0      	lsls	r0, r2, #31
 8000e96:	d404      	bmi.n	8000ea2 <_fflush_r+0x32>
 8000e98:	0599      	lsls	r1, r3, #22
 8000e9a:	d402      	bmi.n	8000ea2 <_fflush_r+0x32>
 8000e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e9e:	f7ff fe6c 	bl	8000b7a <__retarget_lock_acquire_recursive>
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	f7ff ff61 	bl	8000d6c <__sflush_r>
 8000eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000eac:	07da      	lsls	r2, r3, #31
 8000eae:	4605      	mov	r5, r0
 8000eb0:	d4e4      	bmi.n	8000e7c <_fflush_r+0xc>
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	059b      	lsls	r3, r3, #22
 8000eb6:	d4e1      	bmi.n	8000e7c <_fflush_r+0xc>
 8000eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eba:	f7ff fe5f 	bl	8000b7c <__retarget_lock_release_recursive>
 8000ebe:	e7dd      	b.n	8000e7c <_fflush_r+0xc>

08000ec0 <__swhatbuf_r>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	b096      	sub	sp, #88	; 0x58
 8000ecc:	4615      	mov	r5, r2
 8000ece:	461e      	mov	r6, r3
 8000ed0:	da0d      	bge.n	8000eee <__swhatbuf_r+0x2e>
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ed8:	f04f 0100 	mov.w	r1, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000ee2:	2340      	movne	r3, #64	; 0x40
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	6031      	str	r1, [r6, #0]
 8000ee8:	602b      	str	r3, [r5, #0]
 8000eea:	b016      	add	sp, #88	; 0x58
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	466a      	mov	r2, sp
 8000ef0:	f000 f848 	bl	8000f84 <_fstat_r>
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	dbec      	blt.n	8000ed2 <__swhatbuf_r+0x12>
 8000ef8:	9901      	ldr	r1, [sp, #4]
 8000efa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000efe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f02:	4259      	negs	r1, r3
 8000f04:	4159      	adcs	r1, r3
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	e7eb      	b.n	8000ee4 <__swhatbuf_r+0x24>

08000f0c <__smakebuf_r>:
 8000f0c:	898b      	ldrh	r3, [r1, #12]
 8000f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f10:	079d      	lsls	r5, r3, #30
 8000f12:	4606      	mov	r6, r0
 8000f14:	460c      	mov	r4, r1
 8000f16:	d507      	bpl.n	8000f28 <__smakebuf_r+0x1c>
 8000f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	6123      	str	r3, [r4, #16]
 8000f20:	2301      	movs	r3, #1
 8000f22:	6163      	str	r3, [r4, #20]
 8000f24:	b002      	add	sp, #8
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	ab01      	add	r3, sp, #4
 8000f2a:	466a      	mov	r2, sp
 8000f2c:	f7ff ffc8 	bl	8000ec0 <__swhatbuf_r>
 8000f30:	9900      	ldr	r1, [sp, #0]
 8000f32:	4605      	mov	r5, r0
 8000f34:	4630      	mov	r0, r6
 8000f36:	f7ff fe8d 	bl	8000c54 <_malloc_r>
 8000f3a:	b948      	cbnz	r0, 8000f50 <__smakebuf_r+0x44>
 8000f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f40:	059a      	lsls	r2, r3, #22
 8000f42:	d4ef      	bmi.n	8000f24 <__smakebuf_r+0x18>
 8000f44:	f023 0303 	bic.w	r3, r3, #3
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	81a3      	strh	r3, [r4, #12]
 8000f4e:	e7e3      	b.n	8000f18 <__smakebuf_r+0xc>
 8000f50:	89a3      	ldrh	r3, [r4, #12]
 8000f52:	6020      	str	r0, [r4, #0]
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	81a3      	strh	r3, [r4, #12]
 8000f5a:	9b00      	ldr	r3, [sp, #0]
 8000f5c:	6163      	str	r3, [r4, #20]
 8000f5e:	9b01      	ldr	r3, [sp, #4]
 8000f60:	6120      	str	r0, [r4, #16]
 8000f62:	b15b      	cbz	r3, 8000f7c <__smakebuf_r+0x70>
 8000f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f000 f81d 	bl	8000fa8 <_isatty_r>
 8000f6e:	b128      	cbz	r0, 8000f7c <__smakebuf_r+0x70>
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	81a3      	strh	r3, [r4, #12]
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	431d      	orrs	r5, r3
 8000f80:	81a5      	strh	r5, [r4, #12]
 8000f82:	e7cf      	b.n	8000f24 <__smakebuf_r+0x18>

08000f84 <_fstat_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4d07      	ldr	r5, [pc, #28]	; (8000fa4 <_fstat_r+0x20>)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	f7ff fafd 	bl	8000590 <_fstat>
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	d102      	bne.n	8000fa0 <_fstat_r+0x1c>
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	b103      	cbz	r3, 8000fa0 <_fstat_r+0x1c>
 8000f9e:	6023      	str	r3, [r4, #0]
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001dc 	.word	0x200001dc

08000fa8 <_isatty_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4d06      	ldr	r5, [pc, #24]	; (8000fc4 <_isatty_r+0x1c>)
 8000fac:	2300      	movs	r3, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	602b      	str	r3, [r5, #0]
 8000fb4:	f7ff fafb 	bl	80005ae <_isatty>
 8000fb8:	1c43      	adds	r3, r0, #1
 8000fba:	d102      	bne.n	8000fc2 <_isatty_r+0x1a>
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	b103      	cbz	r3, 8000fc2 <_isatty_r+0x1a>
 8000fc0:	6023      	str	r3, [r4, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
 8000fc4:	200001dc 	.word	0x200001dc

08000fc8 <_sbrk_r>:
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	4d06      	ldr	r5, [pc, #24]	; (8000fe4 <_sbrk_r+0x1c>)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	602b      	str	r3, [r5, #0]
 8000fd4:	f7ff fb02 	bl	80005dc <_sbrk>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_sbrk_r+0x1a>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_sbrk_r+0x1a>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	200001dc 	.word	0x200001dc

08000fe8 <_init>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr

08000ff4 <_fini>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr
